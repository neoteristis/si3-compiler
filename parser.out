Grammar:

Rule 0     S' -> prog
Rule 1     prog -> statement_list
Rule 2     primary_expression -> ( expression )
Rule 3     primary_expression -> ENTIER
Rule 4     primary_expression -> BOOLEAN
Rule 5     primary_expression -> IDENTIFIANT
Rule 6     postfix_expression -> function_call
Rule 7     postfix_expression -> primary_expression
Rule 8     unary_expression -> NON conditional_expression
Rule 9     unary_expression -> NON BOOLEAN DIFFERENT conditional_expression
Rule 10    unary_expression -> NON BOOLEAN EQUAL conditional_expression
Rule 11    unary_expression -> NON BOOLEAN OU conditional_expression
Rule 12    unary_expression -> NON BOOLEAN ET conditional_expression
Rule 13    unary_expression -> unary_operator cast_expression
Rule 14    unary_expression -> postfix_expression
Rule 15    unary_operator -> -
Rule 16    cast_expression -> unary_expression
Rule 17    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 18    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 19    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 20    multiplicative_expression -> cast_expression
Rule 21    additive_expression -> additive_expression - multiplicative_expression
Rule 22    additive_expression -> additive_expression + multiplicative_expression
Rule 23    additive_expression -> multiplicative_expression
Rule 24    relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression
Rule 25    relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression
Rule 26    relational_expression -> relational_expression > additive_expression
Rule 27    relational_expression -> relational_expression < additive_expression
Rule 28    relational_expression -> additive_expression
Rule 29    equality_expression -> equality_expression DIFFERENT relational_expression
Rule 30    equality_expression -> equality_expression EQUAL relational_expression
Rule 31    equality_expression -> relational_expression
Rule 32    logical_and_expression -> logical_and_expression ET equality_expression
Rule 33    logical_and_expression -> equality_expression
Rule 34    logical_or_expression -> logical_or_expression OU logical_and_expression
Rule 35    logical_or_expression -> logical_and_expression
Rule 36    conditional_expression -> logical_or_expression
Rule 37    assignment_expression -> conditional_expression
Rule 38    assignment_expression -> primary_expression assignment_operator conditional_expression
Rule 39    assignment_operator -> AFFECT
Rule 40    expression -> expression , assignment_expression
Rule 41    expression -> assignment_expression
Rule 42    statement -> function_declaration_statement
Rule 43    statement -> declaration_statement
Rule 44    statement -> iteration_statement
Rule 45    statement -> selection_statement
Rule 46    statement -> expression_statement
Rule 47    statement -> compound_statement
Rule 48    statement -> jump_statement
Rule 49    compound_statement -> { statement_list }
Rule 50    compound_statement -> { }
Rule 51    declaration_statement -> declaration ;
Rule 52    declaration -> type IDENTIFIANT AFFECT additive_expression
Rule 53    declaration -> type IDENTIFIANT
Rule 54    function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement
Rule 55    function_declaration_statement -> type IDENTIFIANT ( ) compound_statement
Rule 56    function_call -> IDENTIFIANT ( parameters_list_opt )
Rule 57    function_call -> IDENTIFIANT ( )
Rule 58    type -> BOOL
Rule 59    type -> INT
Rule 60    arguments_list_opt -> declarations_list
Rule 61    declarations_list -> declarations_list SEPARATOR declaration
Rule 62    declarations_list -> declaration
Rule 63    parameters_list_opt -> parameters_list
Rule 64    parameters_list -> parameters_list SEPARATOR assignment_expression
Rule 65    parameters_list -> assignment_expression
Rule 66    statement_list -> statement_list statement
Rule 67    statement_list -> statement
Rule 68    expression_statement -> expression ;
Rule 69    expression_statement -> ;
Rule 70    selection_statement -> SI ( expression ) statement SINON statement
Rule 71    selection_statement -> SI ( expression ) statement
Rule 72    iteration_statement -> TANTQUE ( expression ) statement
Rule 73    jump_statement -> RETOURNER expression ;
Rule 74    jump_statement -> RETOURNER ;

Terminals, with rules where they appear:

%                    : 17
(                    : 2 54 55 56 57 70 71 72
)                    : 2 54 55 56 57 70 71 72
*                    : 19
+                    : 22
,                    : 40
-                    : 15 21
/                    : 18
;                    : 51 68 69 73 74
<                    : 27
>                    : 26
AFFECT               : 39 52
BOOL                 : 58
BOOLEAN              : 4 9 10 11 12
DIFFERENT            : 9 29
ENTIER               : 3
EQUAL                : 10 30
ET                   : 12 32
IDENTIFIANT          : 5 52 53 54 55 56 57
INFERIEUR_OU_EGAL    : 25
INT                  : 59
NON                  : 8 9 10 11 12
OU                   : 11 34
RETOURNER            : 73 74
SEPARATOR            : 61 64
SI                   : 70 71
SINON                : 70
SUPERIEUR_OU_EGAL    : 24
TANTQUE              : 72
error                : 
{                    : 49 50
}                    : 49 50

Nonterminals, with rules where they appear:

additive_expression  : 21 22 24 25 26 27 28 52
arguments_list_opt   : 54
assignment_expression : 40 41 64 65
assignment_operator  : 38
cast_expression      : 13 17 18 19 20
compound_statement   : 47 54 55
conditional_expression : 8 9 10 11 12 37 38
declaration          : 51 61 62
declaration_statement : 43
declarations_list    : 60 61
equality_expression  : 29 30 32 33
expression           : 2 40 68 70 71 72 73
expression_statement : 46
function_call        : 6
function_declaration_statement : 42
iteration_statement  : 44
jump_statement       : 48
logical_and_expression : 32 34 35
logical_or_expression : 34 36
multiplicative_expression : 17 18 19 21 22 23
parameters_list      : 63 64
parameters_list_opt  : 56
postfix_expression   : 14
primary_expression   : 7 38
prog                 : 0
relational_expression : 24 25 26 27 29 30 31
selection_statement  : 45
statement            : 66 67 70 70 71 72
statement_list       : 1 49 66
type                 : 52 53 54 55
unary_expression     : 16
unary_operator       : 13


state 0

    (0) S' -> . prog
    (1) prog -> . statement_list
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    prog                           shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 1

    (0) S' -> prog .


state 2

    (1) prog -> statement_list .
    (66) statement_list -> statement_list . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    $end            reduce using rule 1 (prog -> statement_list .)
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    statement                      shift and go to state 41
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 3

    (67) statement_list -> statement .
    TANTQUE         reduce using rule 67 (statement_list -> statement .)
    SI              reduce using rule 67 (statement_list -> statement .)
    ;               reduce using rule 67 (statement_list -> statement .)
    {               reduce using rule 67 (statement_list -> statement .)
    RETOURNER       reduce using rule 67 (statement_list -> statement .)
    BOOL            reduce using rule 67 (statement_list -> statement .)
    INT             reduce using rule 67 (statement_list -> statement .)
    (               reduce using rule 67 (statement_list -> statement .)
    ENTIER          reduce using rule 67 (statement_list -> statement .)
    BOOLEAN         reduce using rule 67 (statement_list -> statement .)
    IDENTIFIANT     reduce using rule 67 (statement_list -> statement .)
    NON             reduce using rule 67 (statement_list -> statement .)
    -               reduce using rule 67 (statement_list -> statement .)
    $end            reduce using rule 67 (statement_list -> statement .)
    }               reduce using rule 67 (statement_list -> statement .)


state 4

    (42) statement -> function_declaration_statement .
    TANTQUE         reduce using rule 42 (statement -> function_declaration_statement .)
    SI              reduce using rule 42 (statement -> function_declaration_statement .)
    ;               reduce using rule 42 (statement -> function_declaration_statement .)
    {               reduce using rule 42 (statement -> function_declaration_statement .)
    RETOURNER       reduce using rule 42 (statement -> function_declaration_statement .)
    BOOL            reduce using rule 42 (statement -> function_declaration_statement .)
    INT             reduce using rule 42 (statement -> function_declaration_statement .)
    (               reduce using rule 42 (statement -> function_declaration_statement .)
    ENTIER          reduce using rule 42 (statement -> function_declaration_statement .)
    BOOLEAN         reduce using rule 42 (statement -> function_declaration_statement .)
    IDENTIFIANT     reduce using rule 42 (statement -> function_declaration_statement .)
    NON             reduce using rule 42 (statement -> function_declaration_statement .)
    -               reduce using rule 42 (statement -> function_declaration_statement .)
    $end            reduce using rule 42 (statement -> function_declaration_statement .)
    }               reduce using rule 42 (statement -> function_declaration_statement .)
    SINON           reduce using rule 42 (statement -> function_declaration_statement .)


state 5

    (43) statement -> declaration_statement .
    TANTQUE         reduce using rule 43 (statement -> declaration_statement .)
    SI              reduce using rule 43 (statement -> declaration_statement .)
    ;               reduce using rule 43 (statement -> declaration_statement .)
    {               reduce using rule 43 (statement -> declaration_statement .)
    RETOURNER       reduce using rule 43 (statement -> declaration_statement .)
    BOOL            reduce using rule 43 (statement -> declaration_statement .)
    INT             reduce using rule 43 (statement -> declaration_statement .)
    (               reduce using rule 43 (statement -> declaration_statement .)
    ENTIER          reduce using rule 43 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 43 (statement -> declaration_statement .)
    IDENTIFIANT     reduce using rule 43 (statement -> declaration_statement .)
    NON             reduce using rule 43 (statement -> declaration_statement .)
    -               reduce using rule 43 (statement -> declaration_statement .)
    $end            reduce using rule 43 (statement -> declaration_statement .)
    }               reduce using rule 43 (statement -> declaration_statement .)
    SINON           reduce using rule 43 (statement -> declaration_statement .)


state 6

    (44) statement -> iteration_statement .
    TANTQUE         reduce using rule 44 (statement -> iteration_statement .)
    SI              reduce using rule 44 (statement -> iteration_statement .)
    ;               reduce using rule 44 (statement -> iteration_statement .)
    {               reduce using rule 44 (statement -> iteration_statement .)
    RETOURNER       reduce using rule 44 (statement -> iteration_statement .)
    BOOL            reduce using rule 44 (statement -> iteration_statement .)
    INT             reduce using rule 44 (statement -> iteration_statement .)
    (               reduce using rule 44 (statement -> iteration_statement .)
    ENTIER          reduce using rule 44 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 44 (statement -> iteration_statement .)
    IDENTIFIANT     reduce using rule 44 (statement -> iteration_statement .)
    NON             reduce using rule 44 (statement -> iteration_statement .)
    -               reduce using rule 44 (statement -> iteration_statement .)
    $end            reduce using rule 44 (statement -> iteration_statement .)
    }               reduce using rule 44 (statement -> iteration_statement .)
    SINON           reduce using rule 44 (statement -> iteration_statement .)


state 7

    (45) statement -> selection_statement .
    TANTQUE         reduce using rule 45 (statement -> selection_statement .)
    SI              reduce using rule 45 (statement -> selection_statement .)
    ;               reduce using rule 45 (statement -> selection_statement .)
    {               reduce using rule 45 (statement -> selection_statement .)
    RETOURNER       reduce using rule 45 (statement -> selection_statement .)
    BOOL            reduce using rule 45 (statement -> selection_statement .)
    INT             reduce using rule 45 (statement -> selection_statement .)
    (               reduce using rule 45 (statement -> selection_statement .)
    ENTIER          reduce using rule 45 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 45 (statement -> selection_statement .)
    IDENTIFIANT     reduce using rule 45 (statement -> selection_statement .)
    NON             reduce using rule 45 (statement -> selection_statement .)
    -               reduce using rule 45 (statement -> selection_statement .)
    $end            reduce using rule 45 (statement -> selection_statement .)
    }               reduce using rule 45 (statement -> selection_statement .)
    SINON           reduce using rule 45 (statement -> selection_statement .)


state 8

    (46) statement -> expression_statement .
    TANTQUE         reduce using rule 46 (statement -> expression_statement .)
    SI              reduce using rule 46 (statement -> expression_statement .)
    ;               reduce using rule 46 (statement -> expression_statement .)
    {               reduce using rule 46 (statement -> expression_statement .)
    RETOURNER       reduce using rule 46 (statement -> expression_statement .)
    BOOL            reduce using rule 46 (statement -> expression_statement .)
    INT             reduce using rule 46 (statement -> expression_statement .)
    (               reduce using rule 46 (statement -> expression_statement .)
    ENTIER          reduce using rule 46 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 46 (statement -> expression_statement .)
    IDENTIFIANT     reduce using rule 46 (statement -> expression_statement .)
    NON             reduce using rule 46 (statement -> expression_statement .)
    -               reduce using rule 46 (statement -> expression_statement .)
    $end            reduce using rule 46 (statement -> expression_statement .)
    }               reduce using rule 46 (statement -> expression_statement .)
    SINON           reduce using rule 46 (statement -> expression_statement .)


state 9

    (47) statement -> compound_statement .
    TANTQUE         reduce using rule 47 (statement -> compound_statement .)
    SI              reduce using rule 47 (statement -> compound_statement .)
    ;               reduce using rule 47 (statement -> compound_statement .)
    {               reduce using rule 47 (statement -> compound_statement .)
    RETOURNER       reduce using rule 47 (statement -> compound_statement .)
    BOOL            reduce using rule 47 (statement -> compound_statement .)
    INT             reduce using rule 47 (statement -> compound_statement .)
    (               reduce using rule 47 (statement -> compound_statement .)
    ENTIER          reduce using rule 47 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 47 (statement -> compound_statement .)
    IDENTIFIANT     reduce using rule 47 (statement -> compound_statement .)
    NON             reduce using rule 47 (statement -> compound_statement .)
    -               reduce using rule 47 (statement -> compound_statement .)
    $end            reduce using rule 47 (statement -> compound_statement .)
    }               reduce using rule 47 (statement -> compound_statement .)
    SINON           reduce using rule 47 (statement -> compound_statement .)


state 10

    (48) statement -> jump_statement .
    TANTQUE         reduce using rule 48 (statement -> jump_statement .)
    SI              reduce using rule 48 (statement -> jump_statement .)
    ;               reduce using rule 48 (statement -> jump_statement .)
    {               reduce using rule 48 (statement -> jump_statement .)
    RETOURNER       reduce using rule 48 (statement -> jump_statement .)
    BOOL            reduce using rule 48 (statement -> jump_statement .)
    INT             reduce using rule 48 (statement -> jump_statement .)
    (               reduce using rule 48 (statement -> jump_statement .)
    ENTIER          reduce using rule 48 (statement -> jump_statement .)
    BOOLEAN         reduce using rule 48 (statement -> jump_statement .)
    IDENTIFIANT     reduce using rule 48 (statement -> jump_statement .)
    NON             reduce using rule 48 (statement -> jump_statement .)
    -               reduce using rule 48 (statement -> jump_statement .)
    $end            reduce using rule 48 (statement -> jump_statement .)
    }               reduce using rule 48 (statement -> jump_statement .)
    SINON           reduce using rule 48 (statement -> jump_statement .)


state 11

    (54) function_declaration_statement -> type . IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> type . IDENTIFIANT ( ) compound_statement
    (52) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (53) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 42


state 12

    (5) primary_expression -> IDENTIFIANT .
    (56) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (57) function_call -> IDENTIFIANT . ( )
    AFFECT          reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    (               shift and go to state 43


state 13

    (2) primary_expression -> ( . expression )
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 44
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 14

    (51) declaration_statement -> declaration . ;
    ;               shift and go to state 45


state 15

    (69) expression_statement -> ; .
    TANTQUE         reduce using rule 69 (expression_statement -> ; .)
    SI              reduce using rule 69 (expression_statement -> ; .)
    ;               reduce using rule 69 (expression_statement -> ; .)
    {               reduce using rule 69 (expression_statement -> ; .)
    RETOURNER       reduce using rule 69 (expression_statement -> ; .)
    BOOL            reduce using rule 69 (expression_statement -> ; .)
    INT             reduce using rule 69 (expression_statement -> ; .)
    (               reduce using rule 69 (expression_statement -> ; .)
    ENTIER          reduce using rule 69 (expression_statement -> ; .)
    BOOLEAN         reduce using rule 69 (expression_statement -> ; .)
    IDENTIFIANT     reduce using rule 69 (expression_statement -> ; .)
    NON             reduce using rule 69 (expression_statement -> ; .)
    -               reduce using rule 69 (expression_statement -> ; .)
    $end            reduce using rule 69 (expression_statement -> ; .)
    }               reduce using rule 69 (expression_statement -> ; .)
    SINON           reduce using rule 69 (expression_statement -> ; .)


state 16

    (72) iteration_statement -> TANTQUE . ( expression ) statement
    (               shift and go to state 46


state 17

    (68) expression_statement -> expression . ;
    (40) expression -> expression . , assignment_expression
    ;               shift and go to state 47
    ,               shift and go to state 48


state 18

    (70) selection_statement -> SI . ( expression ) statement SINON statement
    (71) selection_statement -> SI . ( expression ) statement
    (               shift and go to state 49


state 19

    (49) compound_statement -> { . statement_list }
    (50) compound_statement -> { . }
    (66) statement_list -> . statement_list statement
    (67) statement_list -> . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 51
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    statement_list                 shift and go to state 50
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 20

    (73) jump_statement -> RETOURNER . expression ;
    (74) jump_statement -> RETOURNER . ;
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    ;               shift and go to state 53
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 52
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 21

    (58) type -> BOOL .
    IDENTIFIANT     reduce using rule 58 (type -> BOOL .)


state 22

    (59) type -> INT .
    IDENTIFIANT     reduce using rule 59 (type -> INT .)


state 23

    (28) relational_expression -> additive_expression .
    (21) additive_expression -> additive_expression . - multiplicative_expression
    (22) additive_expression -> additive_expression . + multiplicative_expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    SUPERIEUR_OU_EGAL reduce using rule 28 (relational_expression -> additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 28 (relational_expression -> additive_expression .)
    >               reduce using rule 28 (relational_expression -> additive_expression .)
    <               reduce using rule 28 (relational_expression -> additive_expression .)
    DIFFERENT       reduce using rule 28 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 28 (relational_expression -> additive_expression .)
    ET              reduce using rule 28 (relational_expression -> additive_expression .)
    OU              reduce using rule 28 (relational_expression -> additive_expression .)
    ;               reduce using rule 28 (relational_expression -> additive_expression .)
    ,               reduce using rule 28 (relational_expression -> additive_expression .)
    )               reduce using rule 28 (relational_expression -> additive_expression .)
    %               reduce using rule 28 (relational_expression -> additive_expression .)
    /               reduce using rule 28 (relational_expression -> additive_expression .)
    *               reduce using rule 28 (relational_expression -> additive_expression .)
    SEPARATOR       reduce using rule 28 (relational_expression -> additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 24

    (41) expression -> assignment_expression .
    ;               reduce using rule 41 (expression -> assignment_expression .)
    ,               reduce using rule 41 (expression -> assignment_expression .)
    )               reduce using rule 41 (expression -> assignment_expression .)


state 25

    (37) assignment_expression -> conditional_expression .
    ;               reduce using rule 37 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 37 (assignment_expression -> conditional_expression .)
    )               reduce using rule 37 (assignment_expression -> conditional_expression .)
    SEPARATOR       reduce using rule 37 (assignment_expression -> conditional_expression .)


state 26

    (38) assignment_expression -> primary_expression . assignment_operator conditional_expression
    (7) postfix_expression -> primary_expression .
    (39) assignment_operator -> . AFFECT
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)
    AFFECT          shift and go to state 57

    assignment_operator            shift and go to state 56

state 27

    (36) conditional_expression -> logical_or_expression .
    (34) logical_or_expression -> logical_or_expression . OU logical_and_expression
  ! shift/reduce conflict for OU resolved as shift
    ;               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    %               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    /               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    *               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    -               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    +               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 36 (conditional_expression -> logical_or_expression .)
    INFERIEUR_OU_EGAL reduce using rule 36 (conditional_expression -> logical_or_expression .)
    >               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    <               reduce using rule 36 (conditional_expression -> logical_or_expression .)
    DIFFERENT       reduce using rule 36 (conditional_expression -> logical_or_expression .)
    EQUAL           reduce using rule 36 (conditional_expression -> logical_or_expression .)
    ET              reduce using rule 36 (conditional_expression -> logical_or_expression .)
    SEPARATOR       reduce using rule 36 (conditional_expression -> logical_or_expression .)
    OU              shift and go to state 58


state 28

    (3) primary_expression -> ENTIER .
    AFFECT          reduce using rule 3 (primary_expression -> ENTIER .)
    %               reduce using rule 3 (primary_expression -> ENTIER .)
    /               reduce using rule 3 (primary_expression -> ENTIER .)
    *               reduce using rule 3 (primary_expression -> ENTIER .)
    -               reduce using rule 3 (primary_expression -> ENTIER .)
    +               reduce using rule 3 (primary_expression -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    >               reduce using rule 3 (primary_expression -> ENTIER .)
    <               reduce using rule 3 (primary_expression -> ENTIER .)
    DIFFERENT       reduce using rule 3 (primary_expression -> ENTIER .)
    EQUAL           reduce using rule 3 (primary_expression -> ENTIER .)
    ET              reduce using rule 3 (primary_expression -> ENTIER .)
    OU              reduce using rule 3 (primary_expression -> ENTIER .)
    ;               reduce using rule 3 (primary_expression -> ENTIER .)
    ,               reduce using rule 3 (primary_expression -> ENTIER .)
    )               reduce using rule 3 (primary_expression -> ENTIER .)
    SEPARATOR       reduce using rule 3 (primary_expression -> ENTIER .)


state 29

    (4) primary_expression -> BOOLEAN .
    AFFECT          reduce using rule 4 (primary_expression -> BOOLEAN .)
    %               reduce using rule 4 (primary_expression -> BOOLEAN .)
    /               reduce using rule 4 (primary_expression -> BOOLEAN .)
    *               reduce using rule 4 (primary_expression -> BOOLEAN .)
    -               reduce using rule 4 (primary_expression -> BOOLEAN .)
    +               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SUPERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    INFERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    >               reduce using rule 4 (primary_expression -> BOOLEAN .)
    <               reduce using rule 4 (primary_expression -> BOOLEAN .)
    DIFFERENT       reduce using rule 4 (primary_expression -> BOOLEAN .)
    EQUAL           reduce using rule 4 (primary_expression -> BOOLEAN .)
    ET              reduce using rule 4 (primary_expression -> BOOLEAN .)
    OU              reduce using rule 4 (primary_expression -> BOOLEAN .)
    ;               reduce using rule 4 (primary_expression -> BOOLEAN .)
    ,               reduce using rule 4 (primary_expression -> BOOLEAN .)
    )               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SEPARATOR       reduce using rule 4 (primary_expression -> BOOLEAN .)


state 30

    (35) logical_or_expression -> logical_and_expression .
    (32) logical_and_expression -> logical_and_expression . ET equality_expression
  ! shift/reduce conflict for ET resolved as shift
    OU              reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    %               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    /               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    *               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    -               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    +               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    INFERIEUR_OU_EGAL reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    >               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    <               reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    DIFFERENT       reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    EQUAL           reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    SEPARATOR       reduce using rule 35 (logical_or_expression -> logical_and_expression .)
    ET              shift and go to state 59


state 31

    (33) logical_and_expression -> equality_expression .
    (29) equality_expression -> equality_expression . DIFFERENT relational_expression
    (30) equality_expression -> equality_expression . EQUAL relational_expression
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    ET              reduce using rule 33 (logical_and_expression -> equality_expression .)
    OU              reduce using rule 33 (logical_and_expression -> equality_expression .)
    ;               reduce using rule 33 (logical_and_expression -> equality_expression .)
    ,               reduce using rule 33 (logical_and_expression -> equality_expression .)
    )               reduce using rule 33 (logical_and_expression -> equality_expression .)
    %               reduce using rule 33 (logical_and_expression -> equality_expression .)
    /               reduce using rule 33 (logical_and_expression -> equality_expression .)
    *               reduce using rule 33 (logical_and_expression -> equality_expression .)
    -               reduce using rule 33 (logical_and_expression -> equality_expression .)
    +               reduce using rule 33 (logical_and_expression -> equality_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 33 (logical_and_expression -> equality_expression .)
    INFERIEUR_OU_EGAL reduce using rule 33 (logical_and_expression -> equality_expression .)
    >               reduce using rule 33 (logical_and_expression -> equality_expression .)
    <               reduce using rule 33 (logical_and_expression -> equality_expression .)
    SEPARATOR       reduce using rule 33 (logical_and_expression -> equality_expression .)
    DIFFERENT       shift and go to state 60
    EQUAL           shift and go to state 61


state 32

    (31) equality_expression -> relational_expression .
    (24) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> relational_expression . > additive_expression
    (27) relational_expression -> relational_expression . < additive_expression
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    DIFFERENT       reduce using rule 31 (equality_expression -> relational_expression .)
    EQUAL           reduce using rule 31 (equality_expression -> relational_expression .)
    ET              reduce using rule 31 (equality_expression -> relational_expression .)
    OU              reduce using rule 31 (equality_expression -> relational_expression .)
    ;               reduce using rule 31 (equality_expression -> relational_expression .)
    ,               reduce using rule 31 (equality_expression -> relational_expression .)
    )               reduce using rule 31 (equality_expression -> relational_expression .)
    %               reduce using rule 31 (equality_expression -> relational_expression .)
    /               reduce using rule 31 (equality_expression -> relational_expression .)
    *               reduce using rule 31 (equality_expression -> relational_expression .)
    -               reduce using rule 31 (equality_expression -> relational_expression .)
    +               reduce using rule 31 (equality_expression -> relational_expression .)
    SEPARATOR       reduce using rule 31 (equality_expression -> relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 62
    INFERIEUR_OU_EGAL shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65


state 33

    (15) unary_operator -> - .
    NON             reduce using rule 15 (unary_operator -> - .)
    -               reduce using rule 15 (unary_operator -> - .)
    IDENTIFIANT     reduce using rule 15 (unary_operator -> - .)
    (               reduce using rule 15 (unary_operator -> - .)
    ENTIER          reduce using rule 15 (unary_operator -> - .)
    BOOLEAN         reduce using rule 15 (unary_operator -> - .)


state 34

    (23) additive_expression -> multiplicative_expression .
    (17) multiplicative_expression -> multiplicative_expression . % cast_expression
    (18) multiplicative_expression -> multiplicative_expression . / cast_expression
    (19) multiplicative_expression -> multiplicative_expression . * cast_expression
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    -               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    +               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 23 (additive_expression -> multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 23 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    DIFFERENT       reduce using rule 23 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 23 (additive_expression -> multiplicative_expression .)
    ET              reduce using rule 23 (additive_expression -> multiplicative_expression .)
    OU              reduce using rule 23 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 23 (additive_expression -> multiplicative_expression .)
    SEPARATOR       reduce using rule 23 (additive_expression -> multiplicative_expression .)
    %               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 35

    (20) multiplicative_expression -> cast_expression .
    %               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    *               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 20 (multiplicative_expression -> cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 20 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    DIFFERENT       reduce using rule 20 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 20 (multiplicative_expression -> cast_expression .)
    ET              reduce using rule 20 (multiplicative_expression -> cast_expression .)
    OU              reduce using rule 20 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 20 (multiplicative_expression -> cast_expression .)
    SEPARATOR       reduce using rule 20 (multiplicative_expression -> cast_expression .)


state 36

    (16) cast_expression -> unary_expression .
    %               reduce using rule 16 (cast_expression -> unary_expression .)
    /               reduce using rule 16 (cast_expression -> unary_expression .)
    *               reduce using rule 16 (cast_expression -> unary_expression .)
    -               reduce using rule 16 (cast_expression -> unary_expression .)
    +               reduce using rule 16 (cast_expression -> unary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 16 (cast_expression -> unary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 16 (cast_expression -> unary_expression .)
    >               reduce using rule 16 (cast_expression -> unary_expression .)
    <               reduce using rule 16 (cast_expression -> unary_expression .)
    DIFFERENT       reduce using rule 16 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 16 (cast_expression -> unary_expression .)
    ET              reduce using rule 16 (cast_expression -> unary_expression .)
    OU              reduce using rule 16 (cast_expression -> unary_expression .)
    ;               reduce using rule 16 (cast_expression -> unary_expression .)
    ,               reduce using rule 16 (cast_expression -> unary_expression .)
    )               reduce using rule 16 (cast_expression -> unary_expression .)
    SEPARATOR       reduce using rule 16 (cast_expression -> unary_expression .)


state 37

    (8) unary_expression -> NON . conditional_expression
    (9) unary_expression -> NON . BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> NON . BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> NON . BOOLEAN OU conditional_expression
    (12) unary_expression -> NON . BOOLEAN ET conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    BOOLEAN         shift and go to state 70
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28

    conditional_expression         shift and go to state 69
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 38

    (13) unary_expression -> unary_operator . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    unary_operator                 shift and go to state 38
    cast_expression                shift and go to state 73
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 39

    (14) unary_expression -> postfix_expression .
    %               reduce using rule 14 (unary_expression -> postfix_expression .)
    /               reduce using rule 14 (unary_expression -> postfix_expression .)
    *               reduce using rule 14 (unary_expression -> postfix_expression .)
    -               reduce using rule 14 (unary_expression -> postfix_expression .)
    +               reduce using rule 14 (unary_expression -> postfix_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 14 (unary_expression -> postfix_expression .)
    INFERIEUR_OU_EGAL reduce using rule 14 (unary_expression -> postfix_expression .)
    >               reduce using rule 14 (unary_expression -> postfix_expression .)
    <               reduce using rule 14 (unary_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 14 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 14 (unary_expression -> postfix_expression .)
    ET              reduce using rule 14 (unary_expression -> postfix_expression .)
    OU              reduce using rule 14 (unary_expression -> postfix_expression .)
    ;               reduce using rule 14 (unary_expression -> postfix_expression .)
    ,               reduce using rule 14 (unary_expression -> postfix_expression .)
    )               reduce using rule 14 (unary_expression -> postfix_expression .)
    SEPARATOR       reduce using rule 14 (unary_expression -> postfix_expression .)


state 40

    (6) postfix_expression -> function_call .
    %               reduce using rule 6 (postfix_expression -> function_call .)
    /               reduce using rule 6 (postfix_expression -> function_call .)
    *               reduce using rule 6 (postfix_expression -> function_call .)
    -               reduce using rule 6 (postfix_expression -> function_call .)
    +               reduce using rule 6 (postfix_expression -> function_call .)
    SUPERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    INFERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    >               reduce using rule 6 (postfix_expression -> function_call .)
    <               reduce using rule 6 (postfix_expression -> function_call .)
    DIFFERENT       reduce using rule 6 (postfix_expression -> function_call .)
    EQUAL           reduce using rule 6 (postfix_expression -> function_call .)
    ET              reduce using rule 6 (postfix_expression -> function_call .)
    OU              reduce using rule 6 (postfix_expression -> function_call .)
    ;               reduce using rule 6 (postfix_expression -> function_call .)
    ,               reduce using rule 6 (postfix_expression -> function_call .)
    )               reduce using rule 6 (postfix_expression -> function_call .)
    SEPARATOR       reduce using rule 6 (postfix_expression -> function_call .)


state 41

    (66) statement_list -> statement_list statement .
    TANTQUE         reduce using rule 66 (statement_list -> statement_list statement .)
    SI              reduce using rule 66 (statement_list -> statement_list statement .)
    ;               reduce using rule 66 (statement_list -> statement_list statement .)
    {               reduce using rule 66 (statement_list -> statement_list statement .)
    RETOURNER       reduce using rule 66 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 66 (statement_list -> statement_list statement .)
    INT             reduce using rule 66 (statement_list -> statement_list statement .)
    (               reduce using rule 66 (statement_list -> statement_list statement .)
    ENTIER          reduce using rule 66 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 66 (statement_list -> statement_list statement .)
    IDENTIFIANT     reduce using rule 66 (statement_list -> statement_list statement .)
    NON             reduce using rule 66 (statement_list -> statement_list statement .)
    -               reduce using rule 66 (statement_list -> statement_list statement .)
    $end            reduce using rule 66 (statement_list -> statement_list statement .)
    }               reduce using rule 66 (statement_list -> statement_list statement .)


state 42

    (54) function_declaration_statement -> type IDENTIFIANT . ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> type IDENTIFIANT . ( ) compound_statement
    (52) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (53) declaration -> type IDENTIFIANT .
    (               shift and go to state 74
    AFFECT          shift and go to state 75
    ;               reduce using rule 53 (declaration -> type IDENTIFIANT .)


state 43

    (56) function_call -> IDENTIFIANT ( . parameters_list_opt )
    (57) function_call -> IDENTIFIANT ( . )
    (63) parameters_list_opt -> . parameters_list
    (64) parameters_list -> . parameters_list SEPARATOR assignment_expression
    (65) parameters_list -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    )               shift and go to state 77
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    parameters_list_opt            shift and go to state 76
    parameters_list                shift and go to state 78
    assignment_expression          shift and go to state 79
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 44

    (2) primary_expression -> ( expression . )
    (40) expression -> expression . , assignment_expression
    )               shift and go to state 80
    ,               shift and go to state 48


state 45

    (51) declaration_statement -> declaration ; .
    TANTQUE         reduce using rule 51 (declaration_statement -> declaration ; .)
    SI              reduce using rule 51 (declaration_statement -> declaration ; .)
    ;               reduce using rule 51 (declaration_statement -> declaration ; .)
    {               reduce using rule 51 (declaration_statement -> declaration ; .)
    RETOURNER       reduce using rule 51 (declaration_statement -> declaration ; .)
    BOOL            reduce using rule 51 (declaration_statement -> declaration ; .)
    INT             reduce using rule 51 (declaration_statement -> declaration ; .)
    (               reduce using rule 51 (declaration_statement -> declaration ; .)
    ENTIER          reduce using rule 51 (declaration_statement -> declaration ; .)
    BOOLEAN         reduce using rule 51 (declaration_statement -> declaration ; .)
    IDENTIFIANT     reduce using rule 51 (declaration_statement -> declaration ; .)
    NON             reduce using rule 51 (declaration_statement -> declaration ; .)
    -               reduce using rule 51 (declaration_statement -> declaration ; .)
    $end            reduce using rule 51 (declaration_statement -> declaration ; .)
    }               reduce using rule 51 (declaration_statement -> declaration ; .)
    SINON           reduce using rule 51 (declaration_statement -> declaration ; .)


state 46

    (72) iteration_statement -> TANTQUE ( . expression ) statement
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 81
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 47

    (68) expression_statement -> expression ; .
    TANTQUE         reduce using rule 68 (expression_statement -> expression ; .)
    SI              reduce using rule 68 (expression_statement -> expression ; .)
    ;               reduce using rule 68 (expression_statement -> expression ; .)
    {               reduce using rule 68 (expression_statement -> expression ; .)
    RETOURNER       reduce using rule 68 (expression_statement -> expression ; .)
    BOOL            reduce using rule 68 (expression_statement -> expression ; .)
    INT             reduce using rule 68 (expression_statement -> expression ; .)
    (               reduce using rule 68 (expression_statement -> expression ; .)
    ENTIER          reduce using rule 68 (expression_statement -> expression ; .)
    BOOLEAN         reduce using rule 68 (expression_statement -> expression ; .)
    IDENTIFIANT     reduce using rule 68 (expression_statement -> expression ; .)
    NON             reduce using rule 68 (expression_statement -> expression ; .)
    -               reduce using rule 68 (expression_statement -> expression ; .)
    $end            reduce using rule 68 (expression_statement -> expression ; .)
    }               reduce using rule 68 (expression_statement -> expression ; .)
    SINON           reduce using rule 68 (expression_statement -> expression ; .)


state 48

    (40) expression -> expression , . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 49

    (70) selection_statement -> SI ( . expression ) statement SINON statement
    (71) selection_statement -> SI ( . expression ) statement
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 83
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 50

    (49) compound_statement -> { statement_list . }
    (66) statement_list -> statement_list . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 84
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    statement                      shift and go to state 41
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 51

    (50) compound_statement -> { } .
    TANTQUE         reduce using rule 50 (compound_statement -> { } .)
    SI              reduce using rule 50 (compound_statement -> { } .)
    ;               reduce using rule 50 (compound_statement -> { } .)
    {               reduce using rule 50 (compound_statement -> { } .)
    RETOURNER       reduce using rule 50 (compound_statement -> { } .)
    BOOL            reduce using rule 50 (compound_statement -> { } .)
    INT             reduce using rule 50 (compound_statement -> { } .)
    (               reduce using rule 50 (compound_statement -> { } .)
    ENTIER          reduce using rule 50 (compound_statement -> { } .)
    BOOLEAN         reduce using rule 50 (compound_statement -> { } .)
    IDENTIFIANT     reduce using rule 50 (compound_statement -> { } .)
    NON             reduce using rule 50 (compound_statement -> { } .)
    -               reduce using rule 50 (compound_statement -> { } .)
    $end            reduce using rule 50 (compound_statement -> { } .)
    }               reduce using rule 50 (compound_statement -> { } .)
    SINON           reduce using rule 50 (compound_statement -> { } .)


state 52

    (73) jump_statement -> RETOURNER expression . ;
    (40) expression -> expression . , assignment_expression
    ;               shift and go to state 85
    ,               shift and go to state 48


state 53

    (74) jump_statement -> RETOURNER ; .
    TANTQUE         reduce using rule 74 (jump_statement -> RETOURNER ; .)
    SI              reduce using rule 74 (jump_statement -> RETOURNER ; .)
    ;               reduce using rule 74 (jump_statement -> RETOURNER ; .)
    {               reduce using rule 74 (jump_statement -> RETOURNER ; .)
    RETOURNER       reduce using rule 74 (jump_statement -> RETOURNER ; .)
    BOOL            reduce using rule 74 (jump_statement -> RETOURNER ; .)
    INT             reduce using rule 74 (jump_statement -> RETOURNER ; .)
    (               reduce using rule 74 (jump_statement -> RETOURNER ; .)
    ENTIER          reduce using rule 74 (jump_statement -> RETOURNER ; .)
    BOOLEAN         reduce using rule 74 (jump_statement -> RETOURNER ; .)
    IDENTIFIANT     reduce using rule 74 (jump_statement -> RETOURNER ; .)
    NON             reduce using rule 74 (jump_statement -> RETOURNER ; .)
    -               reduce using rule 74 (jump_statement -> RETOURNER ; .)
    $end            reduce using rule 74 (jump_statement -> RETOURNER ; .)
    }               reduce using rule 74 (jump_statement -> RETOURNER ; .)
    SINON           reduce using rule 74 (jump_statement -> RETOURNER ; .)


state 54

    (21) additive_expression -> additive_expression - . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 86
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 55

    (22) additive_expression -> additive_expression + . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 87
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 56

    (38) assignment_expression -> primary_expression assignment_operator . conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    primary_expression             shift and go to state 71
    conditional_expression         shift and go to state 88
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 57

    (39) assignment_operator -> AFFECT .
    NON             reduce using rule 39 (assignment_operator -> AFFECT .)
    -               reduce using rule 39 (assignment_operator -> AFFECT .)
    IDENTIFIANT     reduce using rule 39 (assignment_operator -> AFFECT .)
    (               reduce using rule 39 (assignment_operator -> AFFECT .)
    ENTIER          reduce using rule 39 (assignment_operator -> AFFECT .)
    BOOLEAN         reduce using rule 39 (assignment_operator -> AFFECT .)


state 58

    (34) logical_or_expression -> logical_or_expression OU . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    logical_and_expression         shift and go to state 89
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 59

    (32) logical_and_expression -> logical_and_expression ET . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    equality_expression            shift and go to state 90
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 60

    (29) equality_expression -> equality_expression DIFFERENT . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 91
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 61

    (30) equality_expression -> equality_expression EQUAL . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 92
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 62

    (24) relational_expression -> relational_expression SUPERIEUR_OU_EGAL . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 93
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 63

    (25) relational_expression -> relational_expression INFERIEUR_OU_EGAL . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 94
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 64

    (26) relational_expression -> relational_expression > . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 65

    (27) relational_expression -> relational_expression < . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 66

    (17) multiplicative_expression -> multiplicative_expression % . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 67

    (18) multiplicative_expression -> multiplicative_expression / . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 98
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 68

    (19) multiplicative_expression -> multiplicative_expression * . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 99
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 69

    (8) unary_expression -> NON conditional_expression .
    %               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    /               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    *               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    -               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    +               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> NON conditional_expression .)
    INFERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> NON conditional_expression .)
    >               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    <               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    DIFFERENT       reduce using rule 8 (unary_expression -> NON conditional_expression .)
    EQUAL           reduce using rule 8 (unary_expression -> NON conditional_expression .)
    ET              reduce using rule 8 (unary_expression -> NON conditional_expression .)
    OU              reduce using rule 8 (unary_expression -> NON conditional_expression .)
    ;               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    ,               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    )               reduce using rule 8 (unary_expression -> NON conditional_expression .)
    SEPARATOR       reduce using rule 8 (unary_expression -> NON conditional_expression .)


state 70

    (9) unary_expression -> NON BOOLEAN . DIFFERENT conditional_expression
    (10) unary_expression -> NON BOOLEAN . EQUAL conditional_expression
    (11) unary_expression -> NON BOOLEAN . OU conditional_expression
    (12) unary_expression -> NON BOOLEAN . ET conditional_expression
    (4) primary_expression -> BOOLEAN .
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for OU resolved as shift
    DIFFERENT       shift and go to state 100
    EQUAL           shift and go to state 101
    OU              shift and go to state 102
    ET              shift and go to state 103
    %               reduce using rule 4 (primary_expression -> BOOLEAN .)
    /               reduce using rule 4 (primary_expression -> BOOLEAN .)
    *               reduce using rule 4 (primary_expression -> BOOLEAN .)
    -               reduce using rule 4 (primary_expression -> BOOLEAN .)
    +               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SUPERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    INFERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    >               reduce using rule 4 (primary_expression -> BOOLEAN .)
    <               reduce using rule 4 (primary_expression -> BOOLEAN .)
    ;               reduce using rule 4 (primary_expression -> BOOLEAN .)
    ,               reduce using rule 4 (primary_expression -> BOOLEAN .)
    )               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SEPARATOR       reduce using rule 4 (primary_expression -> BOOLEAN .)


state 71

    (7) postfix_expression -> primary_expression .
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)


state 72

    (56) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (57) function_call -> IDENTIFIANT . ( )
    (5) primary_expression -> IDENTIFIANT .
    (               shift and go to state 43
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)


state 73

    (13) unary_expression -> unary_operator cast_expression .
    %               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    DIFFERENT       reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    ET              reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    OU              reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 13 (unary_expression -> unary_operator cast_expression .)
    SEPARATOR       reduce using rule 13 (unary_expression -> unary_operator cast_expression .)


state 74

    (54) function_declaration_statement -> type IDENTIFIANT ( . arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> type IDENTIFIANT ( . ) compound_statement
    (60) arguments_list_opt -> . declarations_list
    (61) declarations_list -> . declarations_list SEPARATOR declaration
    (62) declarations_list -> . declaration
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (58) type -> . BOOL
    (59) type -> . INT
    )               shift and go to state 106
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    type                           shift and go to state 104
    arguments_list_opt             shift and go to state 105
    declarations_list              shift and go to state 107
    declaration                    shift and go to state 108

state 75

    (52) declaration -> type IDENTIFIANT AFFECT . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 109
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 76

    (56) function_call -> IDENTIFIANT ( parameters_list_opt . )
    )               shift and go to state 110


state 77

    (57) function_call -> IDENTIFIANT ( ) .
    %               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    /               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    *               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    -               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    +               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    SUPERIEUR_OU_EGAL reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    INFERIEUR_OU_EGAL reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    >               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    <               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    DIFFERENT       reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    EQUAL           reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    ET              reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    OU              reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    ;               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    ,               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    )               reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)
    SEPARATOR       reduce using rule 57 (function_call -> IDENTIFIANT ( ) .)


state 78

    (63) parameters_list_opt -> parameters_list .
    (64) parameters_list -> parameters_list . SEPARATOR assignment_expression
    )               reduce using rule 63 (parameters_list_opt -> parameters_list .)
    SEPARATOR       shift and go to state 111


state 79

    (65) parameters_list -> assignment_expression .
    SEPARATOR       reduce using rule 65 (parameters_list -> assignment_expression .)
    )               reduce using rule 65 (parameters_list -> assignment_expression .)


state 80

    (2) primary_expression -> ( expression ) .
    AFFECT          reduce using rule 2 (primary_expression -> ( expression ) .)
    %               reduce using rule 2 (primary_expression -> ( expression ) .)
    /               reduce using rule 2 (primary_expression -> ( expression ) .)
    *               reduce using rule 2 (primary_expression -> ( expression ) .)
    -               reduce using rule 2 (primary_expression -> ( expression ) .)
    +               reduce using rule 2 (primary_expression -> ( expression ) .)
    SUPERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    INFERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    >               reduce using rule 2 (primary_expression -> ( expression ) .)
    <               reduce using rule 2 (primary_expression -> ( expression ) .)
    DIFFERENT       reduce using rule 2 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 2 (primary_expression -> ( expression ) .)
    ET              reduce using rule 2 (primary_expression -> ( expression ) .)
    OU              reduce using rule 2 (primary_expression -> ( expression ) .)
    ;               reduce using rule 2 (primary_expression -> ( expression ) .)
    ,               reduce using rule 2 (primary_expression -> ( expression ) .)
    )               reduce using rule 2 (primary_expression -> ( expression ) .)
    SEPARATOR       reduce using rule 2 (primary_expression -> ( expression ) .)


state 81

    (72) iteration_statement -> TANTQUE ( expression . ) statement
    (40) expression -> expression . , assignment_expression
    )               shift and go to state 112
    ,               shift and go to state 48


state 82

    (40) expression -> expression , assignment_expression .
    ;               reduce using rule 40 (expression -> expression , assignment_expression .)
    ,               reduce using rule 40 (expression -> expression , assignment_expression .)
    )               reduce using rule 40 (expression -> expression , assignment_expression .)


state 83

    (70) selection_statement -> SI ( expression . ) statement SINON statement
    (71) selection_statement -> SI ( expression . ) statement
    (40) expression -> expression . , assignment_expression
    )               shift and go to state 113
    ,               shift and go to state 48


state 84

    (49) compound_statement -> { statement_list } .
    TANTQUE         reduce using rule 49 (compound_statement -> { statement_list } .)
    SI              reduce using rule 49 (compound_statement -> { statement_list } .)
    ;               reduce using rule 49 (compound_statement -> { statement_list } .)
    {               reduce using rule 49 (compound_statement -> { statement_list } .)
    RETOURNER       reduce using rule 49 (compound_statement -> { statement_list } .)
    BOOL            reduce using rule 49 (compound_statement -> { statement_list } .)
    INT             reduce using rule 49 (compound_statement -> { statement_list } .)
    (               reduce using rule 49 (compound_statement -> { statement_list } .)
    ENTIER          reduce using rule 49 (compound_statement -> { statement_list } .)
    BOOLEAN         reduce using rule 49 (compound_statement -> { statement_list } .)
    IDENTIFIANT     reduce using rule 49 (compound_statement -> { statement_list } .)
    NON             reduce using rule 49 (compound_statement -> { statement_list } .)
    -               reduce using rule 49 (compound_statement -> { statement_list } .)
    $end            reduce using rule 49 (compound_statement -> { statement_list } .)
    }               reduce using rule 49 (compound_statement -> { statement_list } .)
    SINON           reduce using rule 49 (compound_statement -> { statement_list } .)


state 85

    (73) jump_statement -> RETOURNER expression ; .
    TANTQUE         reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    SI              reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    ;               reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    {               reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    RETOURNER       reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    BOOL            reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    INT             reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    (               reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    ENTIER          reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    BOOLEAN         reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    IDENTIFIANT     reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    NON             reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    -               reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    $end            reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    }               reduce using rule 73 (jump_statement -> RETOURNER expression ; .)
    SINON           reduce using rule 73 (jump_statement -> RETOURNER expression ; .)


state 86

    (21) additive_expression -> additive_expression - multiplicative_expression .
    (17) multiplicative_expression -> multiplicative_expression . % cast_expression
    (18) multiplicative_expression -> multiplicative_expression . / cast_expression
    (19) multiplicative_expression -> multiplicative_expression . * cast_expression
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    -               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    +               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    DIFFERENT       reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    ET              reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    OU              reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    SEPARATOR       reduce using rule 21 (additive_expression -> additive_expression - multiplicative_expression .)
    %               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 87

    (22) additive_expression -> additive_expression + multiplicative_expression .
    (17) multiplicative_expression -> multiplicative_expression . % cast_expression
    (18) multiplicative_expression -> multiplicative_expression . / cast_expression
    (19) multiplicative_expression -> multiplicative_expression . * cast_expression
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
    -               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    +               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    DIFFERENT       reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    ET              reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    OU              reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    SEPARATOR       reduce using rule 22 (additive_expression -> additive_expression + multiplicative_expression .)
    %               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 88

    (38) assignment_expression -> primary_expression assignment_operator conditional_expression .
    ;               reduce using rule 38 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    ,               reduce using rule 38 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    )               reduce using rule 38 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    SEPARATOR       reduce using rule 38 (assignment_expression -> primary_expression assignment_operator conditional_expression .)


state 89

    (34) logical_or_expression -> logical_or_expression OU logical_and_expression .
    (32) logical_and_expression -> logical_and_expression . ET equality_expression
  ! shift/reduce conflict for ET resolved as shift
    OU              reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ;               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ,               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    )               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    %               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    /               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    *               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    -               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    +               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    INFERIEUR_OU_EGAL reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    >               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    <               reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    DIFFERENT       reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    EQUAL           reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    SEPARATOR       reduce using rule 34 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ET              shift and go to state 59


state 90

    (32) logical_and_expression -> logical_and_expression ET equality_expression .
    (29) equality_expression -> equality_expression . DIFFERENT relational_expression
    (30) equality_expression -> equality_expression . EQUAL relational_expression
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    ET              reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    OU              reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ;               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ,               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    )               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    %               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    /               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    *               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    -               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    +               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    INFERIEUR_OU_EGAL reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    >               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    <               reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    SEPARATOR       reduce using rule 32 (logical_and_expression -> logical_and_expression ET equality_expression .)
    DIFFERENT       shift and go to state 60
    EQUAL           shift and go to state 61


state 91

    (29) equality_expression -> equality_expression DIFFERENT relational_expression .
    (24) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> relational_expression . > additive_expression
    (27) relational_expression -> relational_expression . < additive_expression
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    DIFFERENT       reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    EQUAL           reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ET              reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    OU              reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ;               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ,               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    )               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    %               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    /               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    *               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    -               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    +               reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SEPARATOR       reduce using rule 29 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 62
    INFERIEUR_OU_EGAL shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65


state 92

    (30) equality_expression -> equality_expression EQUAL relational_expression .
    (24) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> relational_expression . > additive_expression
    (27) relational_expression -> relational_expression . < additive_expression
  ! shift/reduce conflict for SUPERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for INFERIEUR_OU_EGAL resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
    DIFFERENT       reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    EQUAL           reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    ET              reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    OU              reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    %               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    /               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    *               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    -               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    +               reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEPARATOR       reduce using rule 30 (equality_expression -> equality_expression EQUAL relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 62
    INFERIEUR_OU_EGAL shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65


state 93

    (24) relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .
    (21) additive_expression -> additive_expression . - multiplicative_expression
    (22) additive_expression -> additive_expression . + multiplicative_expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    SUPERIEUR_OU_EGAL reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    %               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    /               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    *               reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 24 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 94

    (25) relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .
    (21) additive_expression -> additive_expression . - multiplicative_expression
    (22) additive_expression -> additive_expression . + multiplicative_expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    SUPERIEUR_OU_EGAL reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    %               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    /               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    *               reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 25 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 95

    (26) relational_expression -> relational_expression > additive_expression .
    (21) additive_expression -> additive_expression . - multiplicative_expression
    (22) additive_expression -> additive_expression . + multiplicative_expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    SUPERIEUR_OU_EGAL reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    DIFFERENT       reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    EQUAL           reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    ET              reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    OU              reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    %               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    /               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    *               reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    SEPARATOR       reduce using rule 26 (relational_expression -> relational_expression > additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 96

    (27) relational_expression -> relational_expression < additive_expression .
    (21) additive_expression -> additive_expression . - multiplicative_expression
    (22) additive_expression -> additive_expression . + multiplicative_expression
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    SUPERIEUR_OU_EGAL reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    DIFFERENT       reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    EQUAL           reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    ET              reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    OU              reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    %               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    /               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    *               reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    SEPARATOR       reduce using rule 27 (relational_expression -> relational_expression < additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 97

    (17) multiplicative_expression -> multiplicative_expression % cast_expression .
    %               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    *               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    DIFFERENT       reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ET              reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OU              reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SEPARATOR       reduce using rule 17 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 98

    (18) multiplicative_expression -> multiplicative_expression / cast_expression .
    %               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    *               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    DIFFERENT       reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ET              reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OU              reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SEPARATOR       reduce using rule 18 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 99

    (19) multiplicative_expression -> multiplicative_expression * cast_expression .
    %               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    *               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    DIFFERENT       reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ET              reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OU              reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SEPARATOR       reduce using rule 19 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 100

    (9) unary_expression -> NON BOOLEAN DIFFERENT . conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    conditional_expression         shift and go to state 114
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 101

    (10) unary_expression -> NON BOOLEAN EQUAL . conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    conditional_expression         shift and go to state 115
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 102

    (11) unary_expression -> NON BOOLEAN OU . conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    conditional_expression         shift and go to state 116
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 103

    (12) unary_expression -> NON BOOLEAN ET . conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 37
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 72
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    conditional_expression         shift and go to state 117
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 71

state 104

    (52) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (53) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 118


state 105

    (54) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt . ) compound_statement
    )               shift and go to state 119


state 106

    (55) function_declaration_statement -> type IDENTIFIANT ( ) . compound_statement
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 120

state 107

    (60) arguments_list_opt -> declarations_list .
    (61) declarations_list -> declarations_list . SEPARATOR declaration
    )               reduce using rule 60 (arguments_list_opt -> declarations_list .)
    SEPARATOR       shift and go to state 121


state 108

    (62) declarations_list -> declaration .
    SEPARATOR       reduce using rule 62 (declarations_list -> declaration .)
    )               reduce using rule 62 (declarations_list -> declaration .)


state 109

    (52) declaration -> type IDENTIFIANT AFFECT additive_expression .
    (21) additive_expression -> additive_expression . - multiplicative_expression
    (22) additive_expression -> additive_expression . + multiplicative_expression
    ;               reduce using rule 52 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    SEPARATOR       reduce using rule 52 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    )               reduce using rule 52 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 110

    (56) function_call -> IDENTIFIANT ( parameters_list_opt ) .
    %               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    /               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    *               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    -               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    +               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SUPERIEUR_OU_EGAL reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    INFERIEUR_OU_EGAL reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    >               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    <               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    DIFFERENT       reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    EQUAL           reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ET              reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    OU              reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ;               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ,               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    )               reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SEPARATOR       reduce using rule 56 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)


state 111

    (64) parameters_list -> parameters_list SEPARATOR . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    assignment_expression          shift and go to state 122
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 112

    (72) iteration_statement -> TANTQUE ( expression ) . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 123
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 113

    (70) selection_statement -> SI ( expression ) . statement SINON statement
    (71) selection_statement -> SI ( expression ) . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 124
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 114

    (9) unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .
    %               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    /               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    *               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    -               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    +               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    INFERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    >               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    <               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    DIFFERENT       reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    EQUAL           reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    ET              reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    OU              reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    ;               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    ,               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    )               reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)
    SEPARATOR       reduce using rule 9 (unary_expression -> NON BOOLEAN DIFFERENT conditional_expression .)


state 115

    (10) unary_expression -> NON BOOLEAN EQUAL conditional_expression .
    %               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    /               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    *               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    -               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    +               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    INFERIEUR_OU_EGAL reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    >               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    <               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    DIFFERENT       reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    EQUAL           reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    ET              reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    OU              reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    ;               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    ,               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    )               reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)
    SEPARATOR       reduce using rule 10 (unary_expression -> NON BOOLEAN EQUAL conditional_expression .)


state 116

    (11) unary_expression -> NON BOOLEAN OU conditional_expression .
    %               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    /               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    *               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    -               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    +               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    INFERIEUR_OU_EGAL reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    >               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    <               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    DIFFERENT       reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    EQUAL           reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    ET              reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    OU              reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    ;               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    ,               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    )               reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)
    SEPARATOR       reduce using rule 11 (unary_expression -> NON BOOLEAN OU conditional_expression .)


state 117

    (12) unary_expression -> NON BOOLEAN ET conditional_expression .
    %               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    /               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    *               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    -               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    +               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    INFERIEUR_OU_EGAL reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    >               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    <               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    DIFFERENT       reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    EQUAL           reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    ET              reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    OU              reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    ;               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    ,               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    )               reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)
    SEPARATOR       reduce using rule 12 (unary_expression -> NON BOOLEAN ET conditional_expression .)


state 118

    (52) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (53) declaration -> type IDENTIFIANT .
    AFFECT          shift and go to state 75
    SEPARATOR       reduce using rule 53 (declaration -> type IDENTIFIANT .)
    )               reduce using rule 53 (declaration -> type IDENTIFIANT .)


state 119

    (54) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) . compound_statement
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 125

state 120

    (55) function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .
    TANTQUE         reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SI              reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ;               reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    {               reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    RETOURNER       reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOL            reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    INT             reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    (               reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ENTIER          reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOLEAN         reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    IDENTIFIANT     reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    NON             reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    -               reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    $end            reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    }               reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SINON           reduce using rule 55 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)


state 121

    (61) declarations_list -> declarations_list SEPARATOR . declaration
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (58) type -> . BOOL
    (59) type -> . INT
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    declaration                    shift and go to state 126
    type                           shift and go to state 104

state 122

    (64) parameters_list -> parameters_list SEPARATOR assignment_expression .
    SEPARATOR       reduce using rule 64 (parameters_list -> parameters_list SEPARATOR assignment_expression .)
    )               reduce using rule 64 (parameters_list -> parameters_list SEPARATOR assignment_expression .)


state 123

    (72) iteration_statement -> TANTQUE ( expression ) statement .
    TANTQUE         reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    SI              reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    ;               reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    {               reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    RETOURNER       reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOL            reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    INT             reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    (               reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    ENTIER          reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOLEAN         reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    IDENTIFIANT     reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    NON             reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    -               reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    $end            reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    }               reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)
    SINON           reduce using rule 72 (iteration_statement -> TANTQUE ( expression ) statement .)


state 124

    (70) selection_statement -> SI ( expression ) statement . SINON statement
    (71) selection_statement -> SI ( expression ) statement .
  ! shift/reduce conflict for SINON resolved as shift
    SINON           shift and go to state 127
    TANTQUE         reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    SI              reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    ;               reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    {               reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    RETOURNER       reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    BOOL            reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    INT             reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    (               reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    ENTIER          reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    BOOLEAN         reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    IDENTIFIANT     reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    NON             reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    -               reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    $end            reduce using rule 71 (selection_statement -> SI ( expression ) statement .)
    }               reduce using rule 71 (selection_statement -> SI ( expression ) statement .)


state 125

    (54) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .
    TANTQUE         reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SI              reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ;               reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    {               reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    RETOURNER       reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOL            reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    INT             reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    (               reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ENTIER          reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOLEAN         reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    IDENTIFIANT     reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    NON             reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    -               reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    $end            reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    }               reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SINON           reduce using rule 54 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)


state 126

    (61) declarations_list -> declarations_list SEPARATOR declaration .
    SEPARATOR       reduce using rule 61 (declarations_list -> declarations_list SEPARATOR declaration .)
    )               reduce using rule 61 (declarations_list -> declarations_list SEPARATOR declaration .)


state 127

    (70) selection_statement -> SI ( expression ) statement SINON . statement
    (42) statement -> . function_declaration_statement
    (43) statement -> . declaration_statement
    (44) statement -> . iteration_statement
    (45) statement -> . selection_statement
    (46) statement -> . expression_statement
    (47) statement -> . compound_statement
    (48) statement -> . jump_statement
    (54) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (55) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (51) declaration_statement -> . declaration ;
    (72) iteration_statement -> . TANTQUE ( expression ) statement
    (70) selection_statement -> . SI ( expression ) statement SINON statement
    (71) selection_statement -> . SI ( expression ) statement
    (68) expression_statement -> . expression ;
    (69) expression_statement -> . ;
    (49) compound_statement -> . { statement_list }
    (50) compound_statement -> . { }
    (73) jump_statement -> . RETOURNER expression ;
    (74) jump_statement -> . RETOURNER ;
    (58) type -> . BOOL
    (59) type -> . INT
    (52) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (53) declaration -> . type IDENTIFIANT
    (40) expression -> . expression , assignment_expression
    (41) expression -> . assignment_expression
    (37) assignment_expression -> . conditional_expression
    (38) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (36) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (34) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (35) logical_or_expression -> . logical_and_expression
    (32) logical_and_expression -> . logical_and_expression ET equality_expression
    (33) logical_and_expression -> . equality_expression
    (29) equality_expression -> . equality_expression DIFFERENT relational_expression
    (30) equality_expression -> . equality_expression EQUAL relational_expression
    (31) equality_expression -> . relational_expression
    (24) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (25) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (26) relational_expression -> . relational_expression > additive_expression
    (27) relational_expression -> . relational_expression < additive_expression
    (28) relational_expression -> . additive_expression
    (21) additive_expression -> . additive_expression - multiplicative_expression
    (22) additive_expression -> . additive_expression + multiplicative_expression
    (23) additive_expression -> . multiplicative_expression
    (17) multiplicative_expression -> . multiplicative_expression % cast_expression
    (18) multiplicative_expression -> . multiplicative_expression / cast_expression
    (19) multiplicative_expression -> . multiplicative_expression * cast_expression
    (20) multiplicative_expression -> . cast_expression
    (16) cast_expression -> . unary_expression
    (8) unary_expression -> . NON conditional_expression
    (9) unary_expression -> . NON BOOLEAN DIFFERENT conditional_expression
    (10) unary_expression -> . NON BOOLEAN EQUAL conditional_expression
    (11) unary_expression -> . NON BOOLEAN OU conditional_expression
    (12) unary_expression -> . NON BOOLEAN ET conditional_expression
    (13) unary_expression -> . unary_operator cast_expression
    (14) unary_expression -> . postfix_expression
    (15) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (56) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (57) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 37
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 128
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 38
    postfix_expression             shift and go to state 39
    function_call                  shift and go to state 40

state 128

    (70) selection_statement -> SI ( expression ) statement SINON statement .
    TANTQUE         reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    SI              reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    ;               reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    {               reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    RETOURNER       reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOL            reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    INT             reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    (               reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    ENTIER          reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOLEAN         reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    IDENTIFIANT     reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    NON             reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    -               reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    $end            reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    }               reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)
    SINON           reduce using rule 70 (selection_statement -> SI ( expression ) statement SINON statement .)


Conflicts:

shift/reduce conflict for - in state 23 resolved as shift
shift/reduce conflict for + in state 23 resolved as shift
shift/reduce conflict for OU in state 27 resolved as shift
shift/reduce conflict for ET in state 30 resolved as shift
shift/reduce conflict for DIFFERENT in state 31 resolved as shift
shift/reduce conflict for EQUAL in state 31 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 32 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 32 resolved as shift
shift/reduce conflict for > in state 32 resolved as shift
shift/reduce conflict for < in state 32 resolved as shift
shift/reduce conflict for % in state 34 resolved as shift
shift/reduce conflict for / in state 34 resolved as shift
shift/reduce conflict for * in state 34 resolved as shift
shift/reduce conflict for DIFFERENT in state 70 resolved as shift
shift/reduce conflict for EQUAL in state 70 resolved as shift
shift/reduce conflict for ET in state 70 resolved as shift
shift/reduce conflict for OU in state 70 resolved as shift
shift/reduce conflict for % in state 86 resolved as shift
shift/reduce conflict for / in state 86 resolved as shift
shift/reduce conflict for * in state 86 resolved as shift
shift/reduce conflict for % in state 87 resolved as shift
shift/reduce conflict for / in state 87 resolved as shift
shift/reduce conflict for * in state 87 resolved as shift
shift/reduce conflict for ET in state 89 resolved as shift
shift/reduce conflict for DIFFERENT in state 90 resolved as shift
shift/reduce conflict for EQUAL in state 90 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 91 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 91 resolved as shift
shift/reduce conflict for > in state 91 resolved as shift
shift/reduce conflict for < in state 91 resolved as shift
shift/reduce conflict for SUPERIEUR_OU_EGAL in state 92 resolved as shift
shift/reduce conflict for INFERIEUR_OU_EGAL in state 92 resolved as shift
shift/reduce conflict for > in state 92 resolved as shift
shift/reduce conflict for < in state 92 resolved as shift
shift/reduce conflict for - in state 93 resolved as shift
shift/reduce conflict for + in state 93 resolved as shift
shift/reduce conflict for - in state 94 resolved as shift
shift/reduce conflict for + in state 94 resolved as shift
shift/reduce conflict for - in state 95 resolved as shift
shift/reduce conflict for + in state 95 resolved as shift
shift/reduce conflict for - in state 96 resolved as shift
shift/reduce conflict for + in state 96 resolved as shift
shift/reduce conflict for SINON in state 124 resolved as shift
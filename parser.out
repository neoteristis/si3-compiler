Grammar:

Rule 0     S' -> prog
Rule 1     prog -> statement_list
Rule 2     primary_expression -> ( expression )
Rule 3     primary_expression -> ENTIER
Rule 4     primary_expression -> BOOLEAN
Rule 5     primary_expression -> IDENTIFIANT
Rule 6     postfix_expression -> function_call
Rule 7     postfix_expression -> primary_expression
Rule 8     unary_expression -> unary_operator cast_expression
Rule 9     unary_expression -> postfix_expression
Rule 10    unary_operator -> -
Rule 11    cast_expression -> unary_expression
Rule 12    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 13    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 14    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 15    multiplicative_expression -> cast_expression
Rule 16    additive_expression -> additive_expression - multiplicative_expression
Rule 17    additive_expression -> additive_expression + multiplicative_expression
Rule 18    additive_expression -> multiplicative_expression
Rule 19    relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression
Rule 20    relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression
Rule 21    relational_expression -> relational_expression > additive_expression
Rule 22    relational_expression -> relational_expression < additive_expression
Rule 23    relational_expression -> additive_expression
Rule 24    equality_expression -> equality_expression DIFFERENT relational_expression
Rule 25    equality_expression -> equality_expression EQUAL relational_expression
Rule 26    equality_expression -> relational_expression
Rule 27    logical_and_expression -> logical_and_expression ET equality_expression
Rule 28    logical_and_expression -> equality_expression
Rule 29    logical_or_expression -> logical_or_expression OU logical_and_expression
Rule 30    logical_or_expression -> logical_and_expression
Rule 31    logical_not_expression -> logical_or_expression NON logical_or_expression
Rule 32    logical_not_expression -> NON logical_or_expression
Rule 33    logical_not_expression -> logical_or_expression
Rule 34    conditional_expression -> logical_not_expression
Rule 35    assignment_expression -> conditional_expression
Rule 36    assignment_expression -> primary_expression assignment_operator conditional_expression
Rule 37    assignment_operator -> AFFECT
Rule 38    expression -> expression , assignment_expression
Rule 39    expression -> assignment_expression
Rule 40    statement -> function_declaration_statement
Rule 41    statement -> declaration_statement
Rule 42    statement -> iteration_statement
Rule 43    statement -> selection_statement
Rule 44    statement -> expression_statement
Rule 45    statement -> compound_statement
Rule 46    statement -> jump_statement
Rule 47    compound_statement -> { statement_list }
Rule 48    compound_statement -> { }
Rule 49    declaration_statement -> declaration ;
Rule 50    declaration -> type IDENTIFIANT AFFECT additive_expression
Rule 51    declaration -> type IDENTIFIANT
Rule 52    function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement
Rule 53    function_declaration_statement -> type IDENTIFIANT ( ) compound_statement
Rule 54    function_call -> IDENTIFIANT ( parameters_list_opt )
Rule 55    function_call -> IDENTIFIANT ( )
Rule 56    type -> BOOL
Rule 57    type -> INT
Rule 58    arguments_list_opt -> declarations_list
Rule 59    declarations_list -> declarations_list SEPARATOR declaration
Rule 60    declarations_list -> declaration
Rule 61    parameters_list_opt -> parameters_list
Rule 62    parameters_list -> parameters_list SEPARATOR assignment_expression
Rule 63    parameters_list -> assignment_expression
Rule 64    statement_list -> statement_list statement
Rule 65    statement_list -> statement
Rule 66    expression_statement -> expression ;
Rule 67    expression_statement -> ;
Rule 68    selection_statement -> SI ( expression ) statement SINON statement
Rule 69    selection_statement -> SI ( expression ) statement
Rule 70    iteration_statement -> TANTQUE ( expression ) statement
Rule 71    jump_statement -> RETOURNER expression ;
Rule 72    jump_statement -> RETOURNER ;

Terminals, with rules where they appear:

%                    : 12
(                    : 2 52 53 54 55 68 69 70
)                    : 2 52 53 54 55 68 69 70
*                    : 14
+                    : 17
,                    : 38
-                    : 10 16
/                    : 13
;                    : 49 66 67 71 72
<                    : 22
>                    : 21
AFFECT               : 37 50
BOOL                 : 56
BOOLEAN              : 4
DIFFERENT            : 24
ENTIER               : 3
EQUAL                : 25
ET                   : 27
IDENTIFIANT          : 5 50 51 52 53 54 55
INFERIEUR_OU_EGAL    : 20
INT                  : 57
NON                  : 31 32
OU                   : 29
RETOURNER            : 71 72
SEPARATOR            : 59 62
SI                   : 68 69
SINON                : 68
SUPERIEUR_OU_EGAL    : 19
TANTQUE              : 70
error                : 
{                    : 47 48
}                    : 47 48

Nonterminals, with rules where they appear:

additive_expression  : 16 17 19 20 21 22 23 50
arguments_list_opt   : 52
assignment_expression : 38 39 62 63
assignment_operator  : 36
cast_expression      : 8 12 13 14 15
compound_statement   : 45 52 53
conditional_expression : 35 36
declaration          : 49 59 60
declaration_statement : 41
declarations_list    : 58 59
equality_expression  : 24 25 27 28
expression           : 2 38 66 68 69 70 71
expression_statement : 44
function_call        : 6
function_declaration_statement : 40
iteration_statement  : 42
jump_statement       : 46
logical_and_expression : 27 29 30
logical_not_expression : 34
logical_or_expression : 29 31 31 32 33
multiplicative_expression : 12 13 14 16 17 18
parameters_list      : 61 62
parameters_list_opt  : 54
postfix_expression   : 9
primary_expression   : 7 36
prog                 : 0
relational_expression : 19 20 21 22 24 25 26
selection_statement  : 43
statement            : 64 65 68 68 69 70
statement_list       : 1 47 64
type                 : 50 51 52 53
unary_expression     : 11
unary_operator       : 8


state 0

    (0) S' -> . prog
    (1) prog -> . statement_list
    (64) statement_list -> . statement_list statement
    (65) statement_list -> . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    prog                           shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 1

    (0) S' -> prog .


state 2

    (1) prog -> statement_list .
    (64) statement_list -> statement_list . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    $end            reduce using rule 1 (prog -> statement_list .)
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    statement                      shift and go to state 42
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 3

    (65) statement_list -> statement .
    TANTQUE         reduce using rule 65 (statement_list -> statement .)
    SI              reduce using rule 65 (statement_list -> statement .)
    ;               reduce using rule 65 (statement_list -> statement .)
    {               reduce using rule 65 (statement_list -> statement .)
    RETOURNER       reduce using rule 65 (statement_list -> statement .)
    BOOL            reduce using rule 65 (statement_list -> statement .)
    INT             reduce using rule 65 (statement_list -> statement .)
    (               reduce using rule 65 (statement_list -> statement .)
    ENTIER          reduce using rule 65 (statement_list -> statement .)
    BOOLEAN         reduce using rule 65 (statement_list -> statement .)
    IDENTIFIANT     reduce using rule 65 (statement_list -> statement .)
    NON             reduce using rule 65 (statement_list -> statement .)
    -               reduce using rule 65 (statement_list -> statement .)
    $end            reduce using rule 65 (statement_list -> statement .)
    }               reduce using rule 65 (statement_list -> statement .)


state 4

    (40) statement -> function_declaration_statement .
    TANTQUE         reduce using rule 40 (statement -> function_declaration_statement .)
    SI              reduce using rule 40 (statement -> function_declaration_statement .)
    ;               reduce using rule 40 (statement -> function_declaration_statement .)
    {               reduce using rule 40 (statement -> function_declaration_statement .)
    RETOURNER       reduce using rule 40 (statement -> function_declaration_statement .)
    BOOL            reduce using rule 40 (statement -> function_declaration_statement .)
    INT             reduce using rule 40 (statement -> function_declaration_statement .)
    (               reduce using rule 40 (statement -> function_declaration_statement .)
    ENTIER          reduce using rule 40 (statement -> function_declaration_statement .)
    BOOLEAN         reduce using rule 40 (statement -> function_declaration_statement .)
    IDENTIFIANT     reduce using rule 40 (statement -> function_declaration_statement .)
    NON             reduce using rule 40 (statement -> function_declaration_statement .)
    -               reduce using rule 40 (statement -> function_declaration_statement .)
    $end            reduce using rule 40 (statement -> function_declaration_statement .)
    }               reduce using rule 40 (statement -> function_declaration_statement .)
    SINON           reduce using rule 40 (statement -> function_declaration_statement .)


state 5

    (41) statement -> declaration_statement .
    TANTQUE         reduce using rule 41 (statement -> declaration_statement .)
    SI              reduce using rule 41 (statement -> declaration_statement .)
    ;               reduce using rule 41 (statement -> declaration_statement .)
    {               reduce using rule 41 (statement -> declaration_statement .)
    RETOURNER       reduce using rule 41 (statement -> declaration_statement .)
    BOOL            reduce using rule 41 (statement -> declaration_statement .)
    INT             reduce using rule 41 (statement -> declaration_statement .)
    (               reduce using rule 41 (statement -> declaration_statement .)
    ENTIER          reduce using rule 41 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 41 (statement -> declaration_statement .)
    IDENTIFIANT     reduce using rule 41 (statement -> declaration_statement .)
    NON             reduce using rule 41 (statement -> declaration_statement .)
    -               reduce using rule 41 (statement -> declaration_statement .)
    $end            reduce using rule 41 (statement -> declaration_statement .)
    }               reduce using rule 41 (statement -> declaration_statement .)
    SINON           reduce using rule 41 (statement -> declaration_statement .)


state 6

    (42) statement -> iteration_statement .
    TANTQUE         reduce using rule 42 (statement -> iteration_statement .)
    SI              reduce using rule 42 (statement -> iteration_statement .)
    ;               reduce using rule 42 (statement -> iteration_statement .)
    {               reduce using rule 42 (statement -> iteration_statement .)
    RETOURNER       reduce using rule 42 (statement -> iteration_statement .)
    BOOL            reduce using rule 42 (statement -> iteration_statement .)
    INT             reduce using rule 42 (statement -> iteration_statement .)
    (               reduce using rule 42 (statement -> iteration_statement .)
    ENTIER          reduce using rule 42 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 42 (statement -> iteration_statement .)
    IDENTIFIANT     reduce using rule 42 (statement -> iteration_statement .)
    NON             reduce using rule 42 (statement -> iteration_statement .)
    -               reduce using rule 42 (statement -> iteration_statement .)
    $end            reduce using rule 42 (statement -> iteration_statement .)
    }               reduce using rule 42 (statement -> iteration_statement .)
    SINON           reduce using rule 42 (statement -> iteration_statement .)


state 7

    (43) statement -> selection_statement .
    TANTQUE         reduce using rule 43 (statement -> selection_statement .)
    SI              reduce using rule 43 (statement -> selection_statement .)
    ;               reduce using rule 43 (statement -> selection_statement .)
    {               reduce using rule 43 (statement -> selection_statement .)
    RETOURNER       reduce using rule 43 (statement -> selection_statement .)
    BOOL            reduce using rule 43 (statement -> selection_statement .)
    INT             reduce using rule 43 (statement -> selection_statement .)
    (               reduce using rule 43 (statement -> selection_statement .)
    ENTIER          reduce using rule 43 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 43 (statement -> selection_statement .)
    IDENTIFIANT     reduce using rule 43 (statement -> selection_statement .)
    NON             reduce using rule 43 (statement -> selection_statement .)
    -               reduce using rule 43 (statement -> selection_statement .)
    $end            reduce using rule 43 (statement -> selection_statement .)
    }               reduce using rule 43 (statement -> selection_statement .)
    SINON           reduce using rule 43 (statement -> selection_statement .)


state 8

    (44) statement -> expression_statement .
    TANTQUE         reduce using rule 44 (statement -> expression_statement .)
    SI              reduce using rule 44 (statement -> expression_statement .)
    ;               reduce using rule 44 (statement -> expression_statement .)
    {               reduce using rule 44 (statement -> expression_statement .)
    RETOURNER       reduce using rule 44 (statement -> expression_statement .)
    BOOL            reduce using rule 44 (statement -> expression_statement .)
    INT             reduce using rule 44 (statement -> expression_statement .)
    (               reduce using rule 44 (statement -> expression_statement .)
    ENTIER          reduce using rule 44 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 44 (statement -> expression_statement .)
    IDENTIFIANT     reduce using rule 44 (statement -> expression_statement .)
    NON             reduce using rule 44 (statement -> expression_statement .)
    -               reduce using rule 44 (statement -> expression_statement .)
    $end            reduce using rule 44 (statement -> expression_statement .)
    }               reduce using rule 44 (statement -> expression_statement .)
    SINON           reduce using rule 44 (statement -> expression_statement .)


state 9

    (45) statement -> compound_statement .
    TANTQUE         reduce using rule 45 (statement -> compound_statement .)
    SI              reduce using rule 45 (statement -> compound_statement .)
    ;               reduce using rule 45 (statement -> compound_statement .)
    {               reduce using rule 45 (statement -> compound_statement .)
    RETOURNER       reduce using rule 45 (statement -> compound_statement .)
    BOOL            reduce using rule 45 (statement -> compound_statement .)
    INT             reduce using rule 45 (statement -> compound_statement .)
    (               reduce using rule 45 (statement -> compound_statement .)
    ENTIER          reduce using rule 45 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 45 (statement -> compound_statement .)
    IDENTIFIANT     reduce using rule 45 (statement -> compound_statement .)
    NON             reduce using rule 45 (statement -> compound_statement .)
    -               reduce using rule 45 (statement -> compound_statement .)
    $end            reduce using rule 45 (statement -> compound_statement .)
    }               reduce using rule 45 (statement -> compound_statement .)
    SINON           reduce using rule 45 (statement -> compound_statement .)


state 10

    (46) statement -> jump_statement .
    TANTQUE         reduce using rule 46 (statement -> jump_statement .)
    SI              reduce using rule 46 (statement -> jump_statement .)
    ;               reduce using rule 46 (statement -> jump_statement .)
    {               reduce using rule 46 (statement -> jump_statement .)
    RETOURNER       reduce using rule 46 (statement -> jump_statement .)
    BOOL            reduce using rule 46 (statement -> jump_statement .)
    INT             reduce using rule 46 (statement -> jump_statement .)
    (               reduce using rule 46 (statement -> jump_statement .)
    ENTIER          reduce using rule 46 (statement -> jump_statement .)
    BOOLEAN         reduce using rule 46 (statement -> jump_statement .)
    IDENTIFIANT     reduce using rule 46 (statement -> jump_statement .)
    NON             reduce using rule 46 (statement -> jump_statement .)
    -               reduce using rule 46 (statement -> jump_statement .)
    $end            reduce using rule 46 (statement -> jump_statement .)
    }               reduce using rule 46 (statement -> jump_statement .)
    SINON           reduce using rule 46 (statement -> jump_statement .)


state 11

    (52) function_declaration_statement -> type . IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> type . IDENTIFIANT ( ) compound_statement
    (50) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (51) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 43


state 12

    (5) primary_expression -> IDENTIFIANT .
    (54) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (55) function_call -> IDENTIFIANT . ( )
    AFFECT          reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    NON             reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    (               shift and go to state 44


state 13

    (2) primary_expression -> ( . expression )
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 45
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 14

    (49) declaration_statement -> declaration . ;
    ;               shift and go to state 46


state 15

    (67) expression_statement -> ; .
    TANTQUE         reduce using rule 67 (expression_statement -> ; .)
    SI              reduce using rule 67 (expression_statement -> ; .)
    ;               reduce using rule 67 (expression_statement -> ; .)
    {               reduce using rule 67 (expression_statement -> ; .)
    RETOURNER       reduce using rule 67 (expression_statement -> ; .)
    BOOL            reduce using rule 67 (expression_statement -> ; .)
    INT             reduce using rule 67 (expression_statement -> ; .)
    (               reduce using rule 67 (expression_statement -> ; .)
    ENTIER          reduce using rule 67 (expression_statement -> ; .)
    BOOLEAN         reduce using rule 67 (expression_statement -> ; .)
    IDENTIFIANT     reduce using rule 67 (expression_statement -> ; .)
    NON             reduce using rule 67 (expression_statement -> ; .)
    -               reduce using rule 67 (expression_statement -> ; .)
    $end            reduce using rule 67 (expression_statement -> ; .)
    }               reduce using rule 67 (expression_statement -> ; .)
    SINON           reduce using rule 67 (expression_statement -> ; .)


state 16

    (70) iteration_statement -> TANTQUE . ( expression ) statement
    (               shift and go to state 47


state 17

    (66) expression_statement -> expression . ;
    (38) expression -> expression . , assignment_expression
    ;               shift and go to state 48
    ,               shift and go to state 49


state 18

    (68) selection_statement -> SI . ( expression ) statement SINON statement
    (69) selection_statement -> SI . ( expression ) statement
    (               shift and go to state 50


state 19

    (47) compound_statement -> { . statement_list }
    (48) compound_statement -> { . }
    (64) statement_list -> . statement_list statement
    (65) statement_list -> . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 52
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    statement_list                 shift and go to state 51
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 20

    (71) jump_statement -> RETOURNER . expression ;
    (72) jump_statement -> RETOURNER . ;
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    ;               shift and go to state 54
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 53
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 21

    (56) type -> BOOL .
    IDENTIFIANT     reduce using rule 56 (type -> BOOL .)


state 22

    (57) type -> INT .
    IDENTIFIANT     reduce using rule 57 (type -> INT .)


state 23

    (23) relational_expression -> additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 23 (relational_expression -> additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 23 (relational_expression -> additive_expression .)
    >               reduce using rule 23 (relational_expression -> additive_expression .)
    <               reduce using rule 23 (relational_expression -> additive_expression .)
    DIFFERENT       reduce using rule 23 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 23 (relational_expression -> additive_expression .)
    ET              reduce using rule 23 (relational_expression -> additive_expression .)
    NON             reduce using rule 23 (relational_expression -> additive_expression .)
    OU              reduce using rule 23 (relational_expression -> additive_expression .)
    ;               reduce using rule 23 (relational_expression -> additive_expression .)
    ,               reduce using rule 23 (relational_expression -> additive_expression .)
    )               reduce using rule 23 (relational_expression -> additive_expression .)
    SEPARATOR       reduce using rule 23 (relational_expression -> additive_expression .)
    -               shift and go to state 55
    +               shift and go to state 56


state 24

    (39) expression -> assignment_expression .
    ;               reduce using rule 39 (expression -> assignment_expression .)
    ,               reduce using rule 39 (expression -> assignment_expression .)
    )               reduce using rule 39 (expression -> assignment_expression .)


state 25

    (35) assignment_expression -> conditional_expression .
    ;               reduce using rule 35 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 35 (assignment_expression -> conditional_expression .)
    )               reduce using rule 35 (assignment_expression -> conditional_expression .)
    SEPARATOR       reduce using rule 35 (assignment_expression -> conditional_expression .)


state 26

    (36) assignment_expression -> primary_expression . assignment_operator conditional_expression
    (7) postfix_expression -> primary_expression .
    (37) assignment_operator -> . AFFECT
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    NON             reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)
    AFFECT          shift and go to state 58

    assignment_operator            shift and go to state 57

state 27

    (34) conditional_expression -> logical_not_expression .
    ;               reduce using rule 34 (conditional_expression -> logical_not_expression .)
    ,               reduce using rule 34 (conditional_expression -> logical_not_expression .)
    )               reduce using rule 34 (conditional_expression -> logical_not_expression .)
    SEPARATOR       reduce using rule 34 (conditional_expression -> logical_not_expression .)


state 28

    (3) primary_expression -> ENTIER .
    AFFECT          reduce using rule 3 (primary_expression -> ENTIER .)
    %               reduce using rule 3 (primary_expression -> ENTIER .)
    /               reduce using rule 3 (primary_expression -> ENTIER .)
    *               reduce using rule 3 (primary_expression -> ENTIER .)
    -               reduce using rule 3 (primary_expression -> ENTIER .)
    +               reduce using rule 3 (primary_expression -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    >               reduce using rule 3 (primary_expression -> ENTIER .)
    <               reduce using rule 3 (primary_expression -> ENTIER .)
    DIFFERENT       reduce using rule 3 (primary_expression -> ENTIER .)
    EQUAL           reduce using rule 3 (primary_expression -> ENTIER .)
    ET              reduce using rule 3 (primary_expression -> ENTIER .)
    NON             reduce using rule 3 (primary_expression -> ENTIER .)
    OU              reduce using rule 3 (primary_expression -> ENTIER .)
    ;               reduce using rule 3 (primary_expression -> ENTIER .)
    ,               reduce using rule 3 (primary_expression -> ENTIER .)
    )               reduce using rule 3 (primary_expression -> ENTIER .)
    SEPARATOR       reduce using rule 3 (primary_expression -> ENTIER .)


state 29

    (4) primary_expression -> BOOLEAN .
    AFFECT          reduce using rule 4 (primary_expression -> BOOLEAN .)
    %               reduce using rule 4 (primary_expression -> BOOLEAN .)
    /               reduce using rule 4 (primary_expression -> BOOLEAN .)
    *               reduce using rule 4 (primary_expression -> BOOLEAN .)
    -               reduce using rule 4 (primary_expression -> BOOLEAN .)
    +               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SUPERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    INFERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    >               reduce using rule 4 (primary_expression -> BOOLEAN .)
    <               reduce using rule 4 (primary_expression -> BOOLEAN .)
    DIFFERENT       reduce using rule 4 (primary_expression -> BOOLEAN .)
    EQUAL           reduce using rule 4 (primary_expression -> BOOLEAN .)
    ET              reduce using rule 4 (primary_expression -> BOOLEAN .)
    NON             reduce using rule 4 (primary_expression -> BOOLEAN .)
    OU              reduce using rule 4 (primary_expression -> BOOLEAN .)
    ;               reduce using rule 4 (primary_expression -> BOOLEAN .)
    ,               reduce using rule 4 (primary_expression -> BOOLEAN .)
    )               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SEPARATOR       reduce using rule 4 (primary_expression -> BOOLEAN .)


state 30

    (31) logical_not_expression -> logical_or_expression . NON logical_or_expression
    (33) logical_not_expression -> logical_or_expression .
    (29) logical_or_expression -> logical_or_expression . OU logical_and_expression
    NON             shift and go to state 59
    ;               reduce using rule 33 (logical_not_expression -> logical_or_expression .)
    ,               reduce using rule 33 (logical_not_expression -> logical_or_expression .)
    )               reduce using rule 33 (logical_not_expression -> logical_or_expression .)
    SEPARATOR       reduce using rule 33 (logical_not_expression -> logical_or_expression .)
    OU              shift and go to state 60


state 31

    (32) logical_not_expression -> NON . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    logical_or_expression          shift and go to state 61
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 32

    (30) logical_or_expression -> logical_and_expression .
    (27) logical_and_expression -> logical_and_expression . ET equality_expression
    NON             reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    OU              reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    SEPARATOR       reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    ET              shift and go to state 64


state 33

    (28) logical_and_expression -> equality_expression .
    (24) equality_expression -> equality_expression . DIFFERENT relational_expression
    (25) equality_expression -> equality_expression . EQUAL relational_expression
    ET              reduce using rule 28 (logical_and_expression -> equality_expression .)
    NON             reduce using rule 28 (logical_and_expression -> equality_expression .)
    OU              reduce using rule 28 (logical_and_expression -> equality_expression .)
    ;               reduce using rule 28 (logical_and_expression -> equality_expression .)
    ,               reduce using rule 28 (logical_and_expression -> equality_expression .)
    )               reduce using rule 28 (logical_and_expression -> equality_expression .)
    SEPARATOR       reduce using rule 28 (logical_and_expression -> equality_expression .)
    DIFFERENT       shift and go to state 65
    EQUAL           shift and go to state 66


state 34

    (26) equality_expression -> relational_expression .
    (19) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . > additive_expression
    (22) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 26 (equality_expression -> relational_expression .)
    EQUAL           reduce using rule 26 (equality_expression -> relational_expression .)
    ET              reduce using rule 26 (equality_expression -> relational_expression .)
    NON             reduce using rule 26 (equality_expression -> relational_expression .)
    OU              reduce using rule 26 (equality_expression -> relational_expression .)
    ;               reduce using rule 26 (equality_expression -> relational_expression .)
    ,               reduce using rule 26 (equality_expression -> relational_expression .)
    )               reduce using rule 26 (equality_expression -> relational_expression .)
    SEPARATOR       reduce using rule 26 (equality_expression -> relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 67
    INFERIEUR_OU_EGAL shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70


state 35

    (10) unary_operator -> - .
    -               reduce using rule 10 (unary_operator -> - .)
    IDENTIFIANT     reduce using rule 10 (unary_operator -> - .)
    (               reduce using rule 10 (unary_operator -> - .)
    ENTIER          reduce using rule 10 (unary_operator -> - .)
    BOOLEAN         reduce using rule 10 (unary_operator -> - .)


state 36

    (18) additive_expression -> multiplicative_expression .
    (12) multiplicative_expression -> multiplicative_expression . % cast_expression
    (13) multiplicative_expression -> multiplicative_expression . / cast_expression
    (14) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    +               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 18 (additive_expression -> multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 18 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    DIFFERENT       reduce using rule 18 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 18 (additive_expression -> multiplicative_expression .)
    ET              reduce using rule 18 (additive_expression -> multiplicative_expression .)
    NON             reduce using rule 18 (additive_expression -> multiplicative_expression .)
    OU              reduce using rule 18 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    SEPARATOR       reduce using rule 18 (additive_expression -> multiplicative_expression .)
    %               shift and go to state 71
    /               shift and go to state 72
    *               shift and go to state 73


state 37

    (15) multiplicative_expression -> cast_expression .
    %               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    *               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 15 (multiplicative_expression -> cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 15 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    DIFFERENT       reduce using rule 15 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 15 (multiplicative_expression -> cast_expression .)
    ET              reduce using rule 15 (multiplicative_expression -> cast_expression .)
    NON             reduce using rule 15 (multiplicative_expression -> cast_expression .)
    OU              reduce using rule 15 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    SEPARATOR       reduce using rule 15 (multiplicative_expression -> cast_expression .)


state 38

    (11) cast_expression -> unary_expression .
    %               reduce using rule 11 (cast_expression -> unary_expression .)
    /               reduce using rule 11 (cast_expression -> unary_expression .)
    *               reduce using rule 11 (cast_expression -> unary_expression .)
    -               reduce using rule 11 (cast_expression -> unary_expression .)
    +               reduce using rule 11 (cast_expression -> unary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 11 (cast_expression -> unary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 11 (cast_expression -> unary_expression .)
    >               reduce using rule 11 (cast_expression -> unary_expression .)
    <               reduce using rule 11 (cast_expression -> unary_expression .)
    DIFFERENT       reduce using rule 11 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 11 (cast_expression -> unary_expression .)
    ET              reduce using rule 11 (cast_expression -> unary_expression .)
    NON             reduce using rule 11 (cast_expression -> unary_expression .)
    OU              reduce using rule 11 (cast_expression -> unary_expression .)
    ;               reduce using rule 11 (cast_expression -> unary_expression .)
    ,               reduce using rule 11 (cast_expression -> unary_expression .)
    )               reduce using rule 11 (cast_expression -> unary_expression .)
    SEPARATOR       reduce using rule 11 (cast_expression -> unary_expression .)


state 39

    (8) unary_expression -> unary_operator . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    unary_operator                 shift and go to state 39
    cast_expression                shift and go to state 74
    unary_expression               shift and go to state 38
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 40

    (9) unary_expression -> postfix_expression .
    %               reduce using rule 9 (unary_expression -> postfix_expression .)
    /               reduce using rule 9 (unary_expression -> postfix_expression .)
    *               reduce using rule 9 (unary_expression -> postfix_expression .)
    -               reduce using rule 9 (unary_expression -> postfix_expression .)
    +               reduce using rule 9 (unary_expression -> postfix_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> postfix_expression .)
    INFERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> postfix_expression .)
    >               reduce using rule 9 (unary_expression -> postfix_expression .)
    <               reduce using rule 9 (unary_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 9 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 9 (unary_expression -> postfix_expression .)
    ET              reduce using rule 9 (unary_expression -> postfix_expression .)
    NON             reduce using rule 9 (unary_expression -> postfix_expression .)
    OU              reduce using rule 9 (unary_expression -> postfix_expression .)
    ;               reduce using rule 9 (unary_expression -> postfix_expression .)
    ,               reduce using rule 9 (unary_expression -> postfix_expression .)
    )               reduce using rule 9 (unary_expression -> postfix_expression .)
    SEPARATOR       reduce using rule 9 (unary_expression -> postfix_expression .)


state 41

    (6) postfix_expression -> function_call .
    %               reduce using rule 6 (postfix_expression -> function_call .)
    /               reduce using rule 6 (postfix_expression -> function_call .)
    *               reduce using rule 6 (postfix_expression -> function_call .)
    -               reduce using rule 6 (postfix_expression -> function_call .)
    +               reduce using rule 6 (postfix_expression -> function_call .)
    SUPERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    INFERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    >               reduce using rule 6 (postfix_expression -> function_call .)
    <               reduce using rule 6 (postfix_expression -> function_call .)
    DIFFERENT       reduce using rule 6 (postfix_expression -> function_call .)
    EQUAL           reduce using rule 6 (postfix_expression -> function_call .)
    ET              reduce using rule 6 (postfix_expression -> function_call .)
    NON             reduce using rule 6 (postfix_expression -> function_call .)
    OU              reduce using rule 6 (postfix_expression -> function_call .)
    ;               reduce using rule 6 (postfix_expression -> function_call .)
    ,               reduce using rule 6 (postfix_expression -> function_call .)
    )               reduce using rule 6 (postfix_expression -> function_call .)
    SEPARATOR       reduce using rule 6 (postfix_expression -> function_call .)


state 42

    (64) statement_list -> statement_list statement .
    TANTQUE         reduce using rule 64 (statement_list -> statement_list statement .)
    SI              reduce using rule 64 (statement_list -> statement_list statement .)
    ;               reduce using rule 64 (statement_list -> statement_list statement .)
    {               reduce using rule 64 (statement_list -> statement_list statement .)
    RETOURNER       reduce using rule 64 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 64 (statement_list -> statement_list statement .)
    INT             reduce using rule 64 (statement_list -> statement_list statement .)
    (               reduce using rule 64 (statement_list -> statement_list statement .)
    ENTIER          reduce using rule 64 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 64 (statement_list -> statement_list statement .)
    IDENTIFIANT     reduce using rule 64 (statement_list -> statement_list statement .)
    NON             reduce using rule 64 (statement_list -> statement_list statement .)
    -               reduce using rule 64 (statement_list -> statement_list statement .)
    $end            reduce using rule 64 (statement_list -> statement_list statement .)
    }               reduce using rule 64 (statement_list -> statement_list statement .)


state 43

    (52) function_declaration_statement -> type IDENTIFIANT . ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> type IDENTIFIANT . ( ) compound_statement
    (50) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (51) declaration -> type IDENTIFIANT .
    (               shift and go to state 75
    AFFECT          shift and go to state 76
    ;               reduce using rule 51 (declaration -> type IDENTIFIANT .)


state 44

    (54) function_call -> IDENTIFIANT ( . parameters_list_opt )
    (55) function_call -> IDENTIFIANT ( . )
    (61) parameters_list_opt -> . parameters_list
    (62) parameters_list -> . parameters_list SEPARATOR assignment_expression
    (63) parameters_list -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    )               shift and go to state 78
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    parameters_list_opt            shift and go to state 77
    parameters_list                shift and go to state 79
    assignment_expression          shift and go to state 80
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 45

    (2) primary_expression -> ( expression . )
    (38) expression -> expression . , assignment_expression
    )               shift and go to state 81
    ,               shift and go to state 49


state 46

    (49) declaration_statement -> declaration ; .
    TANTQUE         reduce using rule 49 (declaration_statement -> declaration ; .)
    SI              reduce using rule 49 (declaration_statement -> declaration ; .)
    ;               reduce using rule 49 (declaration_statement -> declaration ; .)
    {               reduce using rule 49 (declaration_statement -> declaration ; .)
    RETOURNER       reduce using rule 49 (declaration_statement -> declaration ; .)
    BOOL            reduce using rule 49 (declaration_statement -> declaration ; .)
    INT             reduce using rule 49 (declaration_statement -> declaration ; .)
    (               reduce using rule 49 (declaration_statement -> declaration ; .)
    ENTIER          reduce using rule 49 (declaration_statement -> declaration ; .)
    BOOLEAN         reduce using rule 49 (declaration_statement -> declaration ; .)
    IDENTIFIANT     reduce using rule 49 (declaration_statement -> declaration ; .)
    NON             reduce using rule 49 (declaration_statement -> declaration ; .)
    -               reduce using rule 49 (declaration_statement -> declaration ; .)
    $end            reduce using rule 49 (declaration_statement -> declaration ; .)
    }               reduce using rule 49 (declaration_statement -> declaration ; .)
    SINON           reduce using rule 49 (declaration_statement -> declaration ; .)


state 47

    (70) iteration_statement -> TANTQUE ( . expression ) statement
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 82
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 48

    (66) expression_statement -> expression ; .
    TANTQUE         reduce using rule 66 (expression_statement -> expression ; .)
    SI              reduce using rule 66 (expression_statement -> expression ; .)
    ;               reduce using rule 66 (expression_statement -> expression ; .)
    {               reduce using rule 66 (expression_statement -> expression ; .)
    RETOURNER       reduce using rule 66 (expression_statement -> expression ; .)
    BOOL            reduce using rule 66 (expression_statement -> expression ; .)
    INT             reduce using rule 66 (expression_statement -> expression ; .)
    (               reduce using rule 66 (expression_statement -> expression ; .)
    ENTIER          reduce using rule 66 (expression_statement -> expression ; .)
    BOOLEAN         reduce using rule 66 (expression_statement -> expression ; .)
    IDENTIFIANT     reduce using rule 66 (expression_statement -> expression ; .)
    NON             reduce using rule 66 (expression_statement -> expression ; .)
    -               reduce using rule 66 (expression_statement -> expression ; .)
    $end            reduce using rule 66 (expression_statement -> expression ; .)
    }               reduce using rule 66 (expression_statement -> expression ; .)
    SINON           reduce using rule 66 (expression_statement -> expression ; .)


state 49

    (38) expression -> expression , . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    assignment_expression          shift and go to state 83
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 50

    (68) selection_statement -> SI ( . expression ) statement SINON statement
    (69) selection_statement -> SI ( . expression ) statement
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 84
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 51

    (47) compound_statement -> { statement_list . }
    (64) statement_list -> statement_list . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 85
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    statement                      shift and go to state 42
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 52

    (48) compound_statement -> { } .
    TANTQUE         reduce using rule 48 (compound_statement -> { } .)
    SI              reduce using rule 48 (compound_statement -> { } .)
    ;               reduce using rule 48 (compound_statement -> { } .)
    {               reduce using rule 48 (compound_statement -> { } .)
    RETOURNER       reduce using rule 48 (compound_statement -> { } .)
    BOOL            reduce using rule 48 (compound_statement -> { } .)
    INT             reduce using rule 48 (compound_statement -> { } .)
    (               reduce using rule 48 (compound_statement -> { } .)
    ENTIER          reduce using rule 48 (compound_statement -> { } .)
    BOOLEAN         reduce using rule 48 (compound_statement -> { } .)
    IDENTIFIANT     reduce using rule 48 (compound_statement -> { } .)
    NON             reduce using rule 48 (compound_statement -> { } .)
    -               reduce using rule 48 (compound_statement -> { } .)
    $end            reduce using rule 48 (compound_statement -> { } .)
    }               reduce using rule 48 (compound_statement -> { } .)
    SINON           reduce using rule 48 (compound_statement -> { } .)


state 53

    (71) jump_statement -> RETOURNER expression . ;
    (38) expression -> expression . , assignment_expression
    ;               shift and go to state 86
    ,               shift and go to state 49


state 54

    (72) jump_statement -> RETOURNER ; .
    TANTQUE         reduce using rule 72 (jump_statement -> RETOURNER ; .)
    SI              reduce using rule 72 (jump_statement -> RETOURNER ; .)
    ;               reduce using rule 72 (jump_statement -> RETOURNER ; .)
    {               reduce using rule 72 (jump_statement -> RETOURNER ; .)
    RETOURNER       reduce using rule 72 (jump_statement -> RETOURNER ; .)
    BOOL            reduce using rule 72 (jump_statement -> RETOURNER ; .)
    INT             reduce using rule 72 (jump_statement -> RETOURNER ; .)
    (               reduce using rule 72 (jump_statement -> RETOURNER ; .)
    ENTIER          reduce using rule 72 (jump_statement -> RETOURNER ; .)
    BOOLEAN         reduce using rule 72 (jump_statement -> RETOURNER ; .)
    IDENTIFIANT     reduce using rule 72 (jump_statement -> RETOURNER ; .)
    NON             reduce using rule 72 (jump_statement -> RETOURNER ; .)
    -               reduce using rule 72 (jump_statement -> RETOURNER ; .)
    $end            reduce using rule 72 (jump_statement -> RETOURNER ; .)
    }               reduce using rule 72 (jump_statement -> RETOURNER ; .)
    SINON           reduce using rule 72 (jump_statement -> RETOURNER ; .)


state 55

    (16) additive_expression -> additive_expression - . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 87
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 56

    (17) additive_expression -> additive_expression + . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 57

    (36) assignment_expression -> primary_expression assignment_operator . conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 31
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    primary_expression             shift and go to state 62
    conditional_expression         shift and go to state 89
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 58

    (37) assignment_operator -> AFFECT .
    NON             reduce using rule 37 (assignment_operator -> AFFECT .)
    -               reduce using rule 37 (assignment_operator -> AFFECT .)
    IDENTIFIANT     reduce using rule 37 (assignment_operator -> AFFECT .)
    (               reduce using rule 37 (assignment_operator -> AFFECT .)
    ENTIER          reduce using rule 37 (assignment_operator -> AFFECT .)
    BOOLEAN         reduce using rule 37 (assignment_operator -> AFFECT .)


state 59

    (31) logical_not_expression -> logical_or_expression NON . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    logical_or_expression          shift and go to state 90
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 60

    (29) logical_or_expression -> logical_or_expression OU . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    logical_and_expression         shift and go to state 91
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 61

    (32) logical_not_expression -> NON logical_or_expression .
    (29) logical_or_expression -> logical_or_expression . OU logical_and_expression
    ;               reduce using rule 32 (logical_not_expression -> NON logical_or_expression .)
    ,               reduce using rule 32 (logical_not_expression -> NON logical_or_expression .)
    )               reduce using rule 32 (logical_not_expression -> NON logical_or_expression .)
    SEPARATOR       reduce using rule 32 (logical_not_expression -> NON logical_or_expression .)
    OU              shift and go to state 60


state 62

    (7) postfix_expression -> primary_expression .
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)
    NON             reduce using rule 7 (postfix_expression -> primary_expression .)


state 63

    (54) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (55) function_call -> IDENTIFIANT . ( )
    (5) primary_expression -> IDENTIFIANT .
    (               shift and go to state 44
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    NON             reduce using rule 5 (primary_expression -> IDENTIFIANT .)


state 64

    (27) logical_and_expression -> logical_and_expression ET . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    equality_expression            shift and go to state 92
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 65

    (24) equality_expression -> equality_expression DIFFERENT . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 93
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 66

    (25) equality_expression -> equality_expression EQUAL . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 94
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 67

    (19) relational_expression -> relational_expression SUPERIEUR_OU_EGAL . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 95
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 68

    (20) relational_expression -> relational_expression INFERIEUR_OU_EGAL . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 69

    (21) relational_expression -> relational_expression > . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 97
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 70

    (22) relational_expression -> relational_expression < . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 98
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 71

    (12) multiplicative_expression -> multiplicative_expression % . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 99
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 72

    (13) multiplicative_expression -> multiplicative_expression / . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 100
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 73

    (14) multiplicative_expression -> multiplicative_expression * . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 101
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 74

    (8) unary_expression -> unary_operator cast_expression .
    %               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    DIFFERENT       reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ET              reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    NON             reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    OU              reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    SEPARATOR       reduce using rule 8 (unary_expression -> unary_operator cast_expression .)


state 75

    (52) function_declaration_statement -> type IDENTIFIANT ( . arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> type IDENTIFIANT ( . ) compound_statement
    (58) arguments_list_opt -> . declarations_list
    (59) declarations_list -> . declarations_list SEPARATOR declaration
    (60) declarations_list -> . declaration
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (56) type -> . BOOL
    (57) type -> . INT
    )               shift and go to state 104
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    type                           shift and go to state 102
    arguments_list_opt             shift and go to state 103
    declarations_list              shift and go to state 105
    declaration                    shift and go to state 106

state 76

    (50) declaration -> type IDENTIFIANT AFFECT . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 35
    IDENTIFIANT     shift and go to state 63
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 107
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41
    primary_expression             shift and go to state 62

state 77

    (54) function_call -> IDENTIFIANT ( parameters_list_opt . )
    )               shift and go to state 108


state 78

    (55) function_call -> IDENTIFIANT ( ) .
    %               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    /               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    *               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    -               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    +               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    SUPERIEUR_OU_EGAL reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    INFERIEUR_OU_EGAL reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    >               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    <               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    DIFFERENT       reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    EQUAL           reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    ET              reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    NON             reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    OU              reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    ;               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    ,               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    )               reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)
    SEPARATOR       reduce using rule 55 (function_call -> IDENTIFIANT ( ) .)


state 79

    (61) parameters_list_opt -> parameters_list .
    (62) parameters_list -> parameters_list . SEPARATOR assignment_expression
    )               reduce using rule 61 (parameters_list_opt -> parameters_list .)
    SEPARATOR       shift and go to state 109


state 80

    (63) parameters_list -> assignment_expression .
    SEPARATOR       reduce using rule 63 (parameters_list -> assignment_expression .)
    )               reduce using rule 63 (parameters_list -> assignment_expression .)


state 81

    (2) primary_expression -> ( expression ) .
    AFFECT          reduce using rule 2 (primary_expression -> ( expression ) .)
    %               reduce using rule 2 (primary_expression -> ( expression ) .)
    /               reduce using rule 2 (primary_expression -> ( expression ) .)
    *               reduce using rule 2 (primary_expression -> ( expression ) .)
    -               reduce using rule 2 (primary_expression -> ( expression ) .)
    +               reduce using rule 2 (primary_expression -> ( expression ) .)
    SUPERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    INFERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    >               reduce using rule 2 (primary_expression -> ( expression ) .)
    <               reduce using rule 2 (primary_expression -> ( expression ) .)
    DIFFERENT       reduce using rule 2 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 2 (primary_expression -> ( expression ) .)
    ET              reduce using rule 2 (primary_expression -> ( expression ) .)
    NON             reduce using rule 2 (primary_expression -> ( expression ) .)
    OU              reduce using rule 2 (primary_expression -> ( expression ) .)
    ;               reduce using rule 2 (primary_expression -> ( expression ) .)
    ,               reduce using rule 2 (primary_expression -> ( expression ) .)
    )               reduce using rule 2 (primary_expression -> ( expression ) .)
    SEPARATOR       reduce using rule 2 (primary_expression -> ( expression ) .)


state 82

    (70) iteration_statement -> TANTQUE ( expression . ) statement
    (38) expression -> expression . , assignment_expression
    )               shift and go to state 110
    ,               shift and go to state 49


state 83

    (38) expression -> expression , assignment_expression .
    ;               reduce using rule 38 (expression -> expression , assignment_expression .)
    ,               reduce using rule 38 (expression -> expression , assignment_expression .)
    )               reduce using rule 38 (expression -> expression , assignment_expression .)


state 84

    (68) selection_statement -> SI ( expression . ) statement SINON statement
    (69) selection_statement -> SI ( expression . ) statement
    (38) expression -> expression . , assignment_expression
    )               shift and go to state 111
    ,               shift and go to state 49


state 85

    (47) compound_statement -> { statement_list } .
    TANTQUE         reduce using rule 47 (compound_statement -> { statement_list } .)
    SI              reduce using rule 47 (compound_statement -> { statement_list } .)
    ;               reduce using rule 47 (compound_statement -> { statement_list } .)
    {               reduce using rule 47 (compound_statement -> { statement_list } .)
    RETOURNER       reduce using rule 47 (compound_statement -> { statement_list } .)
    BOOL            reduce using rule 47 (compound_statement -> { statement_list } .)
    INT             reduce using rule 47 (compound_statement -> { statement_list } .)
    (               reduce using rule 47 (compound_statement -> { statement_list } .)
    ENTIER          reduce using rule 47 (compound_statement -> { statement_list } .)
    BOOLEAN         reduce using rule 47 (compound_statement -> { statement_list } .)
    IDENTIFIANT     reduce using rule 47 (compound_statement -> { statement_list } .)
    NON             reduce using rule 47 (compound_statement -> { statement_list } .)
    -               reduce using rule 47 (compound_statement -> { statement_list } .)
    $end            reduce using rule 47 (compound_statement -> { statement_list } .)
    }               reduce using rule 47 (compound_statement -> { statement_list } .)
    SINON           reduce using rule 47 (compound_statement -> { statement_list } .)


state 86

    (71) jump_statement -> RETOURNER expression ; .
    TANTQUE         reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    SI              reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    ;               reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    {               reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    RETOURNER       reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    BOOL            reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    INT             reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    (               reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    ENTIER          reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    BOOLEAN         reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    IDENTIFIANT     reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    NON             reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    -               reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    $end            reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    }               reduce using rule 71 (jump_statement -> RETOURNER expression ; .)
    SINON           reduce using rule 71 (jump_statement -> RETOURNER expression ; .)


state 87

    (16) additive_expression -> additive_expression - multiplicative_expression .
    (12) multiplicative_expression -> multiplicative_expression . % cast_expression
    (13) multiplicative_expression -> multiplicative_expression . / cast_expression
    (14) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    +               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    DIFFERENT       reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    ET              reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    NON             reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    OU              reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    SEPARATOR       reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    %               shift and go to state 71
    /               shift and go to state 72
    *               shift and go to state 73


state 88

    (17) additive_expression -> additive_expression + multiplicative_expression .
    (12) multiplicative_expression -> multiplicative_expression . % cast_expression
    (13) multiplicative_expression -> multiplicative_expression . / cast_expression
    (14) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    +               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    DIFFERENT       reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    ET              reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    NON             reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    OU              reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    SEPARATOR       reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    %               shift and go to state 71
    /               shift and go to state 72
    *               shift and go to state 73


state 89

    (36) assignment_expression -> primary_expression assignment_operator conditional_expression .
    ;               reduce using rule 36 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    ,               reduce using rule 36 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    )               reduce using rule 36 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    SEPARATOR       reduce using rule 36 (assignment_expression -> primary_expression assignment_operator conditional_expression .)


state 90

    (31) logical_not_expression -> logical_or_expression NON logical_or_expression .
    (29) logical_or_expression -> logical_or_expression . OU logical_and_expression
    ;               reduce using rule 31 (logical_not_expression -> logical_or_expression NON logical_or_expression .)
    ,               reduce using rule 31 (logical_not_expression -> logical_or_expression NON logical_or_expression .)
    )               reduce using rule 31 (logical_not_expression -> logical_or_expression NON logical_or_expression .)
    SEPARATOR       reduce using rule 31 (logical_not_expression -> logical_or_expression NON logical_or_expression .)
    OU              shift and go to state 60


state 91

    (29) logical_or_expression -> logical_or_expression OU logical_and_expression .
    (27) logical_and_expression -> logical_and_expression . ET equality_expression
    NON             reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    OU              reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ;               reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ,               reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    )               reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    SEPARATOR       reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ET              shift and go to state 64


state 92

    (27) logical_and_expression -> logical_and_expression ET equality_expression .
    (24) equality_expression -> equality_expression . DIFFERENT relational_expression
    (25) equality_expression -> equality_expression . EQUAL relational_expression
    ET              reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    NON             reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    OU              reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ;               reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ,               reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    )               reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    SEPARATOR       reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    DIFFERENT       shift and go to state 65
    EQUAL           shift and go to state 66


state 93

    (24) equality_expression -> equality_expression DIFFERENT relational_expression .
    (19) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . > additive_expression
    (22) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    EQUAL           reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ET              reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    NON             reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    OU              reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ;               reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ,               reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    )               reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SEPARATOR       reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 67
    INFERIEUR_OU_EGAL shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70


state 94

    (25) equality_expression -> equality_expression EQUAL relational_expression .
    (19) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . > additive_expression
    (22) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    EQUAL           reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    ET              reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    NON             reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    OU              reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEPARATOR       reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 67
    INFERIEUR_OU_EGAL shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70


state 95

    (19) relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    NON             reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 55
    +               shift and go to state 56


state 96

    (20) relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    NON             reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 55
    +               shift and go to state 56


state 97

    (21) relational_expression -> relational_expression > additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    DIFFERENT       reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    EQUAL           reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    ET              reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    NON             reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    OU              reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    SEPARATOR       reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    -               shift and go to state 55
    +               shift and go to state 56


state 98

    (22) relational_expression -> relational_expression < additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    DIFFERENT       reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    EQUAL           reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    ET              reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    NON             reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    OU              reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    SEPARATOR       reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    -               shift and go to state 55
    +               shift and go to state 56


state 99

    (12) multiplicative_expression -> multiplicative_expression % cast_expression .
    %               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    *               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    DIFFERENT       reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ET              reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NON             reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OU              reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SEPARATOR       reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 100

    (13) multiplicative_expression -> multiplicative_expression / cast_expression .
    %               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    *               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    DIFFERENT       reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ET              reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NON             reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OU              reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SEPARATOR       reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 101

    (14) multiplicative_expression -> multiplicative_expression * cast_expression .
    %               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    *               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    DIFFERENT       reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ET              reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NON             reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OU              reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SEPARATOR       reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 102

    (50) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (51) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 112


state 103

    (52) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt . ) compound_statement
    )               shift and go to state 113


state 104

    (53) function_declaration_statement -> type IDENTIFIANT ( ) . compound_statement
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 114

state 105

    (58) arguments_list_opt -> declarations_list .
    (59) declarations_list -> declarations_list . SEPARATOR declaration
    )               reduce using rule 58 (arguments_list_opt -> declarations_list .)
    SEPARATOR       shift and go to state 115


state 106

    (60) declarations_list -> declaration .
    SEPARATOR       reduce using rule 60 (declarations_list -> declaration .)
    )               reduce using rule 60 (declarations_list -> declaration .)


state 107

    (50) declaration -> type IDENTIFIANT AFFECT additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    ;               reduce using rule 50 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    SEPARATOR       reduce using rule 50 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    )               reduce using rule 50 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    -               shift and go to state 55
    +               shift and go to state 56


state 108

    (54) function_call -> IDENTIFIANT ( parameters_list_opt ) .
    %               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    /               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    *               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    -               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    +               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SUPERIEUR_OU_EGAL reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    INFERIEUR_OU_EGAL reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    >               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    <               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    DIFFERENT       reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    EQUAL           reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ET              reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    NON             reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    OU              reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ;               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ,               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    )               reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SEPARATOR       reduce using rule 54 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)


state 109

    (62) parameters_list -> parameters_list SEPARATOR . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    assignment_expression          shift and go to state 116
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 110

    (70) iteration_statement -> TANTQUE ( expression ) . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 17
    statement                      shift and go to state 117
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 111

    (68) selection_statement -> SI ( expression ) . statement SINON statement
    (69) selection_statement -> SI ( expression ) . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 17
    statement                      shift and go to state 118
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 112

    (50) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (51) declaration -> type IDENTIFIANT .
    AFFECT          shift and go to state 76
    SEPARATOR       reduce using rule 51 (declaration -> type IDENTIFIANT .)
    )               reduce using rule 51 (declaration -> type IDENTIFIANT .)


state 113

    (52) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) . compound_statement
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 119

state 114

    (53) function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .
    TANTQUE         reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SI              reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ;               reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    {               reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    RETOURNER       reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOL            reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    INT             reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    (               reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ENTIER          reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOLEAN         reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    IDENTIFIANT     reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    NON             reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    -               reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    $end            reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    }               reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SINON           reduce using rule 53 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)


state 115

    (59) declarations_list -> declarations_list SEPARATOR . declaration
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (56) type -> . BOOL
    (57) type -> . INT
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    declaration                    shift and go to state 120
    type                           shift and go to state 102

state 116

    (62) parameters_list -> parameters_list SEPARATOR assignment_expression .
    SEPARATOR       reduce using rule 62 (parameters_list -> parameters_list SEPARATOR assignment_expression .)
    )               reduce using rule 62 (parameters_list -> parameters_list SEPARATOR assignment_expression .)


state 117

    (70) iteration_statement -> TANTQUE ( expression ) statement .
    TANTQUE         reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    SI              reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    ;               reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    {               reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    RETOURNER       reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOL            reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    INT             reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    (               reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    ENTIER          reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOLEAN         reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    IDENTIFIANT     reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    NON             reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    -               reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    $end            reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    }               reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)
    SINON           reduce using rule 70 (iteration_statement -> TANTQUE ( expression ) statement .)


state 118

    (68) selection_statement -> SI ( expression ) statement . SINON statement
    (69) selection_statement -> SI ( expression ) statement .
  ! shift/reduce conflict for SINON resolved as shift
    SINON           shift and go to state 121
    TANTQUE         reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    SI              reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    ;               reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    {               reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    RETOURNER       reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    BOOL            reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    INT             reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    (               reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    ENTIER          reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    BOOLEAN         reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    IDENTIFIANT     reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    NON             reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    -               reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    $end            reduce using rule 69 (selection_statement -> SI ( expression ) statement .)
    }               reduce using rule 69 (selection_statement -> SI ( expression ) statement .)


state 119

    (52) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .
    TANTQUE         reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SI              reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ;               reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    {               reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    RETOURNER       reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOL            reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    INT             reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    (               reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ENTIER          reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOLEAN         reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    IDENTIFIANT     reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    NON             reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    -               reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    $end            reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    }               reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SINON           reduce using rule 52 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)


state 120

    (59) declarations_list -> declarations_list SEPARATOR declaration .
    SEPARATOR       reduce using rule 59 (declarations_list -> declarations_list SEPARATOR declaration .)
    )               reduce using rule 59 (declarations_list -> declarations_list SEPARATOR declaration .)


state 121

    (68) selection_statement -> SI ( expression ) statement SINON . statement
    (40) statement -> . function_declaration_statement
    (41) statement -> . declaration_statement
    (42) statement -> . iteration_statement
    (43) statement -> . selection_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . jump_statement
    (52) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (53) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (49) declaration_statement -> . declaration ;
    (70) iteration_statement -> . TANTQUE ( expression ) statement
    (68) selection_statement -> . SI ( expression ) statement SINON statement
    (69) selection_statement -> . SI ( expression ) statement
    (66) expression_statement -> . expression ;
    (67) expression_statement -> . ;
    (47) compound_statement -> . { statement_list }
    (48) compound_statement -> . { }
    (71) jump_statement -> . RETOURNER expression ;
    (72) jump_statement -> . RETOURNER ;
    (56) type -> . BOOL
    (57) type -> . INT
    (50) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (51) declaration -> . type IDENTIFIANT
    (38) expression -> . expression , assignment_expression
    (39) expression -> . assignment_expression
    (35) assignment_expression -> . conditional_expression
    (36) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (34) conditional_expression -> . logical_not_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (31) logical_not_expression -> . logical_or_expression NON logical_or_expression
    (32) logical_not_expression -> . NON logical_or_expression
    (33) logical_not_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (54) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (55) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 31
    -               shift and go to state 35

    expression                     shift and go to state 17
    statement                      shift and go to state 122
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_not_expression         shift and go to state 27
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 32
    equality_expression            shift and go to state 33
    relational_expression          shift and go to state 34
    multiplicative_expression      shift and go to state 36
    cast_expression                shift and go to state 37
    unary_expression               shift and go to state 38
    unary_operator                 shift and go to state 39
    postfix_expression             shift and go to state 40
    function_call                  shift and go to state 41

state 122

    (68) selection_statement -> SI ( expression ) statement SINON statement .
    TANTQUE         reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    SI              reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    ;               reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    {               reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    RETOURNER       reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOL            reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    INT             reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    (               reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    ENTIER          reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOLEAN         reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    IDENTIFIANT     reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    NON             reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    -               reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    $end            reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    }               reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)
    SINON           reduce using rule 68 (selection_statement -> SI ( expression ) statement SINON statement .)


Conflicts:

shift/reduce conflict for SINON in state 118 resolved as shift
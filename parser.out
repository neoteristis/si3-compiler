Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     expr -> produit
Rule 7     expr -> expr - produit
Rule 8     expr -> expr + produit
Rule 9     facteur -> ENTIER
Rule 10    facteur -> ( expr )
Rule 11    facteur -> - facteur
Rule 12    produit -> facteur
Rule 13    produit -> produit % facteur
Rule 14    produit -> produit / facteur
Rule 15    produit -> produit * facteur

Unused terminals:

    DIFFERENT
    OU
    SI
    SINON
    RETOURNER
    EQUAL
    SEPARATOR
    BOOLEAN
    INFERIEUR_OU_EGAL
    IDENTIFIANT
    TANTQUE
    NON
    ET
    AFFECT
    SUPERIEUR_OU_EGAL
    LIRE

Terminals, with rules where they appear:

%                    : 13
(                    : 5 10
)                    : 5 10
*                    : 15
+                    : 8
-                    : 7 11
/                    : 14
;                    : 5
AFFECT               : 
BOOLEAN              : 
DIFFERENT            : 
ECRIRE               : 5
ENTIER               : 9
EQUAL                : 
ET                   : 
IDENTIFIANT          : 
INFERIEUR_OU_EGAL    : 
LIRE                 : 
NON                  : 
OU                   : 
RETOURNER            : 
SEPARATOR            : 
SI                   : 
SINON                : 
SUPERIEUR_OU_EGAL    : 
TANTQUE              : 
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 7 8 10
facteur              : 11 12 13 14 15
instruction          : 2 3
listeInstructions    : 1 2
produit              : 6 7 8 13 14 15
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (6) expr -> . produit
    (7) expr -> . expr - produit
    (8) expr -> . expr + produit
    (12) produit -> . facteur
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    expr                           shift and go to state 9
    produit                        shift and go to state 10
    facteur                        shift and go to state 12

state 8

    (10) facteur -> ( . expr )
    (6) expr -> . produit
    (7) expr -> . expr - produit
    (8) expr -> . expr + produit
    (12) produit -> . facteur
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    expr                           shift and go to state 14
    produit                        shift and go to state 10
    facteur                        shift and go to state 12

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (7) expr -> expr . - produit
    (8) expr -> expr . + produit
    )               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17


state 10

    (6) expr -> produit .
    (13) produit -> produit . % facteur
    (14) produit -> produit . / facteur
    (15) produit -> produit . * facteur
    )               reduce using rule 6 (expr -> produit .)
    -               reduce using rule 6 (expr -> produit .)
    +               reduce using rule 6 (expr -> produit .)
    %               shift and go to state 18
    /               shift and go to state 19
    *               shift and go to state 20


state 11

    (11) facteur -> - . facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    facteur                        shift and go to state 21

state 12

    (12) produit -> facteur .
    %               reduce using rule 12 (produit -> facteur .)
    /               reduce using rule 12 (produit -> facteur .)
    *               reduce using rule 12 (produit -> facteur .)
    )               reduce using rule 12 (produit -> facteur .)
    -               reduce using rule 12 (produit -> facteur .)
    +               reduce using rule 12 (produit -> facteur .)


state 13

    (9) facteur -> ENTIER .
    %               reduce using rule 9 (facteur -> ENTIER .)
    /               reduce using rule 9 (facteur -> ENTIER .)
    *               reduce using rule 9 (facteur -> ENTIER .)
    )               reduce using rule 9 (facteur -> ENTIER .)
    -               reduce using rule 9 (facteur -> ENTIER .)
    +               reduce using rule 9 (facteur -> ENTIER .)


state 14

    (10) facteur -> ( expr . )
    (7) expr -> expr . - produit
    (8) expr -> expr . + produit
    )               shift and go to state 22
    -               shift and go to state 16
    +               shift and go to state 17


state 15

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 23


state 16

    (7) expr -> expr - . produit
    (12) produit -> . facteur
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    produit                        shift and go to state 24
    facteur                        shift and go to state 12

state 17

    (8) expr -> expr + . produit
    (12) produit -> . facteur
    (13) produit -> . produit % facteur
    (14) produit -> . produit / facteur
    (15) produit -> . produit * facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    produit                        shift and go to state 25
    facteur                        shift and go to state 12

state 18

    (13) produit -> produit % . facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    facteur                        shift and go to state 26

state 19

    (14) produit -> produit / . facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    facteur                        shift and go to state 27

state 20

    (15) produit -> produit * . facteur
    (9) facteur -> . ENTIER
    (10) facteur -> . ( expr )
    (11) facteur -> . - facteur
    ENTIER          shift and go to state 13
    (               shift and go to state 8
    -               shift and go to state 11

    facteur                        shift and go to state 28

state 21

    (11) facteur -> - facteur .
    %               reduce using rule 11 (facteur -> - facteur .)
    /               reduce using rule 11 (facteur -> - facteur .)
    *               reduce using rule 11 (facteur -> - facteur .)
    )               reduce using rule 11 (facteur -> - facteur .)
    -               reduce using rule 11 (facteur -> - facteur .)
    +               reduce using rule 11 (facteur -> - facteur .)


state 22

    (10) facteur -> ( expr ) .
    %               reduce using rule 10 (facteur -> ( expr ) .)
    /               reduce using rule 10 (facteur -> ( expr ) .)
    *               reduce using rule 10 (facteur -> ( expr ) .)
    )               reduce using rule 10 (facteur -> ( expr ) .)
    -               reduce using rule 10 (facteur -> ( expr ) .)
    +               reduce using rule 10 (facteur -> ( expr ) .)


state 23

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 24

    (7) expr -> expr - produit .
    (13) produit -> produit . % facteur
    (14) produit -> produit . / facteur
    (15) produit -> produit . * facteur
    )               reduce using rule 7 (expr -> expr - produit .)
    -               reduce using rule 7 (expr -> expr - produit .)
    +               reduce using rule 7 (expr -> expr - produit .)
    %               shift and go to state 18
    /               shift and go to state 19
    *               shift and go to state 20


state 25

    (8) expr -> expr + produit .
    (13) produit -> produit . % facteur
    (14) produit -> produit . / facteur
    (15) produit -> produit . * facteur
    )               reduce using rule 8 (expr -> expr + produit .)
    -               reduce using rule 8 (expr -> expr + produit .)
    +               reduce using rule 8 (expr -> expr + produit .)
    %               shift and go to state 18
    /               shift and go to state 19
    *               shift and go to state 20


state 26

    (13) produit -> produit % facteur .
    %               reduce using rule 13 (produit -> produit % facteur .)
    /               reduce using rule 13 (produit -> produit % facteur .)
    *               reduce using rule 13 (produit -> produit % facteur .)
    )               reduce using rule 13 (produit -> produit % facteur .)
    -               reduce using rule 13 (produit -> produit % facteur .)
    +               reduce using rule 13 (produit -> produit % facteur .)


state 27

    (14) produit -> produit / facteur .
    %               reduce using rule 14 (produit -> produit / facteur .)
    /               reduce using rule 14 (produit -> produit / facteur .)
    *               reduce using rule 14 (produit -> produit / facteur .)
    )               reduce using rule 14 (produit -> produit / facteur .)
    -               reduce using rule 14 (produit -> produit / facteur .)
    +               reduce using rule 14 (produit -> produit / facteur .)


state 28

    (15) produit -> produit * facteur .
    %               reduce using rule 15 (produit -> produit * facteur .)
    /               reduce using rule 15 (produit -> produit * facteur .)
    *               reduce using rule 15 (produit -> produit * facteur .)
    )               reduce using rule 15 (produit -> produit * facteur .)
    -               reduce using rule 15 (produit -> produit * facteur .)
    +               reduce using rule 15 (produit -> produit * facteur .)

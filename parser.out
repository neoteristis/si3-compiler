Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> lire
Rule 5     instruction -> ecrire
Rule 6     ecrire -> ECRIRE ( expr ) ;
Rule 7     lire -> LIRE ( )
Rule 8     expr -> produit
Rule 9     expr -> expr - produit
Rule 10    expr -> expr + produit
Rule 11    facteur -> variable
Rule 12    facteur -> ENTIER
Rule 13    facteur -> ( expr )
Rule 14    facteur -> - facteur
Rule 15    produit -> facteur
Rule 16    produit -> produit % facteur
Rule 17    produit -> produit / facteur
Rule 18    produit -> produit * facteur
Rule 19    variable -> IDENTIFIANT

Unused terminals:

    ET
    OU
    BOOLEAN
    NON
    SEPARATOR
    TANTQUE
    INFERIEUR_OU_EGAL
    RETOURNER
    SINON
    SUPERIEUR_OU_EGAL
    DIFFERENT
    EQUAL
    SI
    AFFECT

Terminals, with rules where they appear:

%                    : 16
(                    : 6 7 13
)                    : 6 7 13
*                    : 18
+                    : 10
-                    : 9 14
/                    : 17
;                    : 6
AFFECT               : 
BOOLEAN              : 
DIFFERENT            : 
ECRIRE               : 6
ENTIER               : 12
EQUAL                : 
ET                   : 
IDENTIFIANT          : 19
INFERIEUR_OU_EGAL    : 
LIRE                 : 7
NON                  : 
OU                   : 
RETOURNER            : 
SEPARATOR            : 
SI                   : 
SINON                : 
SUPERIEUR_OU_EGAL    : 
TANTQUE              : 
error                : 

Nonterminals, with rules where they appear:

ecrire               : 5
expr                 : 6 9 10 13
facteur              : 14 15 16 17 18
instruction          : 2 3
lire                 : 4
listeInstructions    : 1 2
produit              : 8 9 10 16 17 18
prog                 : 0
variable             : 11


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . lire
    (5) instruction -> . ecrire
    (7) lire -> . LIRE ( )
    (6) ecrire -> . ECRIRE ( expr ) ;
    LIRE            shift and go to state 6
    ECRIRE          shift and go to state 7

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    lire                           shift and go to state 4
    ecrire                         shift and go to state 5

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . lire
    (5) instruction -> . ecrire
    (7) lire -> . LIRE ( )
    (6) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    LIRE            shift and go to state 6
    ECRIRE          shift and go to state 7

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 8
    lire                           shift and go to state 4
    ecrire                         shift and go to state 5

state 4

    (4) instruction -> lire .
    LIRE            reduce using rule 4 (instruction -> lire .)
    ECRIRE          reduce using rule 4 (instruction -> lire .)
    $end            reduce using rule 4 (instruction -> lire .)


state 5

    (5) instruction -> ecrire .
    LIRE            reduce using rule 5 (instruction -> ecrire .)
    ECRIRE          reduce using rule 5 (instruction -> ecrire .)
    $end            reduce using rule 5 (instruction -> ecrire .)


state 6

    (7) lire -> LIRE . ( )
    (               shift and go to state 9


state 7

    (6) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 10


state 8

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 9

    (7) lire -> LIRE ( . )
    )               shift and go to state 11


state 10

    (6) ecrire -> ECRIRE ( . expr ) ;
    (8) expr -> . produit
    (9) expr -> . expr - produit
    (10) expr -> . expr + produit
    (15) produit -> . facteur
    (16) produit -> . produit % facteur
    (17) produit -> . produit / facteur
    (18) produit -> . produit * facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    expr                           shift and go to state 13
    produit                        shift and go to state 14
    facteur                        shift and go to state 16
    variable                       shift and go to state 17

state 11

    (7) lire -> LIRE ( ) .
    LIRE            reduce using rule 7 (lire -> LIRE ( ) .)
    ECRIRE          reduce using rule 7 (lire -> LIRE ( ) .)
    $end            reduce using rule 7 (lire -> LIRE ( ) .)


state 12

    (13) facteur -> ( . expr )
    (8) expr -> . produit
    (9) expr -> . expr - produit
    (10) expr -> . expr + produit
    (15) produit -> . facteur
    (16) produit -> . produit % facteur
    (17) produit -> . produit / facteur
    (18) produit -> . produit * facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    expr                           shift and go to state 20
    produit                        shift and go to state 14
    facteur                        shift and go to state 16
    variable                       shift and go to state 17

state 13

    (6) ecrire -> ECRIRE ( expr . ) ;
    (9) expr -> expr . - produit
    (10) expr -> expr . + produit
    )               shift and go to state 21
    -               shift and go to state 22
    +               shift and go to state 23


state 14

    (8) expr -> produit .
    (16) produit -> produit . % facteur
    (17) produit -> produit . / facteur
    (18) produit -> produit . * facteur
    )               reduce using rule 8 (expr -> produit .)
    -               reduce using rule 8 (expr -> produit .)
    +               reduce using rule 8 (expr -> produit .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 15

    (14) facteur -> - . facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    facteur                        shift and go to state 27
    variable                       shift and go to state 17

state 16

    (15) produit -> facteur .
    %               reduce using rule 15 (produit -> facteur .)
    /               reduce using rule 15 (produit -> facteur .)
    *               reduce using rule 15 (produit -> facteur .)
    )               reduce using rule 15 (produit -> facteur .)
    -               reduce using rule 15 (produit -> facteur .)
    +               reduce using rule 15 (produit -> facteur .)


state 17

    (11) facteur -> variable .
    %               reduce using rule 11 (facteur -> variable .)
    /               reduce using rule 11 (facteur -> variable .)
    *               reduce using rule 11 (facteur -> variable .)
    )               reduce using rule 11 (facteur -> variable .)
    -               reduce using rule 11 (facteur -> variable .)
    +               reduce using rule 11 (facteur -> variable .)


state 18

    (12) facteur -> ENTIER .
    %               reduce using rule 12 (facteur -> ENTIER .)
    /               reduce using rule 12 (facteur -> ENTIER .)
    *               reduce using rule 12 (facteur -> ENTIER .)
    )               reduce using rule 12 (facteur -> ENTIER .)
    -               reduce using rule 12 (facteur -> ENTIER .)
    +               reduce using rule 12 (facteur -> ENTIER .)


state 19

    (19) variable -> IDENTIFIANT .
    %               reduce using rule 19 (variable -> IDENTIFIANT .)
    /               reduce using rule 19 (variable -> IDENTIFIANT .)
    *               reduce using rule 19 (variable -> IDENTIFIANT .)
    )               reduce using rule 19 (variable -> IDENTIFIANT .)
    -               reduce using rule 19 (variable -> IDENTIFIANT .)
    +               reduce using rule 19 (variable -> IDENTIFIANT .)


state 20

    (13) facteur -> ( expr . )
    (9) expr -> expr . - produit
    (10) expr -> expr . + produit
    )               shift and go to state 28
    -               shift and go to state 22
    +               shift and go to state 23


state 21

    (6) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 29


state 22

    (9) expr -> expr - . produit
    (15) produit -> . facteur
    (16) produit -> . produit % facteur
    (17) produit -> . produit / facteur
    (18) produit -> . produit * facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    produit                        shift and go to state 30
    facteur                        shift and go to state 16
    variable                       shift and go to state 17

state 23

    (10) expr -> expr + . produit
    (15) produit -> . facteur
    (16) produit -> . produit % facteur
    (17) produit -> . produit / facteur
    (18) produit -> . produit * facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    produit                        shift and go to state 31
    facteur                        shift and go to state 16
    variable                       shift and go to state 17

state 24

    (16) produit -> produit % . facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    facteur                        shift and go to state 32
    variable                       shift and go to state 17

state 25

    (17) produit -> produit / . facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    facteur                        shift and go to state 33
    variable                       shift and go to state 17

state 26

    (18) produit -> produit * . facteur
    (11) facteur -> . variable
    (12) facteur -> . ENTIER
    (13) facteur -> . ( expr )
    (14) facteur -> . - facteur
    (19) variable -> . IDENTIFIANT
    ENTIER          shift and go to state 18
    (               shift and go to state 12
    -               shift and go to state 15
    IDENTIFIANT     shift and go to state 19

    facteur                        shift and go to state 34
    variable                       shift and go to state 17

state 27

    (14) facteur -> - facteur .
    %               reduce using rule 14 (facteur -> - facteur .)
    /               reduce using rule 14 (facteur -> - facteur .)
    *               reduce using rule 14 (facteur -> - facteur .)
    )               reduce using rule 14 (facteur -> - facteur .)
    -               reduce using rule 14 (facteur -> - facteur .)
    +               reduce using rule 14 (facteur -> - facteur .)


state 28

    (13) facteur -> ( expr ) .
    %               reduce using rule 13 (facteur -> ( expr ) .)
    /               reduce using rule 13 (facteur -> ( expr ) .)
    *               reduce using rule 13 (facteur -> ( expr ) .)
    )               reduce using rule 13 (facteur -> ( expr ) .)
    -               reduce using rule 13 (facteur -> ( expr ) .)
    +               reduce using rule 13 (facteur -> ( expr ) .)


state 29

    (6) ecrire -> ECRIRE ( expr ) ; .
    LIRE            reduce using rule 6 (ecrire -> ECRIRE ( expr ) ; .)
    ECRIRE          reduce using rule 6 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 6 (ecrire -> ECRIRE ( expr ) ; .)


state 30

    (9) expr -> expr - produit .
    (16) produit -> produit . % facteur
    (17) produit -> produit . / facteur
    (18) produit -> produit . * facteur
    )               reduce using rule 9 (expr -> expr - produit .)
    -               reduce using rule 9 (expr -> expr - produit .)
    +               reduce using rule 9 (expr -> expr - produit .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 31

    (10) expr -> expr + produit .
    (16) produit -> produit . % facteur
    (17) produit -> produit . / facteur
    (18) produit -> produit . * facteur
    )               reduce using rule 10 (expr -> expr + produit .)
    -               reduce using rule 10 (expr -> expr + produit .)
    +               reduce using rule 10 (expr -> expr + produit .)
    %               shift and go to state 24
    /               shift and go to state 25
    *               shift and go to state 26


state 32

    (16) produit -> produit % facteur .
    %               reduce using rule 16 (produit -> produit % facteur .)
    /               reduce using rule 16 (produit -> produit % facteur .)
    *               reduce using rule 16 (produit -> produit % facteur .)
    )               reduce using rule 16 (produit -> produit % facteur .)
    -               reduce using rule 16 (produit -> produit % facteur .)
    +               reduce using rule 16 (produit -> produit % facteur .)


state 33

    (17) produit -> produit / facteur .
    %               reduce using rule 17 (produit -> produit / facteur .)
    /               reduce using rule 17 (produit -> produit / facteur .)
    *               reduce using rule 17 (produit -> produit / facteur .)
    )               reduce using rule 17 (produit -> produit / facteur .)
    -               reduce using rule 17 (produit -> produit / facteur .)
    +               reduce using rule 17 (produit -> produit / facteur .)


state 34

    (18) produit -> produit * facteur .
    %               reduce using rule 18 (produit -> produit * facteur .)
    /               reduce using rule 18 (produit -> produit * facteur .)
    *               reduce using rule 18 (produit -> produit * facteur .)
    )               reduce using rule 18 (produit -> produit * facteur .)
    -               reduce using rule 18 (produit -> produit * facteur .)
    +               reduce using rule 18 (produit -> produit * facteur .)

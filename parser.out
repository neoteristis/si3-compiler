Grammar:

Rule 0     S' -> prog
Rule 1     prog -> statement_list
Rule 2     primary_expression -> ( expression )
Rule 3     primary_expression -> ENTIER
Rule 4     primary_expression -> BOOLEAN
Rule 5     primary_expression -> IDENTIFIANT
Rule 6     postfix_expression -> function_call
Rule 7     postfix_expression -> primary_expression
Rule 8     unary_expression -> unary_operator cast_expression
Rule 9     unary_expression -> postfix_expression
Rule 10    unary_operator -> NON
Rule 11    unary_operator -> -
Rule 12    cast_expression -> unary_expression
Rule 13    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 14    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 15    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 16    multiplicative_expression -> cast_expression
Rule 17    additive_expression -> additive_expression - multiplicative_expression
Rule 18    additive_expression -> additive_expression + multiplicative_expression
Rule 19    additive_expression -> multiplicative_expression
Rule 20    relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression
Rule 21    relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression
Rule 22    relational_expression -> relational_expression > additive_expression
Rule 23    relational_expression -> relational_expression < additive_expression
Rule 24    relational_expression -> additive_expression
Rule 25    equality_expression -> equality_expression DIFFERENT relational_expression
Rule 26    equality_expression -> equality_expression EQUAL relational_expression
Rule 27    equality_expression -> relational_expression
Rule 28    logical_and_expression -> logical_and_expression ET equality_expression
Rule 29    logical_and_expression -> equality_expression
Rule 30    logical_or_expression -> logical_or_expression OU logical_and_expression
Rule 31    logical_or_expression -> logical_and_expression
Rule 32    conditional_expression -> logical_or_expression
Rule 33    assignment_expression -> conditional_expression
Rule 34    assignment_expression -> primary_expression assignment_operator conditional_expression
Rule 35    assignment_operator -> AFFECT
Rule 36    expression -> expression , assignment_expression
Rule 37    expression -> assignment_expression
Rule 38    statement -> function_declaration_statement
Rule 39    statement -> declaration_statement
Rule 40    statement -> iteration_statement
Rule 41    statement -> selection_statement
Rule 42    statement -> expression_statement
Rule 43    statement -> compound_statement
Rule 44    statement -> jump_statement
Rule 45    compound_statement -> { statement_list }
Rule 46    compound_statement -> { }
Rule 47    declaration_statement -> declaration ;
Rule 48    declaration -> type IDENTIFIANT AFFECT additive_expression
Rule 49    declaration -> type IDENTIFIANT
Rule 50    function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement
Rule 51    function_declaration_statement -> type IDENTIFIANT ( ) compound_statement
Rule 52    function_call -> IDENTIFIANT ( parameters_list_opt )
Rule 53    function_call -> IDENTIFIANT ( )
Rule 54    type -> BOOL
Rule 55    type -> INT
Rule 56    arguments_list_opt -> declarations_list
Rule 57    declarations_list -> declarations_list SEPARATOR declaration
Rule 58    declarations_list -> declaration
Rule 59    parameters_list_opt -> parameters_list
Rule 60    parameters_list -> parameters_list SEPARATOR assignment_expression
Rule 61    parameters_list -> assignment_expression
Rule 62    statement_list -> statement_list statement
Rule 63    statement_list -> statement
Rule 64    expression_statement -> expression ;
Rule 65    expression_statement -> ;
Rule 66    selection_statement -> SI ( expression ) statement SINON statement
Rule 67    selection_statement -> SI ( expression ) statement
Rule 68    iteration_statement -> TANTQUE ( expression ) statement
Rule 69    jump_statement -> RETOURNER expression ;
Rule 70    jump_statement -> RETOURNER ;

Unused terminals:

    ECRIRE
    LIRE

Terminals, with rules where they appear:

%                    : 13
(                    : 2 50 51 52 53 66 67 68
)                    : 2 50 51 52 53 66 67 68
*                    : 15
+                    : 18
,                    : 36
-                    : 11 17
/                    : 14
;                    : 47 64 65 69 70
<                    : 23
>                    : 22
AFFECT               : 35 48
BOOL                 : 54
BOOLEAN              : 4
DIFFERENT            : 25
ECRIRE               : 
ENTIER               : 3
EQUAL                : 26
ET                   : 28
IDENTIFIANT          : 5 48 49 50 51 52 53
INFERIEUR_OU_EGAL    : 21
INT                  : 55
LIRE                 : 
NON                  : 10
OU                   : 30
RETOURNER            : 69 70
SEPARATOR            : 57 60
SI                   : 66 67
SINON                : 66
SUPERIEUR_OU_EGAL    : 20
TANTQUE              : 68
error                : 
{                    : 45 46
}                    : 45 46

Nonterminals, with rules where they appear:

additive_expression  : 17 18 20 21 22 23 24 48
arguments_list_opt   : 50
assignment_expression : 36 37 60 61
assignment_operator  : 34
cast_expression      : 8 13 14 15 16
compound_statement   : 43 50 51
conditional_expression : 33 34
declaration          : 47 57 58
declaration_statement : 39
declarations_list    : 56 57
equality_expression  : 25 26 28 29
expression           : 2 36 64 66 67 68 69
expression_statement : 42
function_call        : 6
function_declaration_statement : 38
iteration_statement  : 40
jump_statement       : 44
logical_and_expression : 28 30 31
logical_or_expression : 30 32
multiplicative_expression : 13 14 15 17 18 19
parameters_list      : 59 60
parameters_list_opt  : 52
postfix_expression   : 9
primary_expression   : 7 34
prog                 : 0
relational_expression : 20 21 22 23 25 26 27
selection_statement  : 41
statement            : 62 63 66 66 67 68
statement_list       : 1 45 62
type                 : 48 49 50 51
unary_expression     : 12
unary_operator       : 8


state 0

    (0) S' -> . prog
    (1) prog -> . statement_list
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    prog                           shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 1

    (0) S' -> prog .


state 2

    (1) prog -> statement_list .
    (62) statement_list -> statement_list . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    $end            reduce using rule 1 (prog -> statement_list .)
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    statement                      shift and go to state 41
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 3

    (63) statement_list -> statement .
    TANTQUE         reduce using rule 63 (statement_list -> statement .)
    SI              reduce using rule 63 (statement_list -> statement .)
    ;               reduce using rule 63 (statement_list -> statement .)
    {               reduce using rule 63 (statement_list -> statement .)
    RETOURNER       reduce using rule 63 (statement_list -> statement .)
    BOOL            reduce using rule 63 (statement_list -> statement .)
    INT             reduce using rule 63 (statement_list -> statement .)
    (               reduce using rule 63 (statement_list -> statement .)
    ENTIER          reduce using rule 63 (statement_list -> statement .)
    BOOLEAN         reduce using rule 63 (statement_list -> statement .)
    IDENTIFIANT     reduce using rule 63 (statement_list -> statement .)
    NON             reduce using rule 63 (statement_list -> statement .)
    -               reduce using rule 63 (statement_list -> statement .)
    $end            reduce using rule 63 (statement_list -> statement .)
    }               reduce using rule 63 (statement_list -> statement .)


state 4

    (38) statement -> function_declaration_statement .
    TANTQUE         reduce using rule 38 (statement -> function_declaration_statement .)
    SI              reduce using rule 38 (statement -> function_declaration_statement .)
    ;               reduce using rule 38 (statement -> function_declaration_statement .)
    {               reduce using rule 38 (statement -> function_declaration_statement .)
    RETOURNER       reduce using rule 38 (statement -> function_declaration_statement .)
    BOOL            reduce using rule 38 (statement -> function_declaration_statement .)
    INT             reduce using rule 38 (statement -> function_declaration_statement .)
    (               reduce using rule 38 (statement -> function_declaration_statement .)
    ENTIER          reduce using rule 38 (statement -> function_declaration_statement .)
    BOOLEAN         reduce using rule 38 (statement -> function_declaration_statement .)
    IDENTIFIANT     reduce using rule 38 (statement -> function_declaration_statement .)
    NON             reduce using rule 38 (statement -> function_declaration_statement .)
    -               reduce using rule 38 (statement -> function_declaration_statement .)
    $end            reduce using rule 38 (statement -> function_declaration_statement .)
    }               reduce using rule 38 (statement -> function_declaration_statement .)
    SINON           reduce using rule 38 (statement -> function_declaration_statement .)


state 5

    (39) statement -> declaration_statement .
    TANTQUE         reduce using rule 39 (statement -> declaration_statement .)
    SI              reduce using rule 39 (statement -> declaration_statement .)
    ;               reduce using rule 39 (statement -> declaration_statement .)
    {               reduce using rule 39 (statement -> declaration_statement .)
    RETOURNER       reduce using rule 39 (statement -> declaration_statement .)
    BOOL            reduce using rule 39 (statement -> declaration_statement .)
    INT             reduce using rule 39 (statement -> declaration_statement .)
    (               reduce using rule 39 (statement -> declaration_statement .)
    ENTIER          reduce using rule 39 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 39 (statement -> declaration_statement .)
    IDENTIFIANT     reduce using rule 39 (statement -> declaration_statement .)
    NON             reduce using rule 39 (statement -> declaration_statement .)
    -               reduce using rule 39 (statement -> declaration_statement .)
    $end            reduce using rule 39 (statement -> declaration_statement .)
    }               reduce using rule 39 (statement -> declaration_statement .)
    SINON           reduce using rule 39 (statement -> declaration_statement .)


state 6

    (40) statement -> iteration_statement .
    TANTQUE         reduce using rule 40 (statement -> iteration_statement .)
    SI              reduce using rule 40 (statement -> iteration_statement .)
    ;               reduce using rule 40 (statement -> iteration_statement .)
    {               reduce using rule 40 (statement -> iteration_statement .)
    RETOURNER       reduce using rule 40 (statement -> iteration_statement .)
    BOOL            reduce using rule 40 (statement -> iteration_statement .)
    INT             reduce using rule 40 (statement -> iteration_statement .)
    (               reduce using rule 40 (statement -> iteration_statement .)
    ENTIER          reduce using rule 40 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 40 (statement -> iteration_statement .)
    IDENTIFIANT     reduce using rule 40 (statement -> iteration_statement .)
    NON             reduce using rule 40 (statement -> iteration_statement .)
    -               reduce using rule 40 (statement -> iteration_statement .)
    $end            reduce using rule 40 (statement -> iteration_statement .)
    }               reduce using rule 40 (statement -> iteration_statement .)
    SINON           reduce using rule 40 (statement -> iteration_statement .)


state 7

    (41) statement -> selection_statement .
    TANTQUE         reduce using rule 41 (statement -> selection_statement .)
    SI              reduce using rule 41 (statement -> selection_statement .)
    ;               reduce using rule 41 (statement -> selection_statement .)
    {               reduce using rule 41 (statement -> selection_statement .)
    RETOURNER       reduce using rule 41 (statement -> selection_statement .)
    BOOL            reduce using rule 41 (statement -> selection_statement .)
    INT             reduce using rule 41 (statement -> selection_statement .)
    (               reduce using rule 41 (statement -> selection_statement .)
    ENTIER          reduce using rule 41 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 41 (statement -> selection_statement .)
    IDENTIFIANT     reduce using rule 41 (statement -> selection_statement .)
    NON             reduce using rule 41 (statement -> selection_statement .)
    -               reduce using rule 41 (statement -> selection_statement .)
    $end            reduce using rule 41 (statement -> selection_statement .)
    }               reduce using rule 41 (statement -> selection_statement .)
    SINON           reduce using rule 41 (statement -> selection_statement .)


state 8

    (42) statement -> expression_statement .
    TANTQUE         reduce using rule 42 (statement -> expression_statement .)
    SI              reduce using rule 42 (statement -> expression_statement .)
    ;               reduce using rule 42 (statement -> expression_statement .)
    {               reduce using rule 42 (statement -> expression_statement .)
    RETOURNER       reduce using rule 42 (statement -> expression_statement .)
    BOOL            reduce using rule 42 (statement -> expression_statement .)
    INT             reduce using rule 42 (statement -> expression_statement .)
    (               reduce using rule 42 (statement -> expression_statement .)
    ENTIER          reduce using rule 42 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 42 (statement -> expression_statement .)
    IDENTIFIANT     reduce using rule 42 (statement -> expression_statement .)
    NON             reduce using rule 42 (statement -> expression_statement .)
    -               reduce using rule 42 (statement -> expression_statement .)
    $end            reduce using rule 42 (statement -> expression_statement .)
    }               reduce using rule 42 (statement -> expression_statement .)
    SINON           reduce using rule 42 (statement -> expression_statement .)


state 9

    (43) statement -> compound_statement .
    TANTQUE         reduce using rule 43 (statement -> compound_statement .)
    SI              reduce using rule 43 (statement -> compound_statement .)
    ;               reduce using rule 43 (statement -> compound_statement .)
    {               reduce using rule 43 (statement -> compound_statement .)
    RETOURNER       reduce using rule 43 (statement -> compound_statement .)
    BOOL            reduce using rule 43 (statement -> compound_statement .)
    INT             reduce using rule 43 (statement -> compound_statement .)
    (               reduce using rule 43 (statement -> compound_statement .)
    ENTIER          reduce using rule 43 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 43 (statement -> compound_statement .)
    IDENTIFIANT     reduce using rule 43 (statement -> compound_statement .)
    NON             reduce using rule 43 (statement -> compound_statement .)
    -               reduce using rule 43 (statement -> compound_statement .)
    $end            reduce using rule 43 (statement -> compound_statement .)
    }               reduce using rule 43 (statement -> compound_statement .)
    SINON           reduce using rule 43 (statement -> compound_statement .)


state 10

    (44) statement -> jump_statement .
    TANTQUE         reduce using rule 44 (statement -> jump_statement .)
    SI              reduce using rule 44 (statement -> jump_statement .)
    ;               reduce using rule 44 (statement -> jump_statement .)
    {               reduce using rule 44 (statement -> jump_statement .)
    RETOURNER       reduce using rule 44 (statement -> jump_statement .)
    BOOL            reduce using rule 44 (statement -> jump_statement .)
    INT             reduce using rule 44 (statement -> jump_statement .)
    (               reduce using rule 44 (statement -> jump_statement .)
    ENTIER          reduce using rule 44 (statement -> jump_statement .)
    BOOLEAN         reduce using rule 44 (statement -> jump_statement .)
    IDENTIFIANT     reduce using rule 44 (statement -> jump_statement .)
    NON             reduce using rule 44 (statement -> jump_statement .)
    -               reduce using rule 44 (statement -> jump_statement .)
    $end            reduce using rule 44 (statement -> jump_statement .)
    }               reduce using rule 44 (statement -> jump_statement .)
    SINON           reduce using rule 44 (statement -> jump_statement .)


state 11

    (50) function_declaration_statement -> type . IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> type . IDENTIFIANT ( ) compound_statement
    (48) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (49) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 42


state 12

    (5) primary_expression -> IDENTIFIANT .
    (52) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (53) function_call -> IDENTIFIANT . ( )
    AFFECT          reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    (               shift and go to state 43


state 13

    (2) primary_expression -> ( . expression )
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 44
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 14

    (47) declaration_statement -> declaration . ;
    ;               shift and go to state 45


state 15

    (65) expression_statement -> ; .
    TANTQUE         reduce using rule 65 (expression_statement -> ; .)
    SI              reduce using rule 65 (expression_statement -> ; .)
    ;               reduce using rule 65 (expression_statement -> ; .)
    {               reduce using rule 65 (expression_statement -> ; .)
    RETOURNER       reduce using rule 65 (expression_statement -> ; .)
    BOOL            reduce using rule 65 (expression_statement -> ; .)
    INT             reduce using rule 65 (expression_statement -> ; .)
    (               reduce using rule 65 (expression_statement -> ; .)
    ENTIER          reduce using rule 65 (expression_statement -> ; .)
    BOOLEAN         reduce using rule 65 (expression_statement -> ; .)
    IDENTIFIANT     reduce using rule 65 (expression_statement -> ; .)
    NON             reduce using rule 65 (expression_statement -> ; .)
    -               reduce using rule 65 (expression_statement -> ; .)
    $end            reduce using rule 65 (expression_statement -> ; .)
    }               reduce using rule 65 (expression_statement -> ; .)
    SINON           reduce using rule 65 (expression_statement -> ; .)


state 16

    (68) iteration_statement -> TANTQUE . ( expression ) statement
    (               shift and go to state 46


state 17

    (64) expression_statement -> expression . ;
    (36) expression -> expression . , assignment_expression
    ;               shift and go to state 47
    ,               shift and go to state 48


state 18

    (66) selection_statement -> SI . ( expression ) statement SINON statement
    (67) selection_statement -> SI . ( expression ) statement
    (               shift and go to state 49


state 19

    (45) compound_statement -> { . statement_list }
    (46) compound_statement -> { . }
    (62) statement_list -> . statement_list statement
    (63) statement_list -> . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 51
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    statement_list                 shift and go to state 50
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 20

    (69) jump_statement -> RETOURNER . expression ;
    (70) jump_statement -> RETOURNER . ;
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    ;               shift and go to state 53
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 52
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 21

    (54) type -> BOOL .
    IDENTIFIANT     reduce using rule 54 (type -> BOOL .)


state 22

    (55) type -> INT .
    IDENTIFIANT     reduce using rule 55 (type -> INT .)


state 23

    (24) relational_expression -> additive_expression .
    (17) additive_expression -> additive_expression . - multiplicative_expression
    (18) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 24 (relational_expression -> additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 24 (relational_expression -> additive_expression .)
    >               reduce using rule 24 (relational_expression -> additive_expression .)
    <               reduce using rule 24 (relational_expression -> additive_expression .)
    DIFFERENT       reduce using rule 24 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 24 (relational_expression -> additive_expression .)
    ET              reduce using rule 24 (relational_expression -> additive_expression .)
    OU              reduce using rule 24 (relational_expression -> additive_expression .)
    ;               reduce using rule 24 (relational_expression -> additive_expression .)
    ,               reduce using rule 24 (relational_expression -> additive_expression .)
    )               reduce using rule 24 (relational_expression -> additive_expression .)
    SEPARATOR       reduce using rule 24 (relational_expression -> additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 24

    (37) expression -> assignment_expression .
    ;               reduce using rule 37 (expression -> assignment_expression .)
    ,               reduce using rule 37 (expression -> assignment_expression .)
    )               reduce using rule 37 (expression -> assignment_expression .)


state 25

    (33) assignment_expression -> conditional_expression .
    ;               reduce using rule 33 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 33 (assignment_expression -> conditional_expression .)
    )               reduce using rule 33 (assignment_expression -> conditional_expression .)
    SEPARATOR       reduce using rule 33 (assignment_expression -> conditional_expression .)


state 26

    (34) assignment_expression -> primary_expression . assignment_operator conditional_expression
    (7) postfix_expression -> primary_expression .
    (35) assignment_operator -> . AFFECT
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)
    AFFECT          shift and go to state 57

    assignment_operator            shift and go to state 56

state 27

    (32) conditional_expression -> logical_or_expression .
    (30) logical_or_expression -> logical_or_expression . OU logical_and_expression
    ;               reduce using rule 32 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 32 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 32 (conditional_expression -> logical_or_expression .)
    SEPARATOR       reduce using rule 32 (conditional_expression -> logical_or_expression .)
    OU              shift and go to state 58


state 28

    (3) primary_expression -> ENTIER .
    AFFECT          reduce using rule 3 (primary_expression -> ENTIER .)
    %               reduce using rule 3 (primary_expression -> ENTIER .)
    /               reduce using rule 3 (primary_expression -> ENTIER .)
    *               reduce using rule 3 (primary_expression -> ENTIER .)
    -               reduce using rule 3 (primary_expression -> ENTIER .)
    +               reduce using rule 3 (primary_expression -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    >               reduce using rule 3 (primary_expression -> ENTIER .)
    <               reduce using rule 3 (primary_expression -> ENTIER .)
    DIFFERENT       reduce using rule 3 (primary_expression -> ENTIER .)
    EQUAL           reduce using rule 3 (primary_expression -> ENTIER .)
    ET              reduce using rule 3 (primary_expression -> ENTIER .)
    OU              reduce using rule 3 (primary_expression -> ENTIER .)
    ;               reduce using rule 3 (primary_expression -> ENTIER .)
    ,               reduce using rule 3 (primary_expression -> ENTIER .)
    )               reduce using rule 3 (primary_expression -> ENTIER .)
    SEPARATOR       reduce using rule 3 (primary_expression -> ENTIER .)


state 29

    (4) primary_expression -> BOOLEAN .
    AFFECT          reduce using rule 4 (primary_expression -> BOOLEAN .)
    %               reduce using rule 4 (primary_expression -> BOOLEAN .)
    /               reduce using rule 4 (primary_expression -> BOOLEAN .)
    *               reduce using rule 4 (primary_expression -> BOOLEAN .)
    -               reduce using rule 4 (primary_expression -> BOOLEAN .)
    +               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SUPERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    INFERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    >               reduce using rule 4 (primary_expression -> BOOLEAN .)
    <               reduce using rule 4 (primary_expression -> BOOLEAN .)
    DIFFERENT       reduce using rule 4 (primary_expression -> BOOLEAN .)
    EQUAL           reduce using rule 4 (primary_expression -> BOOLEAN .)
    ET              reduce using rule 4 (primary_expression -> BOOLEAN .)
    OU              reduce using rule 4 (primary_expression -> BOOLEAN .)
    ;               reduce using rule 4 (primary_expression -> BOOLEAN .)
    ,               reduce using rule 4 (primary_expression -> BOOLEAN .)
    )               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SEPARATOR       reduce using rule 4 (primary_expression -> BOOLEAN .)


state 30

    (31) logical_or_expression -> logical_and_expression .
    (28) logical_and_expression -> logical_and_expression . ET equality_expression
    OU              reduce using rule 31 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 31 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 31 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 31 (logical_or_expression -> logical_and_expression .)
    SEPARATOR       reduce using rule 31 (logical_or_expression -> logical_and_expression .)
    ET              shift and go to state 59


state 31

    (29) logical_and_expression -> equality_expression .
    (25) equality_expression -> equality_expression . DIFFERENT relational_expression
    (26) equality_expression -> equality_expression . EQUAL relational_expression
    ET              reduce using rule 29 (logical_and_expression -> equality_expression .)
    OU              reduce using rule 29 (logical_and_expression -> equality_expression .)
    ;               reduce using rule 29 (logical_and_expression -> equality_expression .)
    ,               reduce using rule 29 (logical_and_expression -> equality_expression .)
    )               reduce using rule 29 (logical_and_expression -> equality_expression .)
    SEPARATOR       reduce using rule 29 (logical_and_expression -> equality_expression .)
    DIFFERENT       shift and go to state 60
    EQUAL           shift and go to state 61


state 32

    (27) equality_expression -> relational_expression .
    (20) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> relational_expression . > additive_expression
    (23) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 27 (equality_expression -> relational_expression .)
    EQUAL           reduce using rule 27 (equality_expression -> relational_expression .)
    ET              reduce using rule 27 (equality_expression -> relational_expression .)
    OU              reduce using rule 27 (equality_expression -> relational_expression .)
    ;               reduce using rule 27 (equality_expression -> relational_expression .)
    ,               reduce using rule 27 (equality_expression -> relational_expression .)
    )               reduce using rule 27 (equality_expression -> relational_expression .)
    SEPARATOR       reduce using rule 27 (equality_expression -> relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 62
    INFERIEUR_OU_EGAL shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65


state 33

    (11) unary_operator -> - .
    NON             reduce using rule 11 (unary_operator -> - .)
    -               reduce using rule 11 (unary_operator -> - .)
    IDENTIFIANT     reduce using rule 11 (unary_operator -> - .)
    (               reduce using rule 11 (unary_operator -> - .)
    ENTIER          reduce using rule 11 (unary_operator -> - .)
    BOOLEAN         reduce using rule 11 (unary_operator -> - .)


state 34

    (19) additive_expression -> multiplicative_expression .
    (13) multiplicative_expression -> multiplicative_expression . % cast_expression
    (14) multiplicative_expression -> multiplicative_expression . / cast_expression
    (15) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    +               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 19 (additive_expression -> multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 19 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    DIFFERENT       reduce using rule 19 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 19 (additive_expression -> multiplicative_expression .)
    ET              reduce using rule 19 (additive_expression -> multiplicative_expression .)
    OU              reduce using rule 19 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 19 (additive_expression -> multiplicative_expression .)
    SEPARATOR       reduce using rule 19 (additive_expression -> multiplicative_expression .)
    %               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 35

    (16) multiplicative_expression -> cast_expression .
    %               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    *               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 16 (multiplicative_expression -> cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 16 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    DIFFERENT       reduce using rule 16 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 16 (multiplicative_expression -> cast_expression .)
    ET              reduce using rule 16 (multiplicative_expression -> cast_expression .)
    OU              reduce using rule 16 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 16 (multiplicative_expression -> cast_expression .)
    SEPARATOR       reduce using rule 16 (multiplicative_expression -> cast_expression .)


state 36

    (12) cast_expression -> unary_expression .
    %               reduce using rule 12 (cast_expression -> unary_expression .)
    /               reduce using rule 12 (cast_expression -> unary_expression .)
    *               reduce using rule 12 (cast_expression -> unary_expression .)
    -               reduce using rule 12 (cast_expression -> unary_expression .)
    +               reduce using rule 12 (cast_expression -> unary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 12 (cast_expression -> unary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 12 (cast_expression -> unary_expression .)
    >               reduce using rule 12 (cast_expression -> unary_expression .)
    <               reduce using rule 12 (cast_expression -> unary_expression .)
    DIFFERENT       reduce using rule 12 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 12 (cast_expression -> unary_expression .)
    ET              reduce using rule 12 (cast_expression -> unary_expression .)
    OU              reduce using rule 12 (cast_expression -> unary_expression .)
    ;               reduce using rule 12 (cast_expression -> unary_expression .)
    ,               reduce using rule 12 (cast_expression -> unary_expression .)
    )               reduce using rule 12 (cast_expression -> unary_expression .)
    SEPARATOR       reduce using rule 12 (cast_expression -> unary_expression .)


state 37

    (8) unary_expression -> unary_operator . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    unary_operator                 shift and go to state 37
    cast_expression                shift and go to state 69
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 38

    (9) unary_expression -> postfix_expression .
    %               reduce using rule 9 (unary_expression -> postfix_expression .)
    /               reduce using rule 9 (unary_expression -> postfix_expression .)
    *               reduce using rule 9 (unary_expression -> postfix_expression .)
    -               reduce using rule 9 (unary_expression -> postfix_expression .)
    +               reduce using rule 9 (unary_expression -> postfix_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> postfix_expression .)
    INFERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> postfix_expression .)
    >               reduce using rule 9 (unary_expression -> postfix_expression .)
    <               reduce using rule 9 (unary_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 9 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 9 (unary_expression -> postfix_expression .)
    ET              reduce using rule 9 (unary_expression -> postfix_expression .)
    OU              reduce using rule 9 (unary_expression -> postfix_expression .)
    ;               reduce using rule 9 (unary_expression -> postfix_expression .)
    ,               reduce using rule 9 (unary_expression -> postfix_expression .)
    )               reduce using rule 9 (unary_expression -> postfix_expression .)
    SEPARATOR       reduce using rule 9 (unary_expression -> postfix_expression .)


state 39

    (10) unary_operator -> NON .
    NON             reduce using rule 10 (unary_operator -> NON .)
    -               reduce using rule 10 (unary_operator -> NON .)
    IDENTIFIANT     reduce using rule 10 (unary_operator -> NON .)
    (               reduce using rule 10 (unary_operator -> NON .)
    ENTIER          reduce using rule 10 (unary_operator -> NON .)
    BOOLEAN         reduce using rule 10 (unary_operator -> NON .)


state 40

    (6) postfix_expression -> function_call .
    %               reduce using rule 6 (postfix_expression -> function_call .)
    /               reduce using rule 6 (postfix_expression -> function_call .)
    *               reduce using rule 6 (postfix_expression -> function_call .)
    -               reduce using rule 6 (postfix_expression -> function_call .)
    +               reduce using rule 6 (postfix_expression -> function_call .)
    SUPERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    INFERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    >               reduce using rule 6 (postfix_expression -> function_call .)
    <               reduce using rule 6 (postfix_expression -> function_call .)
    DIFFERENT       reduce using rule 6 (postfix_expression -> function_call .)
    EQUAL           reduce using rule 6 (postfix_expression -> function_call .)
    ET              reduce using rule 6 (postfix_expression -> function_call .)
    OU              reduce using rule 6 (postfix_expression -> function_call .)
    ;               reduce using rule 6 (postfix_expression -> function_call .)
    ,               reduce using rule 6 (postfix_expression -> function_call .)
    )               reduce using rule 6 (postfix_expression -> function_call .)
    SEPARATOR       reduce using rule 6 (postfix_expression -> function_call .)


state 41

    (62) statement_list -> statement_list statement .
    TANTQUE         reduce using rule 62 (statement_list -> statement_list statement .)
    SI              reduce using rule 62 (statement_list -> statement_list statement .)
    ;               reduce using rule 62 (statement_list -> statement_list statement .)
    {               reduce using rule 62 (statement_list -> statement_list statement .)
    RETOURNER       reduce using rule 62 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 62 (statement_list -> statement_list statement .)
    INT             reduce using rule 62 (statement_list -> statement_list statement .)
    (               reduce using rule 62 (statement_list -> statement_list statement .)
    ENTIER          reduce using rule 62 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 62 (statement_list -> statement_list statement .)
    IDENTIFIANT     reduce using rule 62 (statement_list -> statement_list statement .)
    NON             reduce using rule 62 (statement_list -> statement_list statement .)
    -               reduce using rule 62 (statement_list -> statement_list statement .)
    $end            reduce using rule 62 (statement_list -> statement_list statement .)
    }               reduce using rule 62 (statement_list -> statement_list statement .)


state 42

    (50) function_declaration_statement -> type IDENTIFIANT . ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> type IDENTIFIANT . ( ) compound_statement
    (48) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (49) declaration -> type IDENTIFIANT .
    (               shift and go to state 72
    AFFECT          shift and go to state 73
    ;               reduce using rule 49 (declaration -> type IDENTIFIANT .)


state 43

    (52) function_call -> IDENTIFIANT ( . parameters_list_opt )
    (53) function_call -> IDENTIFIANT ( . )
    (59) parameters_list_opt -> . parameters_list
    (60) parameters_list -> . parameters_list SEPARATOR assignment_expression
    (61) parameters_list -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    )               shift and go to state 75
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    parameters_list_opt            shift and go to state 74
    parameters_list                shift and go to state 76
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 44

    (2) primary_expression -> ( expression . )
    (36) expression -> expression . , assignment_expression
    )               shift and go to state 78
    ,               shift and go to state 48


state 45

    (47) declaration_statement -> declaration ; .
    TANTQUE         reduce using rule 47 (declaration_statement -> declaration ; .)
    SI              reduce using rule 47 (declaration_statement -> declaration ; .)
    ;               reduce using rule 47 (declaration_statement -> declaration ; .)
    {               reduce using rule 47 (declaration_statement -> declaration ; .)
    RETOURNER       reduce using rule 47 (declaration_statement -> declaration ; .)
    BOOL            reduce using rule 47 (declaration_statement -> declaration ; .)
    INT             reduce using rule 47 (declaration_statement -> declaration ; .)
    (               reduce using rule 47 (declaration_statement -> declaration ; .)
    ENTIER          reduce using rule 47 (declaration_statement -> declaration ; .)
    BOOLEAN         reduce using rule 47 (declaration_statement -> declaration ; .)
    IDENTIFIANT     reduce using rule 47 (declaration_statement -> declaration ; .)
    NON             reduce using rule 47 (declaration_statement -> declaration ; .)
    -               reduce using rule 47 (declaration_statement -> declaration ; .)
    $end            reduce using rule 47 (declaration_statement -> declaration ; .)
    }               reduce using rule 47 (declaration_statement -> declaration ; .)
    SINON           reduce using rule 47 (declaration_statement -> declaration ; .)


state 46

    (68) iteration_statement -> TANTQUE ( . expression ) statement
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 79
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 47

    (64) expression_statement -> expression ; .
    TANTQUE         reduce using rule 64 (expression_statement -> expression ; .)
    SI              reduce using rule 64 (expression_statement -> expression ; .)
    ;               reduce using rule 64 (expression_statement -> expression ; .)
    {               reduce using rule 64 (expression_statement -> expression ; .)
    RETOURNER       reduce using rule 64 (expression_statement -> expression ; .)
    BOOL            reduce using rule 64 (expression_statement -> expression ; .)
    INT             reduce using rule 64 (expression_statement -> expression ; .)
    (               reduce using rule 64 (expression_statement -> expression ; .)
    ENTIER          reduce using rule 64 (expression_statement -> expression ; .)
    BOOLEAN         reduce using rule 64 (expression_statement -> expression ; .)
    IDENTIFIANT     reduce using rule 64 (expression_statement -> expression ; .)
    NON             reduce using rule 64 (expression_statement -> expression ; .)
    -               reduce using rule 64 (expression_statement -> expression ; .)
    $end            reduce using rule 64 (expression_statement -> expression ; .)
    }               reduce using rule 64 (expression_statement -> expression ; .)
    SINON           reduce using rule 64 (expression_statement -> expression ; .)


state 48

    (36) expression -> expression , . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    assignment_expression          shift and go to state 80
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 49

    (66) selection_statement -> SI ( . expression ) statement SINON statement
    (67) selection_statement -> SI ( . expression ) statement
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 81
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 50

    (45) compound_statement -> { statement_list . }
    (62) statement_list -> statement_list . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 82
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    statement                      shift and go to state 41
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 51

    (46) compound_statement -> { } .
    TANTQUE         reduce using rule 46 (compound_statement -> { } .)
    SI              reduce using rule 46 (compound_statement -> { } .)
    ;               reduce using rule 46 (compound_statement -> { } .)
    {               reduce using rule 46 (compound_statement -> { } .)
    RETOURNER       reduce using rule 46 (compound_statement -> { } .)
    BOOL            reduce using rule 46 (compound_statement -> { } .)
    INT             reduce using rule 46 (compound_statement -> { } .)
    (               reduce using rule 46 (compound_statement -> { } .)
    ENTIER          reduce using rule 46 (compound_statement -> { } .)
    BOOLEAN         reduce using rule 46 (compound_statement -> { } .)
    IDENTIFIANT     reduce using rule 46 (compound_statement -> { } .)
    NON             reduce using rule 46 (compound_statement -> { } .)
    -               reduce using rule 46 (compound_statement -> { } .)
    $end            reduce using rule 46 (compound_statement -> { } .)
    }               reduce using rule 46 (compound_statement -> { } .)
    SINON           reduce using rule 46 (compound_statement -> { } .)


state 52

    (69) jump_statement -> RETOURNER expression . ;
    (36) expression -> expression . , assignment_expression
    ;               shift and go to state 83
    ,               shift and go to state 48


state 53

    (70) jump_statement -> RETOURNER ; .
    TANTQUE         reduce using rule 70 (jump_statement -> RETOURNER ; .)
    SI              reduce using rule 70 (jump_statement -> RETOURNER ; .)
    ;               reduce using rule 70 (jump_statement -> RETOURNER ; .)
    {               reduce using rule 70 (jump_statement -> RETOURNER ; .)
    RETOURNER       reduce using rule 70 (jump_statement -> RETOURNER ; .)
    BOOL            reduce using rule 70 (jump_statement -> RETOURNER ; .)
    INT             reduce using rule 70 (jump_statement -> RETOURNER ; .)
    (               reduce using rule 70 (jump_statement -> RETOURNER ; .)
    ENTIER          reduce using rule 70 (jump_statement -> RETOURNER ; .)
    BOOLEAN         reduce using rule 70 (jump_statement -> RETOURNER ; .)
    IDENTIFIANT     reduce using rule 70 (jump_statement -> RETOURNER ; .)
    NON             reduce using rule 70 (jump_statement -> RETOURNER ; .)
    -               reduce using rule 70 (jump_statement -> RETOURNER ; .)
    $end            reduce using rule 70 (jump_statement -> RETOURNER ; .)
    }               reduce using rule 70 (jump_statement -> RETOURNER ; .)
    SINON           reduce using rule 70 (jump_statement -> RETOURNER ; .)


state 54

    (17) additive_expression -> additive_expression - . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 84
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 55

    (18) additive_expression -> additive_expression + . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 85
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 56

    (34) assignment_expression -> primary_expression assignment_operator . conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    primary_expression             shift and go to state 70
    conditional_expression         shift and go to state 86
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 57

    (35) assignment_operator -> AFFECT .
    NON             reduce using rule 35 (assignment_operator -> AFFECT .)
    -               reduce using rule 35 (assignment_operator -> AFFECT .)
    IDENTIFIANT     reduce using rule 35 (assignment_operator -> AFFECT .)
    (               reduce using rule 35 (assignment_operator -> AFFECT .)
    ENTIER          reduce using rule 35 (assignment_operator -> AFFECT .)
    BOOLEAN         reduce using rule 35 (assignment_operator -> AFFECT .)


state 58

    (30) logical_or_expression -> logical_or_expression OU . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    logical_and_expression         shift and go to state 87
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 59

    (28) logical_and_expression -> logical_and_expression ET . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    equality_expression            shift and go to state 88
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 60

    (25) equality_expression -> equality_expression DIFFERENT . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 89
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 61

    (26) equality_expression -> equality_expression EQUAL . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 90
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 62

    (20) relational_expression -> relational_expression SUPERIEUR_OU_EGAL . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 91
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 63

    (21) relational_expression -> relational_expression INFERIEUR_OU_EGAL . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 92
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 64

    (22) relational_expression -> relational_expression > . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 93
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 65

    (23) relational_expression -> relational_expression < . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 94
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 66

    (13) multiplicative_expression -> multiplicative_expression % . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 67

    (14) multiplicative_expression -> multiplicative_expression / . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 96
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 68

    (15) multiplicative_expression -> multiplicative_expression * . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 97
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 69

    (8) unary_expression -> unary_operator cast_expression .
    %               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    DIFFERENT       reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ET              reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    OU              reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    SEPARATOR       reduce using rule 8 (unary_expression -> unary_operator cast_expression .)


state 70

    (7) postfix_expression -> primary_expression .
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)


state 71

    (52) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (53) function_call -> IDENTIFIANT . ( )
    (5) primary_expression -> IDENTIFIANT .
    (               shift and go to state 43
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)


state 72

    (50) function_declaration_statement -> type IDENTIFIANT ( . arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> type IDENTIFIANT ( . ) compound_statement
    (56) arguments_list_opt -> . declarations_list
    (57) declarations_list -> . declarations_list SEPARATOR declaration
    (58) declarations_list -> . declaration
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (54) type -> . BOOL
    (55) type -> . INT
    )               shift and go to state 100
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    type                           shift and go to state 98
    arguments_list_opt             shift and go to state 99
    declarations_list              shift and go to state 101
    declaration                    shift and go to state 102

state 73

    (48) declaration -> type IDENTIFIANT AFFECT . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    NON             shift and go to state 39
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 71
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 103
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40
    primary_expression             shift and go to state 70

state 74

    (52) function_call -> IDENTIFIANT ( parameters_list_opt . )
    )               shift and go to state 104


state 75

    (53) function_call -> IDENTIFIANT ( ) .
    %               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    /               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    *               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    -               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    +               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    SUPERIEUR_OU_EGAL reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    INFERIEUR_OU_EGAL reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    >               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    <               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    DIFFERENT       reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    EQUAL           reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    ET              reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    OU              reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    ;               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    ,               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    )               reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)
    SEPARATOR       reduce using rule 53 (function_call -> IDENTIFIANT ( ) .)


state 76

    (59) parameters_list_opt -> parameters_list .
    (60) parameters_list -> parameters_list . SEPARATOR assignment_expression
    )               reduce using rule 59 (parameters_list_opt -> parameters_list .)
    SEPARATOR       shift and go to state 105


state 77

    (61) parameters_list -> assignment_expression .
    SEPARATOR       reduce using rule 61 (parameters_list -> assignment_expression .)
    )               reduce using rule 61 (parameters_list -> assignment_expression .)


state 78

    (2) primary_expression -> ( expression ) .
    AFFECT          reduce using rule 2 (primary_expression -> ( expression ) .)
    %               reduce using rule 2 (primary_expression -> ( expression ) .)
    /               reduce using rule 2 (primary_expression -> ( expression ) .)
    *               reduce using rule 2 (primary_expression -> ( expression ) .)
    -               reduce using rule 2 (primary_expression -> ( expression ) .)
    +               reduce using rule 2 (primary_expression -> ( expression ) .)
    SUPERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    INFERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    >               reduce using rule 2 (primary_expression -> ( expression ) .)
    <               reduce using rule 2 (primary_expression -> ( expression ) .)
    DIFFERENT       reduce using rule 2 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 2 (primary_expression -> ( expression ) .)
    ET              reduce using rule 2 (primary_expression -> ( expression ) .)
    OU              reduce using rule 2 (primary_expression -> ( expression ) .)
    ;               reduce using rule 2 (primary_expression -> ( expression ) .)
    ,               reduce using rule 2 (primary_expression -> ( expression ) .)
    )               reduce using rule 2 (primary_expression -> ( expression ) .)
    SEPARATOR       reduce using rule 2 (primary_expression -> ( expression ) .)


state 79

    (68) iteration_statement -> TANTQUE ( expression . ) statement
    (36) expression -> expression . , assignment_expression
    )               shift and go to state 106
    ,               shift and go to state 48


state 80

    (36) expression -> expression , assignment_expression .
    ;               reduce using rule 36 (expression -> expression , assignment_expression .)
    ,               reduce using rule 36 (expression -> expression , assignment_expression .)
    )               reduce using rule 36 (expression -> expression , assignment_expression .)


state 81

    (66) selection_statement -> SI ( expression . ) statement SINON statement
    (67) selection_statement -> SI ( expression . ) statement
    (36) expression -> expression . , assignment_expression
    )               shift and go to state 107
    ,               shift and go to state 48


state 82

    (45) compound_statement -> { statement_list } .
    TANTQUE         reduce using rule 45 (compound_statement -> { statement_list } .)
    SI              reduce using rule 45 (compound_statement -> { statement_list } .)
    ;               reduce using rule 45 (compound_statement -> { statement_list } .)
    {               reduce using rule 45 (compound_statement -> { statement_list } .)
    RETOURNER       reduce using rule 45 (compound_statement -> { statement_list } .)
    BOOL            reduce using rule 45 (compound_statement -> { statement_list } .)
    INT             reduce using rule 45 (compound_statement -> { statement_list } .)
    (               reduce using rule 45 (compound_statement -> { statement_list } .)
    ENTIER          reduce using rule 45 (compound_statement -> { statement_list } .)
    BOOLEAN         reduce using rule 45 (compound_statement -> { statement_list } .)
    IDENTIFIANT     reduce using rule 45 (compound_statement -> { statement_list } .)
    NON             reduce using rule 45 (compound_statement -> { statement_list } .)
    -               reduce using rule 45 (compound_statement -> { statement_list } .)
    $end            reduce using rule 45 (compound_statement -> { statement_list } .)
    }               reduce using rule 45 (compound_statement -> { statement_list } .)
    SINON           reduce using rule 45 (compound_statement -> { statement_list } .)


state 83

    (69) jump_statement -> RETOURNER expression ; .
    TANTQUE         reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    SI              reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    ;               reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    {               reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    RETOURNER       reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    BOOL            reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    INT             reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    (               reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    ENTIER          reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    BOOLEAN         reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    IDENTIFIANT     reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    NON             reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    -               reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    $end            reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    }               reduce using rule 69 (jump_statement -> RETOURNER expression ; .)
    SINON           reduce using rule 69 (jump_statement -> RETOURNER expression ; .)


state 84

    (17) additive_expression -> additive_expression - multiplicative_expression .
    (13) multiplicative_expression -> multiplicative_expression . % cast_expression
    (14) multiplicative_expression -> multiplicative_expression . / cast_expression
    (15) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    +               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    DIFFERENT       reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    ET              reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    OU              reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    SEPARATOR       reduce using rule 17 (additive_expression -> additive_expression - multiplicative_expression .)
    %               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 85

    (18) additive_expression -> additive_expression + multiplicative_expression .
    (13) multiplicative_expression -> multiplicative_expression . % cast_expression
    (14) multiplicative_expression -> multiplicative_expression . / cast_expression
    (15) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    +               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    DIFFERENT       reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    ET              reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    OU              reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    SEPARATOR       reduce using rule 18 (additive_expression -> additive_expression + multiplicative_expression .)
    %               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 86

    (34) assignment_expression -> primary_expression assignment_operator conditional_expression .
    ;               reduce using rule 34 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    ,               reduce using rule 34 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    )               reduce using rule 34 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    SEPARATOR       reduce using rule 34 (assignment_expression -> primary_expression assignment_operator conditional_expression .)


state 87

    (30) logical_or_expression -> logical_or_expression OU logical_and_expression .
    (28) logical_and_expression -> logical_and_expression . ET equality_expression
    OU              reduce using rule 30 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ;               reduce using rule 30 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ,               reduce using rule 30 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    )               reduce using rule 30 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    SEPARATOR       reduce using rule 30 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ET              shift and go to state 59


state 88

    (28) logical_and_expression -> logical_and_expression ET equality_expression .
    (25) equality_expression -> equality_expression . DIFFERENT relational_expression
    (26) equality_expression -> equality_expression . EQUAL relational_expression
    ET              reduce using rule 28 (logical_and_expression -> logical_and_expression ET equality_expression .)
    OU              reduce using rule 28 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ;               reduce using rule 28 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ,               reduce using rule 28 (logical_and_expression -> logical_and_expression ET equality_expression .)
    )               reduce using rule 28 (logical_and_expression -> logical_and_expression ET equality_expression .)
    SEPARATOR       reduce using rule 28 (logical_and_expression -> logical_and_expression ET equality_expression .)
    DIFFERENT       shift and go to state 60
    EQUAL           shift and go to state 61


state 89

    (25) equality_expression -> equality_expression DIFFERENT relational_expression .
    (20) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> relational_expression . > additive_expression
    (23) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    EQUAL           reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ET              reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    OU              reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ;               reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ,               reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    )               reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SEPARATOR       reduce using rule 25 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 62
    INFERIEUR_OU_EGAL shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65


state 90

    (26) equality_expression -> equality_expression EQUAL relational_expression .
    (20) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> relational_expression . > additive_expression
    (23) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    EQUAL           reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    ET              reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    OU              reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEPARATOR       reduce using rule 26 (equality_expression -> equality_expression EQUAL relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 62
    INFERIEUR_OU_EGAL shift and go to state 63
    >               shift and go to state 64
    <               shift and go to state 65


state 91

    (20) relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .
    (17) additive_expression -> additive_expression . - multiplicative_expression
    (18) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 20 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 92

    (21) relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .
    (17) additive_expression -> additive_expression . - multiplicative_expression
    (18) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 21 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 93

    (22) relational_expression -> relational_expression > additive_expression .
    (17) additive_expression -> additive_expression . - multiplicative_expression
    (18) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    DIFFERENT       reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    EQUAL           reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    ET              reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    OU              reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    SEPARATOR       reduce using rule 22 (relational_expression -> relational_expression > additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 94

    (23) relational_expression -> relational_expression < additive_expression .
    (17) additive_expression -> additive_expression . - multiplicative_expression
    (18) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    DIFFERENT       reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    EQUAL           reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    ET              reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    OU              reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    SEPARATOR       reduce using rule 23 (relational_expression -> relational_expression < additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 95

    (13) multiplicative_expression -> multiplicative_expression % cast_expression .
    %               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    *               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    DIFFERENT       reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ET              reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OU              reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SEPARATOR       reduce using rule 13 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 96

    (14) multiplicative_expression -> multiplicative_expression / cast_expression .
    %               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    *               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    DIFFERENT       reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ET              reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OU              reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SEPARATOR       reduce using rule 14 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 97

    (15) multiplicative_expression -> multiplicative_expression * cast_expression .
    %               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    *               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    DIFFERENT       reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ET              reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OU              reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SEPARATOR       reduce using rule 15 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 98

    (48) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (49) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 108


state 99

    (50) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt . ) compound_statement
    )               shift and go to state 109


state 100

    (51) function_declaration_statement -> type IDENTIFIANT ( ) . compound_statement
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 110

state 101

    (56) arguments_list_opt -> declarations_list .
    (57) declarations_list -> declarations_list . SEPARATOR declaration
    )               reduce using rule 56 (arguments_list_opt -> declarations_list .)
    SEPARATOR       shift and go to state 111


state 102

    (58) declarations_list -> declaration .
    SEPARATOR       reduce using rule 58 (declarations_list -> declaration .)
    )               reduce using rule 58 (declarations_list -> declaration .)


state 103

    (48) declaration -> type IDENTIFIANT AFFECT additive_expression .
    (17) additive_expression -> additive_expression . - multiplicative_expression
    (18) additive_expression -> additive_expression . + multiplicative_expression
    ;               reduce using rule 48 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    SEPARATOR       reduce using rule 48 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    )               reduce using rule 48 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    -               shift and go to state 54
    +               shift and go to state 55


state 104

    (52) function_call -> IDENTIFIANT ( parameters_list_opt ) .
    %               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    /               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    *               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    -               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    +               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SUPERIEUR_OU_EGAL reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    INFERIEUR_OU_EGAL reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    >               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    <               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    DIFFERENT       reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    EQUAL           reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ET              reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    OU              reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ;               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ,               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    )               reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SEPARATOR       reduce using rule 52 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)


state 105

    (60) parameters_list -> parameters_list SEPARATOR . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    assignment_expression          shift and go to state 112
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 106

    (68) iteration_statement -> TANTQUE ( expression ) . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 113
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 107

    (66) selection_statement -> SI ( expression ) . statement SINON statement
    (67) selection_statement -> SI ( expression ) . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 114
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 108

    (48) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (49) declaration -> type IDENTIFIANT .
    AFFECT          shift and go to state 73
    SEPARATOR       reduce using rule 49 (declaration -> type IDENTIFIANT .)
    )               reduce using rule 49 (declaration -> type IDENTIFIANT .)


state 109

    (50) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) . compound_statement
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 115

state 110

    (51) function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .
    TANTQUE         reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SI              reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ;               reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    {               reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    RETOURNER       reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOL            reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    INT             reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    (               reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ENTIER          reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOLEAN         reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    IDENTIFIANT     reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    NON             reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    -               reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    $end            reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    }               reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SINON           reduce using rule 51 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)


state 111

    (57) declarations_list -> declarations_list SEPARATOR . declaration
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (54) type -> . BOOL
    (55) type -> . INT
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    declaration                    shift and go to state 116
    type                           shift and go to state 98

state 112

    (60) parameters_list -> parameters_list SEPARATOR assignment_expression .
    SEPARATOR       reduce using rule 60 (parameters_list -> parameters_list SEPARATOR assignment_expression .)
    )               reduce using rule 60 (parameters_list -> parameters_list SEPARATOR assignment_expression .)


state 113

    (68) iteration_statement -> TANTQUE ( expression ) statement .
    TANTQUE         reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    SI              reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    ;               reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    {               reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    RETOURNER       reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOL            reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    INT             reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    (               reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    ENTIER          reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOLEAN         reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    IDENTIFIANT     reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    NON             reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    -               reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    $end            reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    }               reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)
    SINON           reduce using rule 68 (iteration_statement -> TANTQUE ( expression ) statement .)


state 114

    (66) selection_statement -> SI ( expression ) statement . SINON statement
    (67) selection_statement -> SI ( expression ) statement .
  ! shift/reduce conflict for SINON resolved as shift
    SINON           shift and go to state 117
    TANTQUE         reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    SI              reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    ;               reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    {               reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    RETOURNER       reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    BOOL            reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    INT             reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    (               reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    ENTIER          reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    BOOLEAN         reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    IDENTIFIANT     reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    NON             reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    -               reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    $end            reduce using rule 67 (selection_statement -> SI ( expression ) statement .)
    }               reduce using rule 67 (selection_statement -> SI ( expression ) statement .)


state 115

    (50) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .
    TANTQUE         reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SI              reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ;               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    {               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    RETOURNER       reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOL            reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    INT             reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    (               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ENTIER          reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOLEAN         reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    IDENTIFIANT     reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    NON             reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    -               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    $end            reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    }               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SINON           reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)


state 116

    (57) declarations_list -> declarations_list SEPARATOR declaration .
    SEPARATOR       reduce using rule 57 (declarations_list -> declarations_list SEPARATOR declaration .)
    )               reduce using rule 57 (declarations_list -> declarations_list SEPARATOR declaration .)


state 117

    (66) selection_statement -> SI ( expression ) statement SINON . statement
    (38) statement -> . function_declaration_statement
    (39) statement -> . declaration_statement
    (40) statement -> . iteration_statement
    (41) statement -> . selection_statement
    (42) statement -> . expression_statement
    (43) statement -> . compound_statement
    (44) statement -> . jump_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (51) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (47) declaration_statement -> . declaration ;
    (68) iteration_statement -> . TANTQUE ( expression ) statement
    (66) selection_statement -> . SI ( expression ) statement SINON statement
    (67) selection_statement -> . SI ( expression ) statement
    (64) expression_statement -> . expression ;
    (65) expression_statement -> . ;
    (45) compound_statement -> . { statement_list }
    (46) compound_statement -> . { }
    (69) jump_statement -> . RETOURNER expression ;
    (70) jump_statement -> . RETOURNER ;
    (54) type -> . BOOL
    (55) type -> . INT
    (48) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (49) declaration -> . type IDENTIFIANT
    (36) expression -> . expression , assignment_expression
    (37) expression -> . assignment_expression
    (33) assignment_expression -> . conditional_expression
    (34) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (32) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (30) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (31) logical_or_expression -> . logical_and_expression
    (28) logical_and_expression -> . logical_and_expression ET equality_expression
    (29) logical_and_expression -> . equality_expression
    (25) equality_expression -> . equality_expression DIFFERENT relational_expression
    (26) equality_expression -> . equality_expression EQUAL relational_expression
    (27) equality_expression -> . relational_expression
    (20) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (22) relational_expression -> . relational_expression > additive_expression
    (23) relational_expression -> . relational_expression < additive_expression
    (24) relational_expression -> . additive_expression
    (17) additive_expression -> . additive_expression - multiplicative_expression
    (18) additive_expression -> . additive_expression + multiplicative_expression
    (19) additive_expression -> . multiplicative_expression
    (13) multiplicative_expression -> . multiplicative_expression % cast_expression
    (14) multiplicative_expression -> . multiplicative_expression / cast_expression
    (15) multiplicative_expression -> . multiplicative_expression * cast_expression
    (16) multiplicative_expression -> . cast_expression
    (12) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . NON
    (11) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (52) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (53) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    NON             shift and go to state 39
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 118
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 40

state 118

    (66) selection_statement -> SI ( expression ) statement SINON statement .
    TANTQUE         reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    SI              reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    ;               reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    {               reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    RETOURNER       reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOL            reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    INT             reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    (               reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    ENTIER          reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOLEAN         reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    IDENTIFIANT     reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    NON             reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    -               reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    $end            reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    }               reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)
    SINON           reduce using rule 66 (selection_statement -> SI ( expression ) statement SINON statement .)


Conflicts:

shift/reduce conflict for SINON in state 114 resolved as shift
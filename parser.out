Grammar:

Rule 0     S' -> prog
Rule 1     prog -> statement_list
Rule 2     primary_expression -> ( expression )
Rule 3     primary_expression -> ENTIER
Rule 4     primary_expression -> BOOLEAN
Rule 5     primary_expression -> IDENTIFIANT
Rule 6     postfix_expression -> function_call
Rule 7     postfix_expression -> primary_expression
Rule 8     unary_expression -> unary_operator cast_expression
Rule 9     unary_expression -> postfix_expression
Rule 10    unary_operator -> -
Rule 11    cast_expression -> unary_expression
Rule 12    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 13    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 14    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 15    multiplicative_expression -> cast_expression
Rule 16    additive_expression -> additive_expression - multiplicative_expression
Rule 17    additive_expression -> additive_expression + multiplicative_expression
Rule 18    additive_expression -> multiplicative_expression
Rule 19    relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression
Rule 20    relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression
Rule 21    relational_expression -> relational_expression > additive_expression
Rule 22    relational_expression -> relational_expression < additive_expression
Rule 23    relational_expression -> additive_expression
Rule 24    equality_expression -> equality_expression DIFFERENT relational_expression
Rule 25    equality_expression -> equality_expression EQUAL relational_expression
Rule 26    equality_expression -> relational_expression
Rule 27    logical_and_expression -> logical_and_expression ET equality_expression
Rule 28    logical_and_expression -> equality_expression
Rule 29    logical_or_expression -> logical_or_expression OU logical_and_expression
Rule 30    logical_or_expression -> logical_and_expression
Rule 31    conditional_expression -> logical_or_expression
Rule 32    assignment_expression -> conditional_expression
Rule 33    assignment_expression -> primary_expression assignment_operator conditional_expression
Rule 34    assignment_operator -> AFFECT
Rule 35    expression -> expression , assignment_expression
Rule 36    expression -> assignment_expression
Rule 37    statement -> function_declaration_statement
Rule 38    statement -> declaration_statement
Rule 39    statement -> iteration_statement
Rule 40    statement -> selection_statement
Rule 41    statement -> expression_statement
Rule 42    statement -> compound_statement
Rule 43    statement -> jump_statement
Rule 44    compound_statement -> { statement_list }
Rule 45    compound_statement -> { }
Rule 46    declaration_statement -> declaration ;
Rule 47    declaration -> type IDENTIFIANT AFFECT additive_expression
Rule 48    declaration -> type IDENTIFIANT
Rule 49    function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement
Rule 50    function_declaration_statement -> type IDENTIFIANT ( ) compound_statement
Rule 51    function_call -> IDENTIFIANT ( parameters_list_opt )
Rule 52    function_call -> IDENTIFIANT ( )
Rule 53    type -> BOOL
Rule 54    type -> INT
Rule 55    arguments_list_opt -> declarations_list
Rule 56    declarations_list -> declarations_list SEPARATOR declaration
Rule 57    declarations_list -> declaration
Rule 58    parameters_list_opt -> parameters_list
Rule 59    parameters_list -> parameters_list SEPARATOR assignment_expression
Rule 60    parameters_list -> assignment_expression
Rule 61    statement_list -> statement_list statement
Rule 62    statement_list -> statement
Rule 63    expression_statement -> expression ;
Rule 64    expression_statement -> ;
Rule 65    selection_statement -> SI ( expression ) statement SINON statement
Rule 66    selection_statement -> SI ( expression ) statement
Rule 67    iteration_statement -> TANTQUE ( expression ) statement
Rule 68    jump_statement -> RETOURNER expression ;
Rule 69    jump_statement -> RETOURNER ;

Unused terminals:

    LIRE
    NON
    ECRIRE

Terminals, with rules where they appear:

%                    : 12
(                    : 2 49 50 51 52 65 66 67
)                    : 2 49 50 51 52 65 66 67
*                    : 14
+                    : 17
,                    : 35
-                    : 10 16
/                    : 13
;                    : 46 63 64 68 69
<                    : 22
>                    : 21
AFFECT               : 34 47
BOOL                 : 53
BOOLEAN              : 4
DIFFERENT            : 24
ECRIRE               : 
ENTIER               : 3
EQUAL                : 25
ET                   : 27
IDENTIFIANT          : 5 47 48 49 50 51 52
INFERIEUR_OU_EGAL    : 20
INT                  : 54
LIRE                 : 
NON                  : 
OU                   : 29
RETOURNER            : 68 69
SEPARATOR            : 56 59
SI                   : 65 66
SINON                : 65
SUPERIEUR_OU_EGAL    : 19
TANTQUE              : 67
error                : 
{                    : 44 45
}                    : 44 45

Nonterminals, with rules where they appear:

additive_expression  : 16 17 19 20 21 22 23 47
arguments_list_opt   : 49
assignment_expression : 35 36 59 60
assignment_operator  : 33
cast_expression      : 8 12 13 14 15
compound_statement   : 42 49 50
conditional_expression : 32 33
declaration          : 46 56 57
declaration_statement : 38
declarations_list    : 55 56
equality_expression  : 24 25 27 28
expression           : 2 35 63 65 66 67 68
expression_statement : 41
function_call        : 6
function_declaration_statement : 37
iteration_statement  : 39
jump_statement       : 43
logical_and_expression : 27 29 30
logical_or_expression : 29 31
multiplicative_expression : 12 13 14 16 17 18
parameters_list      : 58 59
parameters_list_opt  : 51
postfix_expression   : 9
primary_expression   : 7 33
prog                 : 0
relational_expression : 19 20 21 22 24 25 26
selection_statement  : 40
statement            : 61 62 65 65 66 67
statement_list       : 1 44 61
type                 : 47 48 49 50
unary_expression     : 11
unary_operator       : 8


state 0

    (0) S' -> . prog
    (1) prog -> . statement_list
    (61) statement_list -> . statement_list statement
    (62) statement_list -> . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    prog                           shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 1

    (0) S' -> prog .


state 2

    (1) prog -> statement_list .
    (61) statement_list -> statement_list . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    $end            reduce using rule 1 (prog -> statement_list .)
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    statement                      shift and go to state 40
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 3

    (62) statement_list -> statement .
    TANTQUE         reduce using rule 62 (statement_list -> statement .)
    SI              reduce using rule 62 (statement_list -> statement .)
    ;               reduce using rule 62 (statement_list -> statement .)
    {               reduce using rule 62 (statement_list -> statement .)
    RETOURNER       reduce using rule 62 (statement_list -> statement .)
    BOOL            reduce using rule 62 (statement_list -> statement .)
    INT             reduce using rule 62 (statement_list -> statement .)
    (               reduce using rule 62 (statement_list -> statement .)
    ENTIER          reduce using rule 62 (statement_list -> statement .)
    BOOLEAN         reduce using rule 62 (statement_list -> statement .)
    IDENTIFIANT     reduce using rule 62 (statement_list -> statement .)
    -               reduce using rule 62 (statement_list -> statement .)
    $end            reduce using rule 62 (statement_list -> statement .)
    }               reduce using rule 62 (statement_list -> statement .)


state 4

    (37) statement -> function_declaration_statement .
    TANTQUE         reduce using rule 37 (statement -> function_declaration_statement .)
    SI              reduce using rule 37 (statement -> function_declaration_statement .)
    ;               reduce using rule 37 (statement -> function_declaration_statement .)
    {               reduce using rule 37 (statement -> function_declaration_statement .)
    RETOURNER       reduce using rule 37 (statement -> function_declaration_statement .)
    BOOL            reduce using rule 37 (statement -> function_declaration_statement .)
    INT             reduce using rule 37 (statement -> function_declaration_statement .)
    (               reduce using rule 37 (statement -> function_declaration_statement .)
    ENTIER          reduce using rule 37 (statement -> function_declaration_statement .)
    BOOLEAN         reduce using rule 37 (statement -> function_declaration_statement .)
    IDENTIFIANT     reduce using rule 37 (statement -> function_declaration_statement .)
    -               reduce using rule 37 (statement -> function_declaration_statement .)
    $end            reduce using rule 37 (statement -> function_declaration_statement .)
    }               reduce using rule 37 (statement -> function_declaration_statement .)
    SINON           reduce using rule 37 (statement -> function_declaration_statement .)


state 5

    (38) statement -> declaration_statement .
    TANTQUE         reduce using rule 38 (statement -> declaration_statement .)
    SI              reduce using rule 38 (statement -> declaration_statement .)
    ;               reduce using rule 38 (statement -> declaration_statement .)
    {               reduce using rule 38 (statement -> declaration_statement .)
    RETOURNER       reduce using rule 38 (statement -> declaration_statement .)
    BOOL            reduce using rule 38 (statement -> declaration_statement .)
    INT             reduce using rule 38 (statement -> declaration_statement .)
    (               reduce using rule 38 (statement -> declaration_statement .)
    ENTIER          reduce using rule 38 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 38 (statement -> declaration_statement .)
    IDENTIFIANT     reduce using rule 38 (statement -> declaration_statement .)
    -               reduce using rule 38 (statement -> declaration_statement .)
    $end            reduce using rule 38 (statement -> declaration_statement .)
    }               reduce using rule 38 (statement -> declaration_statement .)
    SINON           reduce using rule 38 (statement -> declaration_statement .)


state 6

    (39) statement -> iteration_statement .
    TANTQUE         reduce using rule 39 (statement -> iteration_statement .)
    SI              reduce using rule 39 (statement -> iteration_statement .)
    ;               reduce using rule 39 (statement -> iteration_statement .)
    {               reduce using rule 39 (statement -> iteration_statement .)
    RETOURNER       reduce using rule 39 (statement -> iteration_statement .)
    BOOL            reduce using rule 39 (statement -> iteration_statement .)
    INT             reduce using rule 39 (statement -> iteration_statement .)
    (               reduce using rule 39 (statement -> iteration_statement .)
    ENTIER          reduce using rule 39 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 39 (statement -> iteration_statement .)
    IDENTIFIANT     reduce using rule 39 (statement -> iteration_statement .)
    -               reduce using rule 39 (statement -> iteration_statement .)
    $end            reduce using rule 39 (statement -> iteration_statement .)
    }               reduce using rule 39 (statement -> iteration_statement .)
    SINON           reduce using rule 39 (statement -> iteration_statement .)


state 7

    (40) statement -> selection_statement .
    TANTQUE         reduce using rule 40 (statement -> selection_statement .)
    SI              reduce using rule 40 (statement -> selection_statement .)
    ;               reduce using rule 40 (statement -> selection_statement .)
    {               reduce using rule 40 (statement -> selection_statement .)
    RETOURNER       reduce using rule 40 (statement -> selection_statement .)
    BOOL            reduce using rule 40 (statement -> selection_statement .)
    INT             reduce using rule 40 (statement -> selection_statement .)
    (               reduce using rule 40 (statement -> selection_statement .)
    ENTIER          reduce using rule 40 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 40 (statement -> selection_statement .)
    IDENTIFIANT     reduce using rule 40 (statement -> selection_statement .)
    -               reduce using rule 40 (statement -> selection_statement .)
    $end            reduce using rule 40 (statement -> selection_statement .)
    }               reduce using rule 40 (statement -> selection_statement .)
    SINON           reduce using rule 40 (statement -> selection_statement .)


state 8

    (41) statement -> expression_statement .
    TANTQUE         reduce using rule 41 (statement -> expression_statement .)
    SI              reduce using rule 41 (statement -> expression_statement .)
    ;               reduce using rule 41 (statement -> expression_statement .)
    {               reduce using rule 41 (statement -> expression_statement .)
    RETOURNER       reduce using rule 41 (statement -> expression_statement .)
    BOOL            reduce using rule 41 (statement -> expression_statement .)
    INT             reduce using rule 41 (statement -> expression_statement .)
    (               reduce using rule 41 (statement -> expression_statement .)
    ENTIER          reduce using rule 41 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 41 (statement -> expression_statement .)
    IDENTIFIANT     reduce using rule 41 (statement -> expression_statement .)
    -               reduce using rule 41 (statement -> expression_statement .)
    $end            reduce using rule 41 (statement -> expression_statement .)
    }               reduce using rule 41 (statement -> expression_statement .)
    SINON           reduce using rule 41 (statement -> expression_statement .)


state 9

    (42) statement -> compound_statement .
    TANTQUE         reduce using rule 42 (statement -> compound_statement .)
    SI              reduce using rule 42 (statement -> compound_statement .)
    ;               reduce using rule 42 (statement -> compound_statement .)
    {               reduce using rule 42 (statement -> compound_statement .)
    RETOURNER       reduce using rule 42 (statement -> compound_statement .)
    BOOL            reduce using rule 42 (statement -> compound_statement .)
    INT             reduce using rule 42 (statement -> compound_statement .)
    (               reduce using rule 42 (statement -> compound_statement .)
    ENTIER          reduce using rule 42 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 42 (statement -> compound_statement .)
    IDENTIFIANT     reduce using rule 42 (statement -> compound_statement .)
    -               reduce using rule 42 (statement -> compound_statement .)
    $end            reduce using rule 42 (statement -> compound_statement .)
    }               reduce using rule 42 (statement -> compound_statement .)
    SINON           reduce using rule 42 (statement -> compound_statement .)


state 10

    (43) statement -> jump_statement .
    TANTQUE         reduce using rule 43 (statement -> jump_statement .)
    SI              reduce using rule 43 (statement -> jump_statement .)
    ;               reduce using rule 43 (statement -> jump_statement .)
    {               reduce using rule 43 (statement -> jump_statement .)
    RETOURNER       reduce using rule 43 (statement -> jump_statement .)
    BOOL            reduce using rule 43 (statement -> jump_statement .)
    INT             reduce using rule 43 (statement -> jump_statement .)
    (               reduce using rule 43 (statement -> jump_statement .)
    ENTIER          reduce using rule 43 (statement -> jump_statement .)
    BOOLEAN         reduce using rule 43 (statement -> jump_statement .)
    IDENTIFIANT     reduce using rule 43 (statement -> jump_statement .)
    -               reduce using rule 43 (statement -> jump_statement .)
    $end            reduce using rule 43 (statement -> jump_statement .)
    }               reduce using rule 43 (statement -> jump_statement .)
    SINON           reduce using rule 43 (statement -> jump_statement .)


state 11

    (49) function_declaration_statement -> type . IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> type . IDENTIFIANT ( ) compound_statement
    (47) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (48) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 41


state 12

    (5) primary_expression -> IDENTIFIANT .
    (51) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (52) function_call -> IDENTIFIANT . ( )
    AFFECT          reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    (               shift and go to state 42


state 13

    (2) primary_expression -> ( . expression )
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 43
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 14

    (46) declaration_statement -> declaration . ;
    ;               shift and go to state 44


state 15

    (64) expression_statement -> ; .
    TANTQUE         reduce using rule 64 (expression_statement -> ; .)
    SI              reduce using rule 64 (expression_statement -> ; .)
    ;               reduce using rule 64 (expression_statement -> ; .)
    {               reduce using rule 64 (expression_statement -> ; .)
    RETOURNER       reduce using rule 64 (expression_statement -> ; .)
    BOOL            reduce using rule 64 (expression_statement -> ; .)
    INT             reduce using rule 64 (expression_statement -> ; .)
    (               reduce using rule 64 (expression_statement -> ; .)
    ENTIER          reduce using rule 64 (expression_statement -> ; .)
    BOOLEAN         reduce using rule 64 (expression_statement -> ; .)
    IDENTIFIANT     reduce using rule 64 (expression_statement -> ; .)
    -               reduce using rule 64 (expression_statement -> ; .)
    $end            reduce using rule 64 (expression_statement -> ; .)
    }               reduce using rule 64 (expression_statement -> ; .)
    SINON           reduce using rule 64 (expression_statement -> ; .)


state 16

    (67) iteration_statement -> TANTQUE . ( expression ) statement
    (               shift and go to state 45


state 17

    (63) expression_statement -> expression . ;
    (35) expression -> expression . , assignment_expression
    ;               shift and go to state 46
    ,               shift and go to state 47


state 18

    (65) selection_statement -> SI . ( expression ) statement SINON statement
    (66) selection_statement -> SI . ( expression ) statement
    (               shift and go to state 48


state 19

    (44) compound_statement -> { . statement_list }
    (45) compound_statement -> { . }
    (61) statement_list -> . statement_list statement
    (62) statement_list -> . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 50
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    statement_list                 shift and go to state 49
    statement                      shift and go to state 3
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 20

    (68) jump_statement -> RETOURNER . expression ;
    (69) jump_statement -> RETOURNER . ;
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    ;               shift and go to state 52
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 51
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 21

    (53) type -> BOOL .
    IDENTIFIANT     reduce using rule 53 (type -> BOOL .)


state 22

    (54) type -> INT .
    IDENTIFIANT     reduce using rule 54 (type -> INT .)


state 23

    (23) relational_expression -> additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 23 (relational_expression -> additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 23 (relational_expression -> additive_expression .)
    >               reduce using rule 23 (relational_expression -> additive_expression .)
    <               reduce using rule 23 (relational_expression -> additive_expression .)
    DIFFERENT       reduce using rule 23 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 23 (relational_expression -> additive_expression .)
    ET              reduce using rule 23 (relational_expression -> additive_expression .)
    OU              reduce using rule 23 (relational_expression -> additive_expression .)
    ;               reduce using rule 23 (relational_expression -> additive_expression .)
    ,               reduce using rule 23 (relational_expression -> additive_expression .)
    )               reduce using rule 23 (relational_expression -> additive_expression .)
    SEPARATOR       reduce using rule 23 (relational_expression -> additive_expression .)
    -               shift and go to state 53
    +               shift and go to state 54


state 24

    (36) expression -> assignment_expression .
    ;               reduce using rule 36 (expression -> assignment_expression .)
    ,               reduce using rule 36 (expression -> assignment_expression .)
    )               reduce using rule 36 (expression -> assignment_expression .)


state 25

    (32) assignment_expression -> conditional_expression .
    ;               reduce using rule 32 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 32 (assignment_expression -> conditional_expression .)
    )               reduce using rule 32 (assignment_expression -> conditional_expression .)
    SEPARATOR       reduce using rule 32 (assignment_expression -> conditional_expression .)


state 26

    (33) assignment_expression -> primary_expression . assignment_operator conditional_expression
    (7) postfix_expression -> primary_expression .
    (34) assignment_operator -> . AFFECT
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)
    AFFECT          shift and go to state 56

    assignment_operator            shift and go to state 55

state 27

    (31) conditional_expression -> logical_or_expression .
    (29) logical_or_expression -> logical_or_expression . OU logical_and_expression
    ;               reduce using rule 31 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 31 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 31 (conditional_expression -> logical_or_expression .)
    SEPARATOR       reduce using rule 31 (conditional_expression -> logical_or_expression .)
    OU              shift and go to state 57


state 28

    (3) primary_expression -> ENTIER .
    AFFECT          reduce using rule 3 (primary_expression -> ENTIER .)
    %               reduce using rule 3 (primary_expression -> ENTIER .)
    /               reduce using rule 3 (primary_expression -> ENTIER .)
    *               reduce using rule 3 (primary_expression -> ENTIER .)
    -               reduce using rule 3 (primary_expression -> ENTIER .)
    +               reduce using rule 3 (primary_expression -> ENTIER .)
    SUPERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    INFERIEUR_OU_EGAL reduce using rule 3 (primary_expression -> ENTIER .)
    >               reduce using rule 3 (primary_expression -> ENTIER .)
    <               reduce using rule 3 (primary_expression -> ENTIER .)
    DIFFERENT       reduce using rule 3 (primary_expression -> ENTIER .)
    EQUAL           reduce using rule 3 (primary_expression -> ENTIER .)
    ET              reduce using rule 3 (primary_expression -> ENTIER .)
    OU              reduce using rule 3 (primary_expression -> ENTIER .)
    ;               reduce using rule 3 (primary_expression -> ENTIER .)
    ,               reduce using rule 3 (primary_expression -> ENTIER .)
    )               reduce using rule 3 (primary_expression -> ENTIER .)
    SEPARATOR       reduce using rule 3 (primary_expression -> ENTIER .)


state 29

    (4) primary_expression -> BOOLEAN .
    AFFECT          reduce using rule 4 (primary_expression -> BOOLEAN .)
    %               reduce using rule 4 (primary_expression -> BOOLEAN .)
    /               reduce using rule 4 (primary_expression -> BOOLEAN .)
    *               reduce using rule 4 (primary_expression -> BOOLEAN .)
    -               reduce using rule 4 (primary_expression -> BOOLEAN .)
    +               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SUPERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    INFERIEUR_OU_EGAL reduce using rule 4 (primary_expression -> BOOLEAN .)
    >               reduce using rule 4 (primary_expression -> BOOLEAN .)
    <               reduce using rule 4 (primary_expression -> BOOLEAN .)
    DIFFERENT       reduce using rule 4 (primary_expression -> BOOLEAN .)
    EQUAL           reduce using rule 4 (primary_expression -> BOOLEAN .)
    ET              reduce using rule 4 (primary_expression -> BOOLEAN .)
    OU              reduce using rule 4 (primary_expression -> BOOLEAN .)
    ;               reduce using rule 4 (primary_expression -> BOOLEAN .)
    ,               reduce using rule 4 (primary_expression -> BOOLEAN .)
    )               reduce using rule 4 (primary_expression -> BOOLEAN .)
    SEPARATOR       reduce using rule 4 (primary_expression -> BOOLEAN .)


state 30

    (30) logical_or_expression -> logical_and_expression .
    (27) logical_and_expression -> logical_and_expression . ET equality_expression
    OU              reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    SEPARATOR       reduce using rule 30 (logical_or_expression -> logical_and_expression .)
    ET              shift and go to state 58


state 31

    (28) logical_and_expression -> equality_expression .
    (24) equality_expression -> equality_expression . DIFFERENT relational_expression
    (25) equality_expression -> equality_expression . EQUAL relational_expression
    ET              reduce using rule 28 (logical_and_expression -> equality_expression .)
    OU              reduce using rule 28 (logical_and_expression -> equality_expression .)
    ;               reduce using rule 28 (logical_and_expression -> equality_expression .)
    ,               reduce using rule 28 (logical_and_expression -> equality_expression .)
    )               reduce using rule 28 (logical_and_expression -> equality_expression .)
    SEPARATOR       reduce using rule 28 (logical_and_expression -> equality_expression .)
    DIFFERENT       shift and go to state 59
    EQUAL           shift and go to state 60


state 32

    (26) equality_expression -> relational_expression .
    (19) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . > additive_expression
    (22) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 26 (equality_expression -> relational_expression .)
    EQUAL           reduce using rule 26 (equality_expression -> relational_expression .)
    ET              reduce using rule 26 (equality_expression -> relational_expression .)
    OU              reduce using rule 26 (equality_expression -> relational_expression .)
    ;               reduce using rule 26 (equality_expression -> relational_expression .)
    ,               reduce using rule 26 (equality_expression -> relational_expression .)
    )               reduce using rule 26 (equality_expression -> relational_expression .)
    SEPARATOR       reduce using rule 26 (equality_expression -> relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 61
    INFERIEUR_OU_EGAL shift and go to state 62
    >               shift and go to state 63
    <               shift and go to state 64


state 33

    (10) unary_operator -> - .
    -               reduce using rule 10 (unary_operator -> - .)
    IDENTIFIANT     reduce using rule 10 (unary_operator -> - .)
    (               reduce using rule 10 (unary_operator -> - .)
    ENTIER          reduce using rule 10 (unary_operator -> - .)
    BOOLEAN         reduce using rule 10 (unary_operator -> - .)


state 34

    (18) additive_expression -> multiplicative_expression .
    (12) multiplicative_expression -> multiplicative_expression . % cast_expression
    (13) multiplicative_expression -> multiplicative_expression . / cast_expression
    (14) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    +               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 18 (additive_expression -> multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 18 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    DIFFERENT       reduce using rule 18 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 18 (additive_expression -> multiplicative_expression .)
    ET              reduce using rule 18 (additive_expression -> multiplicative_expression .)
    OU              reduce using rule 18 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 18 (additive_expression -> multiplicative_expression .)
    SEPARATOR       reduce using rule 18 (additive_expression -> multiplicative_expression .)
    %               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 35

    (15) multiplicative_expression -> cast_expression .
    %               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    *               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 15 (multiplicative_expression -> cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 15 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    DIFFERENT       reduce using rule 15 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 15 (multiplicative_expression -> cast_expression .)
    ET              reduce using rule 15 (multiplicative_expression -> cast_expression .)
    OU              reduce using rule 15 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 15 (multiplicative_expression -> cast_expression .)
    SEPARATOR       reduce using rule 15 (multiplicative_expression -> cast_expression .)


state 36

    (11) cast_expression -> unary_expression .
    %               reduce using rule 11 (cast_expression -> unary_expression .)
    /               reduce using rule 11 (cast_expression -> unary_expression .)
    *               reduce using rule 11 (cast_expression -> unary_expression .)
    -               reduce using rule 11 (cast_expression -> unary_expression .)
    +               reduce using rule 11 (cast_expression -> unary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 11 (cast_expression -> unary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 11 (cast_expression -> unary_expression .)
    >               reduce using rule 11 (cast_expression -> unary_expression .)
    <               reduce using rule 11 (cast_expression -> unary_expression .)
    DIFFERENT       reduce using rule 11 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 11 (cast_expression -> unary_expression .)
    ET              reduce using rule 11 (cast_expression -> unary_expression .)
    OU              reduce using rule 11 (cast_expression -> unary_expression .)
    ;               reduce using rule 11 (cast_expression -> unary_expression .)
    ,               reduce using rule 11 (cast_expression -> unary_expression .)
    )               reduce using rule 11 (cast_expression -> unary_expression .)
    SEPARATOR       reduce using rule 11 (cast_expression -> unary_expression .)


state 37

    (8) unary_expression -> unary_operator . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    unary_operator                 shift and go to state 37
    cast_expression                shift and go to state 68
    unary_expression               shift and go to state 36
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 38

    (9) unary_expression -> postfix_expression .
    %               reduce using rule 9 (unary_expression -> postfix_expression .)
    /               reduce using rule 9 (unary_expression -> postfix_expression .)
    *               reduce using rule 9 (unary_expression -> postfix_expression .)
    -               reduce using rule 9 (unary_expression -> postfix_expression .)
    +               reduce using rule 9 (unary_expression -> postfix_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> postfix_expression .)
    INFERIEUR_OU_EGAL reduce using rule 9 (unary_expression -> postfix_expression .)
    >               reduce using rule 9 (unary_expression -> postfix_expression .)
    <               reduce using rule 9 (unary_expression -> postfix_expression .)
    DIFFERENT       reduce using rule 9 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 9 (unary_expression -> postfix_expression .)
    ET              reduce using rule 9 (unary_expression -> postfix_expression .)
    OU              reduce using rule 9 (unary_expression -> postfix_expression .)
    ;               reduce using rule 9 (unary_expression -> postfix_expression .)
    ,               reduce using rule 9 (unary_expression -> postfix_expression .)
    )               reduce using rule 9 (unary_expression -> postfix_expression .)
    SEPARATOR       reduce using rule 9 (unary_expression -> postfix_expression .)


state 39

    (6) postfix_expression -> function_call .
    %               reduce using rule 6 (postfix_expression -> function_call .)
    /               reduce using rule 6 (postfix_expression -> function_call .)
    *               reduce using rule 6 (postfix_expression -> function_call .)
    -               reduce using rule 6 (postfix_expression -> function_call .)
    +               reduce using rule 6 (postfix_expression -> function_call .)
    SUPERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    INFERIEUR_OU_EGAL reduce using rule 6 (postfix_expression -> function_call .)
    >               reduce using rule 6 (postfix_expression -> function_call .)
    <               reduce using rule 6 (postfix_expression -> function_call .)
    DIFFERENT       reduce using rule 6 (postfix_expression -> function_call .)
    EQUAL           reduce using rule 6 (postfix_expression -> function_call .)
    ET              reduce using rule 6 (postfix_expression -> function_call .)
    OU              reduce using rule 6 (postfix_expression -> function_call .)
    ;               reduce using rule 6 (postfix_expression -> function_call .)
    ,               reduce using rule 6 (postfix_expression -> function_call .)
    )               reduce using rule 6 (postfix_expression -> function_call .)
    SEPARATOR       reduce using rule 6 (postfix_expression -> function_call .)


state 40

    (61) statement_list -> statement_list statement .
    TANTQUE         reduce using rule 61 (statement_list -> statement_list statement .)
    SI              reduce using rule 61 (statement_list -> statement_list statement .)
    ;               reduce using rule 61 (statement_list -> statement_list statement .)
    {               reduce using rule 61 (statement_list -> statement_list statement .)
    RETOURNER       reduce using rule 61 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 61 (statement_list -> statement_list statement .)
    INT             reduce using rule 61 (statement_list -> statement_list statement .)
    (               reduce using rule 61 (statement_list -> statement_list statement .)
    ENTIER          reduce using rule 61 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 61 (statement_list -> statement_list statement .)
    IDENTIFIANT     reduce using rule 61 (statement_list -> statement_list statement .)
    -               reduce using rule 61 (statement_list -> statement_list statement .)
    $end            reduce using rule 61 (statement_list -> statement_list statement .)
    }               reduce using rule 61 (statement_list -> statement_list statement .)


state 41

    (49) function_declaration_statement -> type IDENTIFIANT . ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> type IDENTIFIANT . ( ) compound_statement
    (47) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (48) declaration -> type IDENTIFIANT .
    (               shift and go to state 71
    AFFECT          shift and go to state 72
    ;               reduce using rule 48 (declaration -> type IDENTIFIANT .)


state 42

    (51) function_call -> IDENTIFIANT ( . parameters_list_opt )
    (52) function_call -> IDENTIFIANT ( . )
    (58) parameters_list_opt -> . parameters_list
    (59) parameters_list -> . parameters_list SEPARATOR assignment_expression
    (60) parameters_list -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    )               shift and go to state 74
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    parameters_list_opt            shift and go to state 73
    parameters_list                shift and go to state 75
    assignment_expression          shift and go to state 76
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 43

    (2) primary_expression -> ( expression . )
    (35) expression -> expression . , assignment_expression
    )               shift and go to state 77
    ,               shift and go to state 47


state 44

    (46) declaration_statement -> declaration ; .
    TANTQUE         reduce using rule 46 (declaration_statement -> declaration ; .)
    SI              reduce using rule 46 (declaration_statement -> declaration ; .)
    ;               reduce using rule 46 (declaration_statement -> declaration ; .)
    {               reduce using rule 46 (declaration_statement -> declaration ; .)
    RETOURNER       reduce using rule 46 (declaration_statement -> declaration ; .)
    BOOL            reduce using rule 46 (declaration_statement -> declaration ; .)
    INT             reduce using rule 46 (declaration_statement -> declaration ; .)
    (               reduce using rule 46 (declaration_statement -> declaration ; .)
    ENTIER          reduce using rule 46 (declaration_statement -> declaration ; .)
    BOOLEAN         reduce using rule 46 (declaration_statement -> declaration ; .)
    IDENTIFIANT     reduce using rule 46 (declaration_statement -> declaration ; .)
    -               reduce using rule 46 (declaration_statement -> declaration ; .)
    $end            reduce using rule 46 (declaration_statement -> declaration ; .)
    }               reduce using rule 46 (declaration_statement -> declaration ; .)
    SINON           reduce using rule 46 (declaration_statement -> declaration ; .)


state 45

    (67) iteration_statement -> TANTQUE ( . expression ) statement
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 78
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 46

    (63) expression_statement -> expression ; .
    TANTQUE         reduce using rule 63 (expression_statement -> expression ; .)
    SI              reduce using rule 63 (expression_statement -> expression ; .)
    ;               reduce using rule 63 (expression_statement -> expression ; .)
    {               reduce using rule 63 (expression_statement -> expression ; .)
    RETOURNER       reduce using rule 63 (expression_statement -> expression ; .)
    BOOL            reduce using rule 63 (expression_statement -> expression ; .)
    INT             reduce using rule 63 (expression_statement -> expression ; .)
    (               reduce using rule 63 (expression_statement -> expression ; .)
    ENTIER          reduce using rule 63 (expression_statement -> expression ; .)
    BOOLEAN         reduce using rule 63 (expression_statement -> expression ; .)
    IDENTIFIANT     reduce using rule 63 (expression_statement -> expression ; .)
    -               reduce using rule 63 (expression_statement -> expression ; .)
    $end            reduce using rule 63 (expression_statement -> expression ; .)
    }               reduce using rule 63 (expression_statement -> expression ; .)
    SINON           reduce using rule 63 (expression_statement -> expression ; .)


state 47

    (35) expression -> expression , . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    assignment_expression          shift and go to state 79
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 48

    (65) selection_statement -> SI ( . expression ) statement SINON statement
    (66) selection_statement -> SI ( . expression ) statement
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 80
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 49

    (44) compound_statement -> { statement_list . }
    (61) statement_list -> statement_list . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    }               shift and go to state 81
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    statement                      shift and go to state 40
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    expression                     shift and go to state 17
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 50

    (45) compound_statement -> { } .
    TANTQUE         reduce using rule 45 (compound_statement -> { } .)
    SI              reduce using rule 45 (compound_statement -> { } .)
    ;               reduce using rule 45 (compound_statement -> { } .)
    {               reduce using rule 45 (compound_statement -> { } .)
    RETOURNER       reduce using rule 45 (compound_statement -> { } .)
    BOOL            reduce using rule 45 (compound_statement -> { } .)
    INT             reduce using rule 45 (compound_statement -> { } .)
    (               reduce using rule 45 (compound_statement -> { } .)
    ENTIER          reduce using rule 45 (compound_statement -> { } .)
    BOOLEAN         reduce using rule 45 (compound_statement -> { } .)
    IDENTIFIANT     reduce using rule 45 (compound_statement -> { } .)
    -               reduce using rule 45 (compound_statement -> { } .)
    $end            reduce using rule 45 (compound_statement -> { } .)
    }               reduce using rule 45 (compound_statement -> { } .)
    SINON           reduce using rule 45 (compound_statement -> { } .)


state 51

    (68) jump_statement -> RETOURNER expression . ;
    (35) expression -> expression . , assignment_expression
    ;               shift and go to state 82
    ,               shift and go to state 47


state 52

    (69) jump_statement -> RETOURNER ; .
    TANTQUE         reduce using rule 69 (jump_statement -> RETOURNER ; .)
    SI              reduce using rule 69 (jump_statement -> RETOURNER ; .)
    ;               reduce using rule 69 (jump_statement -> RETOURNER ; .)
    {               reduce using rule 69 (jump_statement -> RETOURNER ; .)
    RETOURNER       reduce using rule 69 (jump_statement -> RETOURNER ; .)
    BOOL            reduce using rule 69 (jump_statement -> RETOURNER ; .)
    INT             reduce using rule 69 (jump_statement -> RETOURNER ; .)
    (               reduce using rule 69 (jump_statement -> RETOURNER ; .)
    ENTIER          reduce using rule 69 (jump_statement -> RETOURNER ; .)
    BOOLEAN         reduce using rule 69 (jump_statement -> RETOURNER ; .)
    IDENTIFIANT     reduce using rule 69 (jump_statement -> RETOURNER ; .)
    -               reduce using rule 69 (jump_statement -> RETOURNER ; .)
    $end            reduce using rule 69 (jump_statement -> RETOURNER ; .)
    }               reduce using rule 69 (jump_statement -> RETOURNER ; .)
    SINON           reduce using rule 69 (jump_statement -> RETOURNER ; .)


state 53

    (16) additive_expression -> additive_expression - . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 83
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 54

    (17) additive_expression -> additive_expression + . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    multiplicative_expression      shift and go to state 84
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 55

    (33) assignment_expression -> primary_expression assignment_operator . conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    primary_expression             shift and go to state 69
    conditional_expression         shift and go to state 85
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 56

    (34) assignment_operator -> AFFECT .
    -               reduce using rule 34 (assignment_operator -> AFFECT .)
    IDENTIFIANT     reduce using rule 34 (assignment_operator -> AFFECT .)
    (               reduce using rule 34 (assignment_operator -> AFFECT .)
    ENTIER          reduce using rule 34 (assignment_operator -> AFFECT .)
    BOOLEAN         reduce using rule 34 (assignment_operator -> AFFECT .)


state 57

    (29) logical_or_expression -> logical_or_expression OU . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    logical_and_expression         shift and go to state 86
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 58

    (27) logical_and_expression -> logical_and_expression ET . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    equality_expression            shift and go to state 87
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 59

    (24) equality_expression -> equality_expression DIFFERENT . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 88
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 60

    (25) equality_expression -> equality_expression EQUAL . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    relational_expression          shift and go to state 89
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 61

    (19) relational_expression -> relational_expression SUPERIEUR_OU_EGAL . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 90
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 62

    (20) relational_expression -> relational_expression INFERIEUR_OU_EGAL . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 91
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 63

    (21) relational_expression -> relational_expression > . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 92
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 64

    (22) relational_expression -> relational_expression < . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 93
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 65

    (12) multiplicative_expression -> multiplicative_expression % . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 94
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 66

    (13) multiplicative_expression -> multiplicative_expression / . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 95
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 67

    (14) multiplicative_expression -> multiplicative_expression * . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    cast_expression                shift and go to state 96
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 68

    (8) unary_expression -> unary_operator cast_expression .
    %               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    DIFFERENT       reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ET              reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    OU              reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 8 (unary_expression -> unary_operator cast_expression .)
    SEPARATOR       reduce using rule 8 (unary_expression -> unary_operator cast_expression .)


state 69

    (7) postfix_expression -> primary_expression .
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    INFERIEUR_OU_EGAL reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    DIFFERENT       reduce using rule 7 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 7 (postfix_expression -> primary_expression .)
    ET              reduce using rule 7 (postfix_expression -> primary_expression .)
    OU              reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    SEPARATOR       reduce using rule 7 (postfix_expression -> primary_expression .)


state 70

    (51) function_call -> IDENTIFIANT . ( parameters_list_opt )
    (52) function_call -> IDENTIFIANT . ( )
    (5) primary_expression -> IDENTIFIANT .
    (               shift and go to state 42
    %               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    /               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    *               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    -               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    +               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SUPERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    INFERIEUR_OU_EGAL reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    >               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    <               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    DIFFERENT       reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    EQUAL           reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ET              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    OU              reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ;               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    ,               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    )               reduce using rule 5 (primary_expression -> IDENTIFIANT .)
    SEPARATOR       reduce using rule 5 (primary_expression -> IDENTIFIANT .)


state 71

    (49) function_declaration_statement -> type IDENTIFIANT ( . arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> type IDENTIFIANT ( . ) compound_statement
    (55) arguments_list_opt -> . declarations_list
    (56) declarations_list -> . declarations_list SEPARATOR declaration
    (57) declarations_list -> . declaration
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (53) type -> . BOOL
    (54) type -> . INT
    )               shift and go to state 99
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    type                           shift and go to state 97
    arguments_list_opt             shift and go to state 98
    declarations_list              shift and go to state 100
    declaration                    shift and go to state 101

state 72

    (47) declaration -> type IDENTIFIANT AFFECT . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    -               shift and go to state 33
    IDENTIFIANT     shift and go to state 70
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29

    additive_expression            shift and go to state 102
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39
    primary_expression             shift and go to state 69

state 73

    (51) function_call -> IDENTIFIANT ( parameters_list_opt . )
    )               shift and go to state 103


state 74

    (52) function_call -> IDENTIFIANT ( ) .
    %               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    /               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    *               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    -               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    +               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    SUPERIEUR_OU_EGAL reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    INFERIEUR_OU_EGAL reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    >               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    <               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    DIFFERENT       reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    EQUAL           reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    ET              reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    OU              reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    ;               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    ,               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    )               reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)
    SEPARATOR       reduce using rule 52 (function_call -> IDENTIFIANT ( ) .)


state 75

    (58) parameters_list_opt -> parameters_list .
    (59) parameters_list -> parameters_list . SEPARATOR assignment_expression
    )               reduce using rule 58 (parameters_list_opt -> parameters_list .)
    SEPARATOR       shift and go to state 104


state 76

    (60) parameters_list -> assignment_expression .
    SEPARATOR       reduce using rule 60 (parameters_list -> assignment_expression .)
    )               reduce using rule 60 (parameters_list -> assignment_expression .)


state 77

    (2) primary_expression -> ( expression ) .
    AFFECT          reduce using rule 2 (primary_expression -> ( expression ) .)
    %               reduce using rule 2 (primary_expression -> ( expression ) .)
    /               reduce using rule 2 (primary_expression -> ( expression ) .)
    *               reduce using rule 2 (primary_expression -> ( expression ) .)
    -               reduce using rule 2 (primary_expression -> ( expression ) .)
    +               reduce using rule 2 (primary_expression -> ( expression ) .)
    SUPERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    INFERIEUR_OU_EGAL reduce using rule 2 (primary_expression -> ( expression ) .)
    >               reduce using rule 2 (primary_expression -> ( expression ) .)
    <               reduce using rule 2 (primary_expression -> ( expression ) .)
    DIFFERENT       reduce using rule 2 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 2 (primary_expression -> ( expression ) .)
    ET              reduce using rule 2 (primary_expression -> ( expression ) .)
    OU              reduce using rule 2 (primary_expression -> ( expression ) .)
    ;               reduce using rule 2 (primary_expression -> ( expression ) .)
    ,               reduce using rule 2 (primary_expression -> ( expression ) .)
    )               reduce using rule 2 (primary_expression -> ( expression ) .)
    SEPARATOR       reduce using rule 2 (primary_expression -> ( expression ) .)


state 78

    (67) iteration_statement -> TANTQUE ( expression . ) statement
    (35) expression -> expression . , assignment_expression
    )               shift and go to state 105
    ,               shift and go to state 47


state 79

    (35) expression -> expression , assignment_expression .
    ;               reduce using rule 35 (expression -> expression , assignment_expression .)
    ,               reduce using rule 35 (expression -> expression , assignment_expression .)
    )               reduce using rule 35 (expression -> expression , assignment_expression .)


state 80

    (65) selection_statement -> SI ( expression . ) statement SINON statement
    (66) selection_statement -> SI ( expression . ) statement
    (35) expression -> expression . , assignment_expression
    )               shift and go to state 106
    ,               shift and go to state 47


state 81

    (44) compound_statement -> { statement_list } .
    TANTQUE         reduce using rule 44 (compound_statement -> { statement_list } .)
    SI              reduce using rule 44 (compound_statement -> { statement_list } .)
    ;               reduce using rule 44 (compound_statement -> { statement_list } .)
    {               reduce using rule 44 (compound_statement -> { statement_list } .)
    RETOURNER       reduce using rule 44 (compound_statement -> { statement_list } .)
    BOOL            reduce using rule 44 (compound_statement -> { statement_list } .)
    INT             reduce using rule 44 (compound_statement -> { statement_list } .)
    (               reduce using rule 44 (compound_statement -> { statement_list } .)
    ENTIER          reduce using rule 44 (compound_statement -> { statement_list } .)
    BOOLEAN         reduce using rule 44 (compound_statement -> { statement_list } .)
    IDENTIFIANT     reduce using rule 44 (compound_statement -> { statement_list } .)
    -               reduce using rule 44 (compound_statement -> { statement_list } .)
    $end            reduce using rule 44 (compound_statement -> { statement_list } .)
    }               reduce using rule 44 (compound_statement -> { statement_list } .)
    SINON           reduce using rule 44 (compound_statement -> { statement_list } .)


state 82

    (68) jump_statement -> RETOURNER expression ; .
    TANTQUE         reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    SI              reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    ;               reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    {               reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    RETOURNER       reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    BOOL            reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    INT             reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    (               reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    ENTIER          reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    BOOLEAN         reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    IDENTIFIANT     reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    -               reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    $end            reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    }               reduce using rule 68 (jump_statement -> RETOURNER expression ; .)
    SINON           reduce using rule 68 (jump_statement -> RETOURNER expression ; .)


state 83

    (16) additive_expression -> additive_expression - multiplicative_expression .
    (12) multiplicative_expression -> multiplicative_expression . % cast_expression
    (13) multiplicative_expression -> multiplicative_expression . / cast_expression
    (14) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    +               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    DIFFERENT       reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    ET              reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    OU              reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    SEPARATOR       reduce using rule 16 (additive_expression -> additive_expression - multiplicative_expression .)
    %               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 84

    (17) additive_expression -> additive_expression + multiplicative_expression .
    (12) multiplicative_expression -> multiplicative_expression . % cast_expression
    (13) multiplicative_expression -> multiplicative_expression . / cast_expression
    (14) multiplicative_expression -> multiplicative_expression . * cast_expression
    -               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    +               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    INFERIEUR_OU_EGAL reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    DIFFERENT       reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    ET              reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    OU              reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    SEPARATOR       reduce using rule 17 (additive_expression -> additive_expression + multiplicative_expression .)
    %               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67


state 85

    (33) assignment_expression -> primary_expression assignment_operator conditional_expression .
    ;               reduce using rule 33 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    ,               reduce using rule 33 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    )               reduce using rule 33 (assignment_expression -> primary_expression assignment_operator conditional_expression .)
    SEPARATOR       reduce using rule 33 (assignment_expression -> primary_expression assignment_operator conditional_expression .)


state 86

    (29) logical_or_expression -> logical_or_expression OU logical_and_expression .
    (27) logical_and_expression -> logical_and_expression . ET equality_expression
    OU              reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ;               reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ,               reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    )               reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    SEPARATOR       reduce using rule 29 (logical_or_expression -> logical_or_expression OU logical_and_expression .)
    ET              shift and go to state 58


state 87

    (27) logical_and_expression -> logical_and_expression ET equality_expression .
    (24) equality_expression -> equality_expression . DIFFERENT relational_expression
    (25) equality_expression -> equality_expression . EQUAL relational_expression
    ET              reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    OU              reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ;               reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    ,               reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    )               reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    SEPARATOR       reduce using rule 27 (logical_and_expression -> logical_and_expression ET equality_expression .)
    DIFFERENT       shift and go to state 59
    EQUAL           shift and go to state 60


state 88

    (24) equality_expression -> equality_expression DIFFERENT relational_expression .
    (19) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . > additive_expression
    (22) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    EQUAL           reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ET              reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    OU              reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ;               reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    ,               reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    )               reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SEPARATOR       reduce using rule 24 (equality_expression -> equality_expression DIFFERENT relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 61
    INFERIEUR_OU_EGAL shift and go to state 62
    >               shift and go to state 63
    <               shift and go to state 64


state 89

    (25) equality_expression -> equality_expression EQUAL relational_expression .
    (19) relational_expression -> relational_expression . SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> relational_expression . INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> relational_expression . > additive_expression
    (22) relational_expression -> relational_expression . < additive_expression
    DIFFERENT       reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    EQUAL           reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    ET              reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    OU              reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEPARATOR       reduce using rule 25 (equality_expression -> equality_expression EQUAL relational_expression .)
    SUPERIEUR_OU_EGAL shift and go to state 61
    INFERIEUR_OU_EGAL shift and go to state 62
    >               shift and go to state 63
    <               shift and go to state 64


state 90

    (19) relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 19 (relational_expression -> relational_expression SUPERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 53
    +               shift and go to state 54


state 91

    (20) relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    >               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    <               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    DIFFERENT       reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    EQUAL           reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ET              reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    OU              reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ;               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    ,               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    )               reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    SEPARATOR       reduce using rule 20 (relational_expression -> relational_expression INFERIEUR_OU_EGAL additive_expression .)
    -               shift and go to state 53
    +               shift and go to state 54


state 92

    (21) relational_expression -> relational_expression > additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    >               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    DIFFERENT       reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    EQUAL           reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    ET              reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    OU              reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    SEPARATOR       reduce using rule 21 (relational_expression -> relational_expression > additive_expression .)
    -               shift and go to state 53
    +               shift and go to state 54


state 93

    (22) relational_expression -> relational_expression < additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    SUPERIEUR_OU_EGAL reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    INFERIEUR_OU_EGAL reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    >               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    DIFFERENT       reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    EQUAL           reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    ET              reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    OU              reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    SEPARATOR       reduce using rule 22 (relational_expression -> relational_expression < additive_expression .)
    -               shift and go to state 53
    +               shift and go to state 54


state 94

    (12) multiplicative_expression -> multiplicative_expression % cast_expression .
    %               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    *               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    DIFFERENT       reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ET              reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OU              reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SEPARATOR       reduce using rule 12 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 95

    (13) multiplicative_expression -> multiplicative_expression / cast_expression .
    %               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    *               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    DIFFERENT       reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ET              reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OU              reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SEPARATOR       reduce using rule 13 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 96

    (14) multiplicative_expression -> multiplicative_expression * cast_expression .
    %               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    *               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SUPERIEUR_OU_EGAL reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    INFERIEUR_OU_EGAL reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    DIFFERENT       reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ET              reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OU              reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SEPARATOR       reduce using rule 14 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 97

    (47) declaration -> type . IDENTIFIANT AFFECT additive_expression
    (48) declaration -> type . IDENTIFIANT
    IDENTIFIANT     shift and go to state 107


state 98

    (49) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt . ) compound_statement
    )               shift and go to state 108


state 99

    (50) function_declaration_statement -> type IDENTIFIANT ( ) . compound_statement
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 109

state 100

    (55) arguments_list_opt -> declarations_list .
    (56) declarations_list -> declarations_list . SEPARATOR declaration
    )               reduce using rule 55 (arguments_list_opt -> declarations_list .)
    SEPARATOR       shift and go to state 110


state 101

    (57) declarations_list -> declaration .
    SEPARATOR       reduce using rule 57 (declarations_list -> declaration .)
    )               reduce using rule 57 (declarations_list -> declaration .)


state 102

    (47) declaration -> type IDENTIFIANT AFFECT additive_expression .
    (16) additive_expression -> additive_expression . - multiplicative_expression
    (17) additive_expression -> additive_expression . + multiplicative_expression
    ;               reduce using rule 47 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    SEPARATOR       reduce using rule 47 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    )               reduce using rule 47 (declaration -> type IDENTIFIANT AFFECT additive_expression .)
    -               shift and go to state 53
    +               shift and go to state 54


state 103

    (51) function_call -> IDENTIFIANT ( parameters_list_opt ) .
    %               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    /               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    *               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    -               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    +               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SUPERIEUR_OU_EGAL reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    INFERIEUR_OU_EGAL reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    >               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    <               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    DIFFERENT       reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    EQUAL           reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ET              reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    OU              reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ;               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    ,               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    )               reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)
    SEPARATOR       reduce using rule 51 (function_call -> IDENTIFIANT ( parameters_list_opt ) .)


state 104

    (59) parameters_list -> parameters_list SEPARATOR . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    assignment_expression          shift and go to state 111
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    additive_expression            shift and go to state 23
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 105

    (67) iteration_statement -> TANTQUE ( expression ) . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 112
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 106

    (65) selection_statement -> SI ( expression ) . statement SINON statement
    (66) selection_statement -> SI ( expression ) . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 113
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 107

    (47) declaration -> type IDENTIFIANT . AFFECT additive_expression
    (48) declaration -> type IDENTIFIANT .
    AFFECT          shift and go to state 72
    SEPARATOR       reduce using rule 48 (declaration -> type IDENTIFIANT .)
    )               reduce using rule 48 (declaration -> type IDENTIFIANT .)


state 108

    (49) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) . compound_statement
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    {               shift and go to state 19

    compound_statement             shift and go to state 114

state 109

    (50) function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .
    TANTQUE         reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SI              reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ;               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    {               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    RETOURNER       reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOL            reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    INT             reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    (               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    ENTIER          reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    BOOLEAN         reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    IDENTIFIANT     reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    -               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    $end            reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    }               reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)
    SINON           reduce using rule 50 (function_declaration_statement -> type IDENTIFIANT ( ) compound_statement .)


state 110

    (56) declarations_list -> declarations_list SEPARATOR . declaration
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (53) type -> . BOOL
    (54) type -> . INT
    BOOL            shift and go to state 21
    INT             shift and go to state 22

    declaration                    shift and go to state 115
    type                           shift and go to state 97

state 111

    (59) parameters_list -> parameters_list SEPARATOR assignment_expression .
    SEPARATOR       reduce using rule 59 (parameters_list -> parameters_list SEPARATOR assignment_expression .)
    )               reduce using rule 59 (parameters_list -> parameters_list SEPARATOR assignment_expression .)


state 112

    (67) iteration_statement -> TANTQUE ( expression ) statement .
    TANTQUE         reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    SI              reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    ;               reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    {               reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    RETOURNER       reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOL            reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    INT             reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    (               reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    ENTIER          reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    BOOLEAN         reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    IDENTIFIANT     reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    -               reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    $end            reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    }               reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)
    SINON           reduce using rule 67 (iteration_statement -> TANTQUE ( expression ) statement .)


state 113

    (65) selection_statement -> SI ( expression ) statement . SINON statement
    (66) selection_statement -> SI ( expression ) statement .
  ! shift/reduce conflict for SINON resolved as shift
    SINON           shift and go to state 116
    TANTQUE         reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    SI              reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    ;               reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    {               reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    RETOURNER       reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    BOOL            reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    INT             reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    (               reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    ENTIER          reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    BOOLEAN         reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    IDENTIFIANT     reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    -               reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    $end            reduce using rule 66 (selection_statement -> SI ( expression ) statement .)
    }               reduce using rule 66 (selection_statement -> SI ( expression ) statement .)


state 114

    (49) function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .
    TANTQUE         reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SI              reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ;               reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    {               reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    RETOURNER       reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOL            reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    INT             reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    (               reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    ENTIER          reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    BOOLEAN         reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    IDENTIFIANT     reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    -               reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    $end            reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    }               reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)
    SINON           reduce using rule 49 (function_declaration_statement -> type IDENTIFIANT ( arguments_list_opt ) compound_statement .)


state 115

    (56) declarations_list -> declarations_list SEPARATOR declaration .
    SEPARATOR       reduce using rule 56 (declarations_list -> declarations_list SEPARATOR declaration .)
    )               reduce using rule 56 (declarations_list -> declarations_list SEPARATOR declaration .)


state 116

    (65) selection_statement -> SI ( expression ) statement SINON . statement
    (37) statement -> . function_declaration_statement
    (38) statement -> . declaration_statement
    (39) statement -> . iteration_statement
    (40) statement -> . selection_statement
    (41) statement -> . expression_statement
    (42) statement -> . compound_statement
    (43) statement -> . jump_statement
    (49) function_declaration_statement -> . type IDENTIFIANT ( arguments_list_opt ) compound_statement
    (50) function_declaration_statement -> . type IDENTIFIANT ( ) compound_statement
    (46) declaration_statement -> . declaration ;
    (67) iteration_statement -> . TANTQUE ( expression ) statement
    (65) selection_statement -> . SI ( expression ) statement SINON statement
    (66) selection_statement -> . SI ( expression ) statement
    (63) expression_statement -> . expression ;
    (64) expression_statement -> . ;
    (44) compound_statement -> . { statement_list }
    (45) compound_statement -> . { }
    (68) jump_statement -> . RETOURNER expression ;
    (69) jump_statement -> . RETOURNER ;
    (53) type -> . BOOL
    (54) type -> . INT
    (47) declaration -> . type IDENTIFIANT AFFECT additive_expression
    (48) declaration -> . type IDENTIFIANT
    (35) expression -> . expression , assignment_expression
    (36) expression -> . assignment_expression
    (32) assignment_expression -> . conditional_expression
    (33) assignment_expression -> . primary_expression assignment_operator conditional_expression
    (31) conditional_expression -> . logical_or_expression
    (2) primary_expression -> . ( expression )
    (3) primary_expression -> . ENTIER
    (4) primary_expression -> . BOOLEAN
    (5) primary_expression -> . IDENTIFIANT
    (29) logical_or_expression -> . logical_or_expression OU logical_and_expression
    (30) logical_or_expression -> . logical_and_expression
    (27) logical_and_expression -> . logical_and_expression ET equality_expression
    (28) logical_and_expression -> . equality_expression
    (24) equality_expression -> . equality_expression DIFFERENT relational_expression
    (25) equality_expression -> . equality_expression EQUAL relational_expression
    (26) equality_expression -> . relational_expression
    (19) relational_expression -> . relational_expression SUPERIEUR_OU_EGAL additive_expression
    (20) relational_expression -> . relational_expression INFERIEUR_OU_EGAL additive_expression
    (21) relational_expression -> . relational_expression > additive_expression
    (22) relational_expression -> . relational_expression < additive_expression
    (23) relational_expression -> . additive_expression
    (16) additive_expression -> . additive_expression - multiplicative_expression
    (17) additive_expression -> . additive_expression + multiplicative_expression
    (18) additive_expression -> . multiplicative_expression
    (12) multiplicative_expression -> . multiplicative_expression % cast_expression
    (13) multiplicative_expression -> . multiplicative_expression / cast_expression
    (14) multiplicative_expression -> . multiplicative_expression * cast_expression
    (15) multiplicative_expression -> . cast_expression
    (11) cast_expression -> . unary_expression
    (8) unary_expression -> . unary_operator cast_expression
    (9) unary_expression -> . postfix_expression
    (10) unary_operator -> . -
    (6) postfix_expression -> . function_call
    (7) postfix_expression -> . primary_expression
    (51) function_call -> . IDENTIFIANT ( parameters_list_opt )
    (52) function_call -> . IDENTIFIANT ( )
    TANTQUE         shift and go to state 16
    SI              shift and go to state 18
    ;               shift and go to state 15
    {               shift and go to state 19
    RETOURNER       shift and go to state 20
    BOOL            shift and go to state 21
    INT             shift and go to state 22
    (               shift and go to state 13
    ENTIER          shift and go to state 28
    BOOLEAN         shift and go to state 29
    IDENTIFIANT     shift and go to state 12
    -               shift and go to state 33

    expression                     shift and go to state 17
    statement                      shift and go to state 117
    function_declaration_statement shift and go to state 4
    declaration_statement          shift and go to state 5
    iteration_statement            shift and go to state 6
    selection_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    compound_statement             shift and go to state 9
    jump_statement                 shift and go to state 10
    type                           shift and go to state 11
    declaration                    shift and go to state 14
    additive_expression            shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional_expression         shift and go to state 25
    primary_expression             shift and go to state 26
    logical_or_expression          shift and go to state 27
    logical_and_expression         shift and go to state 30
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 32
    multiplicative_expression      shift and go to state 34
    cast_expression                shift and go to state 35
    unary_expression               shift and go to state 36
    unary_operator                 shift and go to state 37
    postfix_expression             shift and go to state 38
    function_call                  shift and go to state 39

state 117

    (65) selection_statement -> SI ( expression ) statement SINON statement .
    TANTQUE         reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    SI              reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    ;               reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    {               reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    RETOURNER       reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOL            reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    INT             reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    (               reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    ENTIER          reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    BOOLEAN         reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    IDENTIFIANT     reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    -               reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    $end            reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    }               reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)
    SINON           reduce using rule 65 (selection_statement -> SI ( expression ) statement SINON statement .)


Conflicts:

shift/reduce conflict for SINON in state 113 resolved as shift